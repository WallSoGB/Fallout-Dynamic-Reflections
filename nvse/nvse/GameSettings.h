#pragma once

#include "GameAPI.h"
#include "NiTStringMap.hpp"

// 0C
class Setting
{
public:
	Setting();
	virtual ~Setting();

	virtual void Unk_01(void);

	enum EType	{
		kSetting_Bool = 0,
		kSetting_c,
		kSetting_h,
		kSetting_Integer,
		kSetting_Unsigned,
		kSetting_Float,
		kSetting_String,
		kSetting_r,
		kSetting_a,
		kSetting_Other
	};
	union Info {
		UInt32		uint;
		SInt32			i;
		float		f;
		char		* str;
		bool		b;
	};

	// void		** vtbl				// 00
	Info		uValue;				// 04
	const char	* pKey;				// 08

	UInt32 GetType();
	bool Get(double& out);
	bool Get(const char* str);
	const char* Get();
	bool Set(double newVal);
	bool Set(const char* str);
};

template<class T> class SettingCollection 
{
	UInt8	byt0004;
	UInt8	fil0005[3];
	UInt32	arr0008[0x0100];
	UInt32	unk0108;
};

template<class T> class BSTCaseInsensitiveStringMap: NiTStringMap<T>
{
};

template<class T> class SettingCollectionMap
{
	SettingCollection<T>					coll000;
	const BSTCaseInsensitiveStringMap<T *>	map010C;
};

template<class T> class SettingCollectionList
{
	SettingCollection<T>	coll000;
	tList<UInt32>			lst010C;
};

// 120
class GameSettingCollection			// Contains SettingCollectionMap<Setting> and SettingCollection<Setting>
{
public:
	GameSettingCollection();
	virtual ~GameSettingCollection();

	virtual void	Unk_01(void);
	virtual void	Unk_02(void);
	virtual void	Unk_03(void);
	virtual void	Unk_04(void);
	virtual void	Unk_05(void);
	virtual void	Unk_06(void);
	virtual void	Unk_07(void);
	virtual void	Unk_08(void);
	virtual void	Unk_09(void);
	virtual void	Unk_0A(void);

	// BSTCaseInsensitiveStringMap <Setting *>
	typedef NiTMapBase <const char *, Setting *>	SettingMap;

	// void		** vtbl							// 000
	UInt32		unk004[(0x10C - 0x004) >> 2];	// 004
	SettingMap	settingMap;						// 10C BSTCaseInsensitiveStringMap
	UInt8		unk11C;							// 11C
	UInt8		pad11D[3];

	bool GetGameSetting(const char* settingName, Setting** out);
	static GameSettingCollection * GetSingleton();
};

STATIC_ASSERT(sizeof(GameSettingCollection) == 0x120);

// 114
// actually 2 classes used: IniSettingCollection and IniPrefSettingCollection. Layouts are the same
class IniSettingCollection
{
public:
	IniSettingCollection();
	virtual ~IniSettingCollection();

	virtual void	Unk_01(void);
	virtual void	Unk_02(void);
	virtual void	Unk_03(void);
	virtual void	Unk_04(void);
	virtual void	Unk_05(void);
	virtual void	Unk_06(void);
	virtual void	Unk_07(void);
	virtual void	Unk_08(void);
	virtual void	Unk_09(void);
	virtual void	Unk_0A(void);

	// void				** vtbl				// 000
	char				iniPath[0x100];		// 004
	UInt32				unk104;				// 104
	UInt32				unk108;				// 108
	tList<Setting>		settings;			// 10C;

	static IniSettingCollection * GetIniSettings();
	static IniSettingCollection * GetIniPrefs();
};

STATIC_ASSERT(sizeof(IniSettingCollection) == 0x114);

bool GetNumericGameSetting(const char * settingName, double * result);
bool GetNumericIniSetting(const char * settingName, double * result);
bool GetIniSetting(const char* settingName, Setting** out);

#if 1
namespace eGameSettingCollection
{
	static char* sBloodParticleDefault = (char*)0x11CEBB4;
	static char* sCriticalStrikeIcon = (char*)0x11D22A8;
	static char* sDefaultPlayerName = (char*)0x11D4F7C;
	static char* sDehydrationDecrease = (char*)0x11D4B80;
	static char* sDehydrationIncrease = (char*)0x11D2F44;
	static char* sDehydrationNotSick = (char*)0x11D4FDC;
	static char* sDownloadsNotAvail = (char*)0x11D1EE8;
	static char* sEnterName = (char*)0x11D3B3C;
	static char* sHairColor0 = (char*)0x11D4BC8;
	static char* sHairColor1 = (char*)0x11D43C4;
	static char* sHairColor10 = (char*)0x11D2D70;
	static char* sHairColor11 = (char*)0x11D1F9C;
	static char* sHairColor12 = (char*)0x11D1EAC;
	static char* sHairColor13 = (char*)0x11D24DC;
	static char* sHairColor14 = (char*)0x11D2B48;
	static char* sHairColor15 = (char*)0x11D4A54;
	static char* sHairColor2 = (char*)0x11D4B50;
	static char* sHairColor3 = (char*)0x11D2C08;
	static char* sHairColor4 = (char*)0x11D24AC;
	static char* sHairColor5 = (char*)0x11D349C;
	static char* sHairColor6 = (char*)0x11D4CE8;
	static char* sHairColor7 = (char*)0x11D3040;
	static char* sHairColor8 = (char*)0x11D319C;
	static char* sHairColor9 = (char*)0x11D4BB0;
	static char* sHeadDamagedIcon = (char*)0x11D3934;
	static char* sKarmaMajorGained = (char*)0x11D3C74;
	static char* sKarmaMajorGainedImage = (char*)0x11D3B18;
	static char* sKarmaMajorLost = (char*)0x11D4A18;
	static char* sKarmaMajorLostImage = (char*)0x11D42C8;
	static char* sKarmaMinorGained = (char*)0x11D1FB4;
	static char* sKarmaMinorGainedImage = (char*)0x11D3E3C;
	static char* sKarmaMinorLost = (char*)0x11D3424;
	static char* sKarmaMinorLostImage = (char*)0x11D2CD4;
	static char* sKarmicTitleEvil01 = (char*)0x11C5028;
	static char* sKarmicTitleEvil02 = (char*)0x11C5278;
	static char* sKarmicTitleEvil03 = (char*)0x11C511C;
	static char* sKarmicTitleEvil04 = (char*)0x11C5084;
	static char* sKarmicTitleEvil05 = (char*)0x11C4F04;
	static char* sKarmicTitleEvil06 = (char*)0x11C4DC8;
	static char* sKarmicTitleEvil07 = (char*)0x11C5000;
	static char* sKarmicTitleEvil08 = (char*)0x11C519C;
	static char* sKarmicTitleEvil09 = (char*)0x11C5204;
	static char* sKarmicTitleEvil10 = (char*)0x11C4E2C;
	static char* sKarmicTitleEvil11 = (char*)0x11C5100;
	static char* sKarmicTitleEvil12 = (char*)0x11C51E0;
	static char* sKarmicTitleEvil13 = (char*)0x11C4E80;
	static char* sKarmicTitleEvil14 = (char*)0x11C4FD8;
	static char* sKarmicTitleEvil15 = (char*)0x11C501C;
	static char* sKarmicTitleEvil16 = (char*)0x11C4FCC;
	static char* sKarmicTitleEvil17 = (char*)0x11C50A0;
	static char* sKarmicTitleEvil18 = (char*)0x11C4DBC;
	static char* sKarmicTitleEvil19 = (char*)0x11C4F1C;
	static char* sKarmicTitleEvil20 = (char*)0x11C50C4;
	static char* sKarmicTitleEvil21 = (char*)0x11C4DA4;
	static char* sKarmicTitleEvil22 = (char*)0x11C51D4;
	static char* sKarmicTitleEvil23 = (char*)0x11C4E48;
	static char* sKarmicTitleEvil24 = (char*)0x11C4E10;
	static char* sKarmicTitleEvil25 = (char*)0x11C51BC;
	static char* sKarmicTitleEvil26 = (char*)0x11C4EBC;
	static char* sKarmicTitleEvil27 = (char*)0x11C4F10;
	static char* sKarmicTitleEvil28 = (char*)0x11C5174;
	static char* sKarmicTitleEvil29 = (char*)0x11C5040;
	static char* sKarmicTitleEvil30 = (char*)0x11C4F5C;
	static char* sKarmicTitleGood01 = (char*)0x11C4E68;
	static char* sKarmicTitleGood02 = (char*)0x11C4EEC;
	static char* sKarmicTitleGood03 = (char*)0x11C4F80;
	static char* sKarmicTitleGood04 = (char*)0x11C512C;
	static char* sKarmicTitleGood05 = (char*)0x11C4E8C;
	static char* sKarmicTitleGood06 = (char*)0x11C4F44;
	static char* sKarmicTitleGood07 = (char*)0x11C4EF8;
	static char* sKarmicTitleGood08 = (char*)0x11C4DB0;
	static char* sKarmicTitleGood09 = (char*)0x11C51A8;
	static char* sKarmicTitleGood10 = (char*)0x11C4FC0;
	static char* sKarmicTitleGood11 = (char*)0x11C4F28;
	static char* sKarmicTitleGood12 = (char*)0x11C4E98;
	static char* sKarmicTitleGood13 = (char*)0x11C4F50;
	static char* sKarmicTitleGood14 = (char*)0x11C5260;
	static char* sKarmicTitleGood15 = (char*)0x11C4D98;
	static char* sKarmicTitleGood16 = (char*)0x11C4F74;
	static char* sKarmicTitleGood17 = (char*)0x11C4F34;
	static char* sKarmicTitleGood18 = (char*)0x11C5054;
	static char* sKarmicTitleGood19 = (char*)0x11C5034;
	static char* sKarmicTitleGood20 = (char*)0x11C50B8;
	static char* sKarmicTitleGood21 = (char*)0x11C50E8;
	static char* sKarmicTitleGood22 = (char*)0x11C526C;
	static char* sKarmicTitleGood23 = (char*)0x11C4E1C;
	static char* sKarmicTitleGood24 = (char*)0x11C4FF4;
	static char* sKarmicTitleGood25 = (char*)0x11C4E04;
	static char* sKarmicTitleGood26 = (char*)0x11C4F9C;
	static char* sKarmicTitleGood27 = (char*)0x11C4DF8;
	static char* sKarmicTitleGood28 = (char*)0x11C518C;
	static char* sKarmicTitleGood29 = (char*)0x11C51C8;
	static char* sKarmicTitleGood30 = (char*)0x11C5248;
	static char* sKarmicTitleNeutral01 = (char*)0x11C50D0;
	static char* sKarmicTitleNeutral02 = (char*)0x11C4E74;
	static char* sKarmicTitleNeutral03 = (char*)0x11C4D70;
	static char* sKarmicTitleNeutral04 = (char*)0x11C4E38;
	static char* sKarmicTitleNeutral05 = (char*)0x11C4FB4;
	static char* sKarmicTitleNeutral06 = (char*)0x11C5288;
	static char* sKarmicTitleNeutral07 = (char*)0x11C5154;
	static char* sKarmicTitleNeutral08 = (char*)0x11C5254;
	static char* sKarmicTitleNeutral09 = (char*)0x11C506C;
	static char* sKarmicTitleNeutral10 = (char*)0x11C50F4;
	static char* sKarmicTitleNeutral11 = (char*)0x11C4EC8;
	static char* sKarmicTitleNeutral12 = (char*)0x11C50AC;
	static char* sKarmicTitleNeutral13 = (char*)0x11C4EB0;
	static char* sKarmicTitleNeutral14 = (char*)0x11C5210;
	static char* sKarmicTitleNeutral15 = (char*)0x11C5180;
	static char* sKarmicTitleNeutral16 = (char*)0x11C5238;
	static char* sKarmicTitleNeutral17 = (char*)0x11C4EA4;
	static char* sKarmicTitleNeutral18 = (char*)0x11C5010;
	static char* sKarmicTitleNeutral19 = (char*)0x11C4DEC;
	static char* sKarmicTitleNeutral20 = (char*)0x11C4F8C;
	static char* sKarmicTitleNeutral21 = (char*)0x11C5228;
	static char* sKarmicTitleNeutral22 = (char*)0x11C5138;
	static char* sKarmicTitleNeutral23 = (char*)0x11C5060;
	static char* sKarmicTitleNeutral24 = (char*)0x11C4DE0;
	static char* sKarmicTitleNeutral25 = (char*)0x11C51F8;
	static char* sKarmicTitleNeutral26 = (char*)0x11C4FE8;
	static char* sKarmicTitleNeutral27 = (char*)0x11C521C;
	static char* sKarmicTitleNeutral28 = (char*)0x11C4D84;
	static char* sKarmicTitleNeutral29 = (char*)0x11C51EC;
	static char* sKarmicTitleNeutral30 = (char*)0x11C4DD4;
	static char* sLeftArmDamagedIcon = (char*)0x11D238C;
	static char* sLeftLegDamagedIcon = (char*)0x11D45EC;
	static char* sLoadingArea = (char*)0x11D2CC8;
	static char* sLoadingContentMessage = (char*)0x11D3E30;
	static char* sMorphine = (char*)0x11D4100;
	static char* sNPCModelFemale = (char*)0x11D271C;
	static char* sNoFastTravelScriptBlock = (char*)0x11D3634;
	static char* sNoPickPocketAgain = (char*)0x11D2398;
	static char* sNoSleepHostileActorsNear = (char*)0x11D3850;
	static char* sNoTalkFleeing = (char*)0x11D253C;
	static char* sNoTalkUnConscious = (char*)0x11D2110;
	static char* sNoWaitHostilActorsNear = (char*)0x11D2E54;
	static char* sOverEncumbered = (char*)0x11D461C;
	static char* sPCControlsTextPrefix = (char*)0x11D3FC8;
	static char* sPlayerLeavingBorderRegion = (char*)0x11D50C0;
	static char* sPoisonNoWeaponMessage = (char*)0x11D274C;
	static char* sRepNegativeGain = (char*)0x11CBA5C;
	static char* sRepNegativeLoss = (char*)0x11CBA98;
	static char* sRepPositiveGain = (char*)0x11CBAC4;
	static char* sRepPositiveLoss = (char*)0x11CBB9C;
	static char* sRepTitlePosTwoNegThreeDesc = (char*)0x11CBD54;
	static char* sRestartBecauseContentRemoved = (char*)0x11D407C;
	static char* sRightArmDamagedIcon = (char*)0x11D3610;
	static char* sRightLegDamagedIcon = (char*)0x11D4E68;
	static char* sSleepDeprevationDecrease = (char*)0x11D33B8;
	static char* sSleepDeprevationIncrease = (char*)0x11D2FB0;
	static char* sSleepDeprevationNotSick = (char*)0x11D40DC;
	static char* sSplashParticles = (char*)0x11D12C4;
	static char* sStatsH20Abbrev = (char*)0x11D1F0C;
	static char* sTerminalServerText10 = (char*)0x11C8310;
	static char* sTraitMenuTitleText = (char*)0x11D2314;
	static char* sAMTime = (char*)0x11D2500;
	static char* sAbortText = (char*)0x11D092C;
	static char* sAccept = (char*)0x11D26F8;
	static char* sAcceptText = (char*)0x11D44F0;
	static char* sAchieveSMMasterDesc = (char*)0x11D0608;
	static char* sAchieveSMMasterName = (char*)0x11D14E0;
	static char* sAchieveSMMenaceDesc = (char*)0x11D07D0;
	static char* sAchieveSMMenaceName = (char*)0x11CFF2C;
	static char* sActionMapping = (char*)0x11D382C;
	static char* sActionPointsAttack = (char*)0x11D60B0;
	static char* sActionPointsCrouch = (char*)0x11D5EE8;
	static char* sActionPointsDrop = (char*)0x11D5FD0;
	static char* sActionPointsHeal = (char*)0x11D5FC0;
	static char* sActionPointsPunch = (char*)0x11D6004;
	static char* sActionPointsReload = (char*)0x11D5EBC;
	static char* sActionPointsShoot = (char*)0x11D6060;
	static char* sActionPointsShort = (char*)0x11D3E90;
	static char* sActionPointsStand = (char*)0x11D6010;
	static char* sActionPointsSwitchWeapon = (char*)0x11D6090;
	static char* sActionPointsThrow = (char*)0x11D5F74;
	static char* sActionPointsToggleWeaponDrawn = (char*)0x11D5FB4;
	static char* sActivateCreatureCalmed = (char*)0x11CEC68;
	static char* sActivateNPCCalmed = (char*)0x11CF598;
	static char* sActivationChoiceMessage = (char*)0x11D2284;
	static char* sActiveMineDescription = (char*)0x11D3F74;
	static char* sActorFade = (char*)0x11D4E44;
	static char* sAddItemtoInventory = (char*)0x11D4E80;
	static char* sAddItemtoSpellList = (char*)0x11D3658;
	static char* sAddText = (char*)0x11D3EA8;
	static char* sAddedEffects = (char*)0x11D4268;
	static char* sAge = (char*)0x11D2980;
	static char* sAlignEvil = (char*)0x11D4580;
	static char* sAlignGood = (char*)0x11D41B4;
	static char* sAlignNeutral = (char*)0x11D3208;
	static char* sAlignVeryEvil = (char*)0x11D31D8;
	static char* sAlignVeryGood = (char*)0x11D5000;
	static char* sAllCardsText = (char*)0x11D2164;
	static char* sAlreadyPlacedMine = (char*)0x11D47CC;
	static char* sAmber = (char*)0x11D5078;
	static char* sAmmoEffectCondition = (char*)0x11CAAB0;
	static char* sAmmoEffectDAM = (char*)0x11CAA98;
	static char* sAmmoEffectDR = (char*)0x11CAA88;
	static char* sAmmoEffectDT = (char*)0x11CAAA4;
	static char* sAmmoEffectFatigue = (char*)0x11CAABC;
	static char* sAmmoEffectSpread = (char*)0x11CAA7C;
	static char* sAnimationCanNotEquipArmor = (char*)0x11D3160;
	static char* sAnimationCanNotEquipWeapon = (char*)0x11D3B00;
	static char* sAnimationCanNotUnequip = (char*)0x11D3268;
	static char* sAntePotText = (char*)0x11D2968;
	static char* sAntiCheatTimeRemainingText = (char*)0x11D2278;
	static char* sAreaText = (char*)0x11D503C;
	static char* sArmorLowCond = (char*)0x11D3238;
	static char* sArmorWeightHeavy = (char*)0x11C9208;
	static char* sArmorWeightLight = (char*)0x11C9214;
	static char* sArmorWeightMedium = (char*)0x11C91E4;
	static char* sAttributeDamaged = (char*)0x11D4A60;
	static char* sAttributeDrained = (char*)0x11D21AC;
	static char* sAttributesCount = (char*)0x11D4DE4;
	static char* sAttributesTitle = (char*)0x11D3910;
	static char* sAudio = (char*)0x11D21A0;
	static char* sAudioNote = (char*)0x11D3AA8;
	static char* sAutoAttempt = (char*)0x11D4E14;
	static char* sAutoLoading = (char*)0x11D45B0;
	static char* sAutoMatchText = (char*)0x11D416C;
	static char* sAutoSaveDisabledDueToLackOfSpace = (char*)0x11D4844;
	static char* sAutoSaveDisabledLoadAnyways = (char*)0x11D1DE8;
	static char* sAutoSaving = (char*)0x11D4AB4;
	static char* sAutosaveAbbrev = (char*)0x11D3F14;
	static char* sAutosaveCorruptMessage = (char*)0x11D26BC;
	static char* sBack = (char*)0x11D1FF0;
	static char* sBald = (char*)0x11D4604;
	static char* sBeard = (char*)0x11D2B84;
	static char* sBeardcheeks = (char*)0x11D4B2C;
	static char* sBeardcircle = (char*)0x11D4400;
	static char* sBeardflushed = (char*)0x11D24D0;
	static char* sBeardgoatee = (char*)0x11D1E94;
	static char* sBeardlight = (char*)0x11D3D88;
	static char* sBeardmoustache = (char*)0x11D4778;
	static char* sBetMax = (char*)0x11D37FC;
	static char* sBetText = (char*)0x11D4DC0;
	static char* sBlackjackAntiCheatText = (char*)0x11D4520;
	static char* sBlacktext = (char*)0x11D40C4;
	static char* sBloodParticleMeleeDefault = (char*)0x11CE1A4;
	static char* sBloodSplatterAlpha01OPTFilename = (char*)0x11CE91C;
	static char* sBloodSplatterColor01OPTFilename = (char*)0x11CE288;
	static char* sBloodSplatterFlare01Filename = (char*)0x11CEDEC;
	static char* sBloodTextureDefault = (char*)0x11CFD44;
	static char* sBlue = (char*)0x11D4634;
	static char* sBrainDamagedByPlayerIcon = (char*)0x11D3BFC;
	static char* sBrightness = (char*)0x11D2524;
	static char* sBroken = (char*)0x11D2F2C;
	static char* sBrow = (char*)0x11D431C;
	static char* sBrowRidge = (char*)0x11D4574;
	static char* sBrowRidgeInner = (char*)0x11D1DB8;
	static char* sBrowRidgeOuter = (char*)0x11D4CDC;
	static char* sButton = (char*)0x11D2E18;
	static char* sButtonLocked = (char*)0x11D310C;
	static char* sBuy = (char*)0x11D4C28;
	static char* sCWheelBackUp = (char*)0x11D2890;
	static char* sCWheelBeAggressive = (char*)0x11D4FAC;
	static char* sCWheelBePassive = (char*)0x11D40D0;
	static char* sCWheelFollowMe = (char*)0x11D4544;
	static char* sCWheelKeepDistance = (char*)0x11D259C;
	static char* sCWheelOpenInventory = (char*)0x11D34CC;
	static char* sCWheelStayClose = (char*)0x11D3BA8;
	static char* sCWheelTalkTo = (char*)0x11D428C;
	static char* sCWheelTitle = (char*)0x11D3538;
	static char* sCWheelUseMelee = (char*)0x11D4664;
	static char* sCWheelUseRanged = (char*)0x11D2C8C;
	static char* sCWheelUseStimpak = (char*)0x11D226C;
	static char* sCWheelWaitHere = (char*)0x11D2D94;
	static char* sCameraPitch = (char*)0x11D464C;
	static char* sCanNotEquipWornEnchantment = (char*)0x11D2020;
	static char* sCanNotReadBook = (char*)0x11D4CD0;
	static char* sCanNotTrainAnymore = (char*)0x11D4E74;
	static char* sCanNotTrainHigher = (char*)0x11D3640;
	static char* sCancel = (char*)0x11D29F8;
	static char* sCancelBarter = (char*)0x11D1FA8;
	static char* sCancelRecipe = (char*)0x11D4A84;
	static char* sCantChangeResolution = (char*)0x11D4EB0;
	static char* sCantEquipBrokenItem = (char*)0x11D2140;
	static char* sCantEquipGeneric = (char*)0x11D42B0;
	static char* sCantEquipPowerArmor = (char*)0x11D3544;
	static char* sCantHotkeyBrokenItem = (char*)0x11D3814;
	static char* sCantHotkeyItem = (char*)0x11D1E1C;
	static char* sCantQuickLoad = (char*)0x11D3FD4;
	static char* sCantQuickSave = (char*)0x11D4CB8;
	static char* sCantRemoveWornItem = (char*)0x11D31FC;
	static char* sCantRepairPastMax = (char*)0x11D4EEC;
	static char* sCantSaveNow = (char*)0x11D2368;
	static char* sCantUnequipGeneric = (char*)0x11D3868;
	static char* sCaravanBiggestAnteText = (char*)0x11D3364;
	static char* sCaravanDeckText = (char*)0x11D2E6C;
	static char* sCaravanLossesText = (char*)0x11D4F40;
	static char* sCaravanPressAnyKeyText = (char*)0x11D3730;
	static char* sCaravanWinLossText = (char*)0x11D2AB8;
	static char* sCaravanWinningsText = (char*)0x11D30A0;
	static char* sCaravanYouLoseText = (char*)0x11D1E70;
	static char* sCaravanYouWinText = (char*)0x11D4B5C;
	static char* sCardCountText = (char*)0x11D47FC;
	static char* sCardsInDeckText = (char*)0x11D2D58;
	static char* sCasinoChipText = (char*)0x11D5054;
	static char* sCasinoEarningsText = (char*)0x11D3E0C;
	static char* sCauterize = (char*)0x11D2A94;
	static char* sChallengeComplete = (char*)0x11CB3D8;
	static char* sChallengeDamage = (char*)0x11D4514;
	static char* sChallengeKill = (char*)0x11D2464;
	static char* sChallengeOther = (char*)0x11D4988;
	static char* sChallengeProgress = (char*)0x11CB4F8;
	static char* sChallengeToggle = (char*)0x11D2A7C;
	static char* sChangeItemSelection = (char*)0x11D2B9C;
	static char* sCheekblush = (char*)0x11D1E04;
	static char* sCheekboneslow = (char*)0x11D2218;
	static char* sCheekbonesshallow = (char*)0x11D4A48;
	static char* sCheekbonesthin = (char*)0x11D37C0;
	static char* sCheeks = (char*)0x11D307C;
	static char* sCheeksconcave = (char*)0x11D24A0;
	static char* sCheeksround = (char*)0x11D1EDC;
	static char* sChemsAddicted = (char*)0x11D4CF4;
	static char* sChemsWithdrawal = (char*)0x11D1FCC;
	static char* sChemsWornOff = (char*)0x11D3C08;
	static char* sChestDamagedByPlayerIcon = (char*)0x11D301C;
	static char* sChestDamagedIcon = (char*)0x11D3940;
	static char* sChestDamagedMessage = (char*)0x11D28D8;
	static char* sChin = (char*)0x11D361C;
	static char* sChinforward = (char*)0x11D4994;
	static char* sChinpronounced = (char*)0x11D4A90;
	static char* sChinretracted = (char*)0x11D3A6C;
	static char* sChinshallow = (char*)0x11D3A60;
	static char* sChinsmall = (char*)0x11D42E0;
	static char* sChintall = (char*)0x11D4928;
	static char* sChinwide = (char*)0x11D4334;
	static char* sChipCountText = (char*)0x11D3304;
	static char* sChoose = (char*)0x11D44CC;
	static char* sCloseButton = (char*)0x11D22B4;
	static char* sColor = (char*)0x11D2098;
	static char* sCommsTabText = (char*)0x11D4AF0;
	static char* sComplexion = (char*)0x11D3FB0;
	static char* sComputersAddedNote = (char*)0x11D3CA4;
	static char* sComputersBack = (char*)0x11D2CBC;
	static char* sComputersHeader1 = (char*)0x11D3D7C;
	static char* sComputersHeader2 = (char*)0x11D497C;
	static char* sComputersLogon = (char*)0x11D2EE4;
	static char* sComputersWelcome = (char*)0x11D4040;
	static char* sConfirmChoice1 = (char*)0x11D36A0;
	static char* sConfirmChoice2 = (char*)0x11D46A0;
	static char* sConfirmContinue = (char*)0x11D2BE4;
	static char* sConfirmDelete = (char*)0x11D4FB8;
	static char* sConfirmLoad = (char*)0x11D3F2C;
	static char* sConfirmNew = (char*)0x11D3B54;
	static char* sConfirmQuit = (char*)0x11D3988;
	static char* sConfirmSave = (char*)0x11D3298;
	static char* sConfirmWarning = (char*)0x11D48A4;
	static char* sContainerItemsTitle = (char*)0x11D3748;
	static char* sContinue = (char*)0x11D3568;
	static char* sContinuePlayingAfterCredits = (char*)0x11D39B8;
	static char* sContinueText = (char*)0x11D0070;
	static char* sContractedDisease = (char*)0x11D1DD0;
	static char* sControllerOption = (char*)0x11D2764;
	static char* sControls = (char*)0x11D1F54;
	static char* sCorruptContentMessage = (char*)0x11D2F80;
	static char* sCrew = (char*)0x11D46B8;
	static char* sCrimeTypeAttack = (char*)0x11D6588;
	static char* sCrimeTypeMurder = (char*)0x11D6600;
	static char* sCrimeTypePickpocket = (char*)0x11D65A4;
	static char* sCrimeTypeSteal = (char*)0x11D65C4;
	static char* sCrimeTypeTrespass = (char*)0x11D6618;
	static char* sCriticalStrike = (char*)0x11D5030;
	static char* sCrosshair = (char*)0x11D28FC;
	static char* sCurrentAnteText = (char*)0x11D2A64;
	static char* sCurrentBetText = (char*)0x11D3808;
	static char* sCurrentObjective = (char*)0x11D40F4;
	static char* sCursorFilename = (char*)0x11D4760;
	static char* sData = (char*)0x11D21E8;
	static char* sDayFriday = (char*)0x11C79B0;
	static char* sDayMonday = (char*)0x11C79E0;
	static char* sDaySaturday = (char*)0x11C7914;
	static char* sDaySunday = (char*)0x11C7878;
	static char* sDayThursday = (char*)0x11C78A8;
	static char* sDayTuesday = (char*)0x11C79C8;
	static char* sDayWednesday = (char*)0x11C7884;
	static char* sDealText = (char*)0x11D3DAC;
	static char* sDecrease = (char*)0x11D2A4C;
	static char* sDecreaseBetText = (char*)0x11D4880;
	static char* sDefaultCellName = (char*)0x11CA134;
	static char* sDefaultMessage = (char*)0x11D2950;
	static char* sDefaults = (char*)0x11D42F8;
	static char* sDelete = (char*)0x11D29EC;
	static char* sDeleteSaveGame = (char*)0x11D2884;
	static char* sDeleteSuccessful = (char*)0x11D3F08;
	static char* sDevice = (char*)0x11D2074;
	static char* sDeviceRemoved = (char*)0x11D4424;
	static char* sDialogSubtitles = (char*)0x11D2E60;
	static char* sDifficulty = (char*)0x11D1E34;
	static char* sDisableHelp = (char*)0x11D2638;
	static char* sDisableXBoxController = (char*)0x11D4A00;
	static char* sDisarmMine = (char*)0x11D358C;
	static char* sDiscardCardText = (char*)0x11D4D84;
	static char* sDiscardSelectedText = (char*)0x11D3718;
	static char* sDiscardTrackText = (char*)0x11D419C;
	static char* sDiscoveredText = (char*)0x11D220C;
	static char* sDismemberParticleDefault = (char*)0x11CE0C4;
	static char* sDismemberRobotParticleDefault = (char*)0x11CFA2C;
	static char* sDisplay = (char*)0x11D3760;
	static char* sDone = (char*)0x11D35C8;
	static char* sDoubleDownText = (char*)0x11D4C7C;
	static char* sDownloads = (char*)0x11D4340;
	static char* sDownloadsAvailable = (char*)0x11D4F04;
	static char* sDropEquippedItemWarning = (char*)0x11D22CC;
	static char* sDropQuestItemWarning = (char*)0x11D47A8;
	static char* sDurationText = (char*)0x11D4430;
	static char* sEffectAlreadyAdded = (char*)0x11D4C10;
	static char* sEffectsVolume = (char*)0x11D39A0;
	static char* sEmpty = (char*)0x11D1F6C;
	static char* sEnableHelp = (char*)0x11D4D9C;
	static char* sEntryInstructions1 = (char*)0x11D23BC;
	static char* sEntryInstructions2 = (char*)0x11D2404;
	static char* sEquipItemOnPlayer = (char*)0x11D2A10;
	static char* sEssentialCharacterDown = (char*)0x11D1E28;
	static char* sEvenText = (char*)0x11D2698;
	static char* sExit = (char*)0x11D3400;
	static char* sExitGameAffirm = (char*)0x11D1E88;
	static char* sExplosionSplashParticles = (char*)0x11D0CE8;
	static char* sExplosive = (char*)0x11D4538;
	static char* sEyebrows = (char*)0x11D2308;
	static char* sEyebrowsdark = (char*)0x11D44E4;
	static char* sEyebrowslow = (char*)0x11D3334;
	static char* sEyebrowslower = (char*)0x11D3CB0;
	static char* sEyebrowsouter = (char*)0x11D2008;
	static char* sEyebrowsthick = (char*)0x11D2AA0;
	static char* sEyebrowsuppert = (char*)0x11D3124;
	static char* sEyebrowsvery = (char*)0x11D36AC;
	static char* sEyelidslight = (char*)0x11D4ACC;
	static char* sEyelidspale = (char*)0x11D3F20;
	static char* sEyeliner = (char*)0x11D4304;
	static char* sEyes = (char*)0x11D3088;
	static char* sEyesTex = (char*)0x11D38A4;
	static char* sEyesdark = (char*)0x11D35E0;
	static char* sEyesdown = (char*)0x11D50A8;
	static char* sEyeshadow = (char*)0x11D3DA0;
	static char* sEyesocketsbruised = (char*)0x11D3580;
	static char* sEyesocketsdark = (char*)0x11D48BC;
	static char* sEyessmall = (char*)0x11D1DDC;
	static char* sEyestilt = (char*)0x11D343C;
	static char* sEyestogether = (char*)0x11D4E5C;
	static char* sEyeswhites = (char*)0x11D298C;
	static char* sFace = (char*)0x11D3C38;
	static char* sFacebrow = (char*)0x11D28F0;
	static char* sFaceforehead = (char*)0x11D3B78;
	static char* sFaceheavy = (char*)0x11D2F08;
	static char* sFaceround = (char*)0x11D2D64;
	static char* sFacethin = (char*)0x11D3B60;
	static char* sFastTravelNoTravelHealthDamage = (char*)0x11D2560;
	static char* sFemale = (char*)0x11D2D40;
	static char* sFileNotFound = (char*)0x11D4DCC;
	static char* sFindingContentMessage = (char*)0x11D1EA0;
	static char* sFinsihBetText = (char*)0x11D2824;
	static char* sFirstDozenText = (char*)0x11D4B8C;
	static char* sFirstPersonSkeleton = (char*)0x11CDD7C;
	static char* sFloraFailureMessage = (char*)0x11C8594;
	static char* sFloraSuccessMessage = (char*)0x11C8570;
	static char* sFootstepsVolume = (char*)0x11D4AC0;
	static char* sFor = (char*)0x11D39DC;
	static char* sForceLock = (char*)0x11D3460;
	static char* sForehead = (char*)0x11D4484;
	static char* sForeheadsmall = (char*)0x11D29C8;
	static char* sForeheadtall = (char*)0x11D24C4;
	static char* sForeheadtilt = (char*)0x11D2EFC;
	static char* sForfeitGameText = (char*)0x11D3AF4;
	static char* sFrenziedByPlayerMessage = (char*)0x11D41A8;
	static char* sFullHealth = (char*)0x11D2AF4;
	static char* sGFWLive = (char*)0x11D37E4;
	static char* sGamblingBannedText = (char*)0x11D3AC0;
	static char* sGamblingBrokeText = (char*)0x11D2428;
	static char* sGamblingMinWinText = (char*)0x11D3598;
	static char* sGameplay = (char*)0x11D3D94;
	static char* sGender = (char*)0x11D49D0;
	static char* sGeneralFace = (char*)0x11D2878;
	static char* sGeneralSkin = (char*)0x11D2C68;
	static char* sGeneralSubtitles = (char*)0x11D3C2C;
	static char* sGiveAway = (char*)0x11D449C;
	static char* sGold = (char*)0x11D4D0C;
	static char* sGotAwayWithStealing = (char*)0x11D2194;
	static char* sGrassFade = (char*)0x11D3B9C;
	static char* sGreen = (char*)0x11D4358;
	static char* sHUDColor = (char*)0x11D2944;
	static char* sHUDHealth = (char*)0x11D250C;
	static char* sHUDOpacity = (char*)0x11D2F38;
	static char* sHUDQuestCompleted = (char*)0x11D1D64;
	static char* sHUDRads = (char*)0x11D30C4;
	static char* sHUDUseKey = (char*)0x11D3BE4;
	static char* sHackIneligible = (char*)0x11C8398;
	static char* sHackingAccessing1 = (char*)0x11D3448;
	static char* sHackingAccessing2 = (char*)0x11D485C;
	static char* sHackingAccessing3 = (char*)0x11D4AE4;
	static char* sHackingCorrect = (char*)0x11D2B30;
	static char* sHackingDenied = (char*)0x11D26E0;
	static char* sHackingDudRemoved = (char*)0x11D1E7C;
	static char* sHackingGranted = (char*)0x11D2608;
	static char* sHackingHeader = (char*)0x11D33D0;
	static char* sHackingHeader2 = (char*)0x11D4310;
	static char* sHackingHeader3 = (char*)0x11D2E24;
	static char* sHackingIntro01 = (char*)0x11D3A3C;
	static char* sHackingIntro02 = (char*)0x11D3C68;
	static char* sHackingIntro03 = (char*)0x11D4C04;
	static char* sHackingIntro04 = (char*)0x11D4D60;
	static char* sHackingIntro05 = (char*)0x11D3034;
	static char* sHackingIntro06 = (char*)0x11D4B98;
	static char* sHackingIntro07 = (char*)0x11D1F48;
	static char* sHackingIntro08 = (char*)0x11D1DA0;
	static char* sHackingIntro09 = (char*)0x11D3070;
	static char* sHackingIntro10 = (char*)0x11D4850;
	static char* sHackingIntro11 = (char*)0x11D4F1C;
	static char* sHackingIntro12 = (char*)0x11D4694;
	static char* sHackingIntro13 = (char*)0x11D2134;
	static char* sHackingLockout1 = (char*)0x11D3148;
	static char* sHackingLockout2 = (char*)0x11D33A0;
	static char* sHackingLockout3 = (char*)0x11D31C0;
	static char* sHackingLockout4 = (char*)0x11D30E8;
	static char* sHackingSecurityReset = (char*)0x11D3F5C;
	static char* sHackingToleranceReset1 = (char*)0x11D47E4;
	static char* sHackingToleranceReset2 = (char*)0x11D4F70;
	static char* sHackingWarning = (char*)0x11D1F78;
	static char* sHair = (char*)0x11D2248;
	static char* sHandToHandIcon = (char*)0x11C5CCC;
	static char* sHardcore = (char*)0x11D1D7C;
	static char* sHeadDamagedByPlayerIcon = (char*)0x11D4FE8;
	static char* sHeadDamagedMessage = (char*)0x11D3904;
	static char* sHealth = (char*)0x11D20A4;
	static char* sHeavyArmorNoJump = (char*)0x11D2260;
	static char* sHeavyArmorSink = (char*)0x11D2B6C;
	static char* sHelp = (char*)0x11D2584;
	static char* sHigh = (char*)0x11D3A78;
	static char* sHitPointsShort = (char*)0x11D3010;
	static char* sHitText = (char*)0x11D4C88;
	static char* sHolidayEmperorsBirthday = (char*)0x11C78B4;
	static char* sHolidayFirstPlanting = (char*)0x11C78F0;
	static char* sHolidayHarvestsEnd = (char*)0x11C78FC;
	static char* sHolidayJestersDay = (char*)0x11C78C0;
	static char* sHolidayMerchantsFestival = (char*)0x11C78CC;
	static char* sHolidayMidYearCelebration = (char*)0x11C7944;
	static char* sHolidayNewLifeFestival = (char*)0x11C7938;
	static char* sHolidayNorthWindsPrayer = (char*)0x11C79D4;
	static char* sHolidayOldLifeFestival = (char*)0x11C789C;
	static char* sHolidaySecondPlanting = (char*)0x11C7998;
	static char* sHolidaySouthWindsPrayer = (char*)0x11C78D8;
	static char* sHolidaySunsRest = (char*)0x11C79BC;
	static char* sHolidayTalesAndTallows = (char*)0x11C7A1C;
	static char* sHolidayWarriorsFestival = (char*)0x11C79F8;
	static char* sHolidayWitchesFestival = (char*)0x11C792C;
	static char* sHotKeyString = (char*)0x11D4898;
	static char* sHour = (char*)0x11D4490;
	static char* sHours = (char*)0x11D3AE4;
	static char* sHowMany = (char*)0x11D3ACC;
	static char* sHowManyWait = (char*)0x11D2914;
	static char* sHungerDecrease = (char*)0x11D4C70;
	static char* sHungerIncrease = (char*)0x11D1FD8;
	static char* sHungerNotSick = (char*)0x11D3A18;
	static char* sIgnoreText = (char*)0x11D05CC;
	static char* sImageNote = (char*)0x11D283C;
	static char* sImpactParticleConcreteDefault = (char*)0x11CF550;
	static char* sImpactParticleMetalDefault = (char*)0x11CF3A8;
	static char* sImpactParticleWoodDefault = (char*)0x11CFA68;
	static char* sImpossibleLock = (char*)0x11D2770;
	static char* sInaccessible = (char*)0x11D44D8;
	static char* sIncrease = (char*)0x11D45D4;
	static char* sIncreaseBetText = (char*)0x11D3358;
	static char* sIngredientFail = (char*)0x11D44FC;
	static char* sIngredients = (char*)0x11D3094;
	static char* sInvalidPickpocket = (char*)0x11D4298;
	static char* sInventoryAid = (char*)0x11D40B8;
	static char* sInventoryAmmo = (char*)0x11D491C;
	static char* sInventoryAmmoTab = (char*)0x11D325C;
	static char* sInventoryApparel = (char*)0x11D4D54;
	static char* sInventoryArmorClass = (char*)0x11D2DDC;
	static char* sInventoryCaps = (char*)0x11D25B4;
	static char* sInventoryCondition = (char*)0x11D4DA8;
	static char* sInventoryDamage = (char*)0x11D2C80;
	static char* sInventoryDamagePerSecond = (char*)0x11D4130;
	static char* sInventoryDamageResistance = (char*)0x11D20C8;
	static char* sInventoryDamageThreshold = (char*)0x11D3970;
	static char* sInventoryDrop = (char*)0x11D2A1C;
	static char* sInventoryEffects = (char*)0x11D4EE0;
	static char* sInventoryEquip = (char*)0x11D3CE0;
	static char* sInventoryHotKey = (char*)0x11D35D4;
	static char* sInventoryItems = (char*)0x11D437C;
	static char* sInventoryMisc = (char*)0x11D2AD0;
	static char* sInventoryMod = (char*)0x11D2EB4;
	static char* sInventoryName = (char*)0x11D1E4C;
	static char* sInventoryQuantity = (char*)0x11D36D0;
	static char* sInventoryRepair = (char*)0x11D4F64;
	static char* sInventoryStrReq = (char*)0x11D3310;
	static char* sInventoryUnequip = (char*)0x11D4610;
	static char* sInventoryUse = (char*)0x11D4790;
	static char* sInventoryValue = (char*)0x11D26A4;
	static char* sInventoryWeapons = (char*)0x11D29BC;
	static char* sInventoryWeight = (char*)0x11D1E64;
	static char* sInventoryWeightUpper = (char*)0x11D2AAC;
	static char* sItemFade = (char*)0x11D22C0;
	static char* sJaw = (char*)0x11D50E4;
	static char* sJawNeck = (char*)0x11D48F8;
	static char* sJawline = (char*)0x11D30AC;
	static char* sJawretracted = (char*)0x11D3F38;
	static char* sJawwide = (char*)0x11D3820;
	static char* sJournalTitleActive = (char*)0x11D3C14;
	static char* sJournalTitleCompleted = (char*)0x11D4D6C;
	static char* sJournalTitleCompletedDetails = (char*)0x11D1D88;
	static char* sJournalTitleCurrent = (char*)0x11D4EC8;
	static char* sJunk = (char*)0x11D3C44;
	static char* sKeyLocked = (char*)0x11D4754;
	static char* sKeyring = (char*)0x11D3B24;
	static char* sKillCamMode = (char*)0x11D3670;
	static char* sKillCamModeCinematic = (char*)0x11D4FC4;
	static char* sKillCamModeNone = (char*)0x11D4ED4;
	static char* sKillCamModePlayer = (char*)0x11D4670;
	static char* sKnownEffects = (char*)0x11D2200;
	static char* sLarge = (char*)0x11D4274;
	static char* sLeaveMarker = (char*)0x11D4F58;
	static char* sLeftArmDamagedByPlayerIcon = (char*)0x11D4FF4;
	static char* sLeftArmDamagedMessage = (char*)0x11D28E4;
	static char* sLeftLegDamagedByPlayerIcon = (char*)0x11D4688;
	static char* sLeftLegDamagedMessage = (char*)0x11D3FA4;
	static char* sLength = (char*)0x11D50F0;
	static char* sLevelAbbrev = (char*)0x11D3B30;
	static char* sLevelProgress = (char*)0x11D235C;
	static char* sLevelUp = (char*)0x11D4328;
	static char* sLevelUpPerkCounter = (char*)0x11D2E78;
	static char* sLevelUpPerkCounterPl = (char*)0x11D2A04;
	static char* sLevelUpSkillCounter = (char*)0x11D2A28;
	static char* sLevelUpSkillCounterPl = (char*)0x11D1D4C;
	static char* sLevelUpTitleText = (char*)0x11D404C;
	static char* sLightFade = (char*)0x11D34D8;
	static char* sLips = (char*)0x11D4C34;
	static char* sLipsflushed = (char*)0x11D440C;
	static char* sLipstickdarkblue = (char*)0x11D4AD8;
	static char* sLipstickdarkred = (char*)0x11D482C;
	static char* sLoad = (char*)0x11D488C;
	static char* sLoadFromMainMenu = (char*)0x11D4394;
	static char* sLoadSavedGame = (char*)0x11D36C4;
	static char* sLoadScreenTypeDataFontHint = (char*)0x11D5090;
	static char* sLoadScreenTypeDataTextureSpaceHint = (char*)0x11D4154;
	static char* sLoadThisGame = (char*)0x11D385C;
	static char* sLoadWhilePlaying = (char*)0x11D2AE8;
	static char* sLoading = (char*)0x11D355C;
	static char* sLoadingLOD = (char*)0x11D4190;
	static char* sLocalMapTabText = (char*)0x11D38B0;
	static char* sLockBroken = (char*)0x11D3E9C;
	static char* sLockLevelNameAverage = (char*)0x11C3A5C;
	static char* sLockLevelNameEasy = (char*)0x11C3A74;
	static char* sLockLevelNameHard = (char*)0x11C3A98;
	static char* sLockLevelNameImpossible = (char*)0x11C3A44;
	static char* sLockLevelNameVeryEasy = (char*)0x11C39EC;
	static char* sLockLevelNameVeryHard = (char*)0x11C39AC;
	static char* sLockLevelText = (char*)0x11D25C0;
	static char* sLocked = (char*)0x11D2458;
	static char* sLockpickSkillText = (char*)0x11D4D30;
	static char* sLockpickSkillTooLow = (char*)0x11D1F00;
	static char* sLockpickingTitle = (char*)0x11D2E30;
	static char* sLostController = (char*)0x11D49B8;
	static char* sLow = (char*)0x11D4460;
	static char* sLuckyWinText = (char*)0x11D3A9C;
	static char* sMadeAt = (char*)0x11D50FC;
	static char* sMagicCastConstant = (char*)0x11C359C;
	static char* sMagicCastInsufficientMagicka = (char*)0x11C34C4;
	static char* sMagicCastInsufficientSkill = (char*)0x11C3490;
	static char* sMagicCastMultipleBoundEffects = (char*)0x11C345C;
	static char* sMagicCastOKText = (char*)0x11C3478;
	static char* sMagicCastOnce = (char*)0x11C35EC;
	static char* sMagicCastPowerUsed = (char*)0x11C34A4;
	static char* sMagicCastRangedUnderwater = (char*)0x11C34DC;
	static char* sMagicCastSilenced = (char*)0x11C3450;
	static char* sMagicCastWhenStrikes = (char*)0x11C3808;
	static char* sMagicCastWhenUsed = (char*)0x11C37AC;
	static char* sMagicCostliestEffectRequires = (char*)0x11C33C0;
	static char* sMagicCostliestEffectSkillOf = (char*)0x11C3390;
	static char* sMagicEffectItemAbsorb = (char*)0x11C32E8;
	static char* sMagicEffectItemCreateLock = (char*)0x11C3258;
	static char* sMagicEffectItemDamage = (char*)0x11C3278;
	static char* sMagicEffectItemDrain = (char*)0x11C3284;
	static char* sMagicEffectItemFeet = (char*)0x11C3310;
	static char* sMagicEffectItemFor = (char*)0x11C3268;
	static char* sMagicEffectItemFortify = (char*)0x11C32C8;
	static char* sMagicEffectItemIn = (char*)0x11C320C;
	static char* sMagicEffectItemLock = (char*)0x11C3290;
	static char* sMagicEffectItemOn = (char*)0x11C324C;
	static char* sMagicEffectItemPercent = (char*)0x11C3234;
	static char* sMagicEffectItemPointsPlural = (char*)0x11C32D8;
	static char* sMagicEffectItemPointsSingular = (char*)0x11C3300;
	static char* sMagicEffectItemRestore = (char*)0x11C3200;
	static char* sMagicEffectItemSecondsPlural = (char*)0x11C332C;
	static char* sMagicEffectItemSecondsSingular = (char*)0x11C32A0;
	static char* sMagicEffectItemUpToLevel = (char*)0x11C3228;
	static char* sMagicEffectResisted = (char*)0x11D340C;
	static char* sMagicProjectileTypeBall = (char*)0x11C36B8;
	static char* sMagicProjectileTypeBolt = (char*)0x11C37FC;
	static char* sMagicProjectileTypeFog = (char*)0x11C37C4;
	static char* sMagicProjectileTypeSpray = (char*)0x11C37A0;
	static char* sMagicRangeSelf = (char*)0x11C35C4;
	static char* sMagicRangeStrike = (char*)0x11C3320;
	static char* sMagicRangeTarget = (char*)0x11C365C;
	static char* sMagicRangeTouch = (char*)0x11C35AC;
	static char* sMagicSchool = (char*)0x11C3374;
	static char* sMagicSchoolAlteration = (char*)0x11C3684;
	static char* sMagicSchoolConjuration = (char*)0x11C37B8;
	static char* sMagicSchoolDestruction = (char*)0x11C3768;
	static char* sMagicSchoolIllusion = (char*)0x11C35D4;
	static char* sMagicSchoolMysticism = (char*)0x11C3648;
	static char* sMagicSchoolRestoration = (char*)0x11C36A0;
	static char* sMagicTypeAbility = (char*)0x11C3674;
	static char* sMagicTypeAddiction = (char*)0x11C3690;
	static char* sMagicTypeDisease = (char*)0x11C3750;
	static char* sMagicTypeEnchantment = (char*)0x11C360C;
	static char* sMagicTypeLesserPower = (char*)0x11C37DC;
	static char* sMagicTypeLevelled = (char*)0x11C3794;
	static char* sMagicTypePoison = (char*)0x11C372C;
	static char* sMagicTypePotion = (char*)0x11C3714;
	static char* sMagicTypePower = (char*)0x11C3600;
	static char* sMagicTypeSpell = (char*)0x11C362C;
	static char* sMagicTypeWortcraft = (char*)0x11C3780;
	static char* sMagnitudeIsLevelText = (char*)0x11D2EA8;
	static char* sMagnitudeText = (char*)0x11D41F0;
	static char* sMain = (char*)0x11D2A34;
	static char* sMainMenu = (char*)0x11D2734;
	static char* sMaintainItem = (char*)0x11D3DD0;
	static char* sMakeActiveQuest = (char*)0x11D3F68;
	static char* sMakeDefaults = (char*)0x11D4DB4;
	static char* sMale = (char*)0x11D37F0;
	static char* sMapMarkerAdded = (char*)0x11D476C;
	static char* sMapMarkerNotFound = (char*)0x11D1D70;
	static char* sMasterVolume = (char*)0x11D2E90;
	static char* sMedicineSkill = (char*)0x11D23F8;
	static char* sMedium = (char*)0x11D2CE0;
	static char* sMenuDisplayAutosaveName = (char*)0x11D3ED8;
	static char* sMenuDisplayDayString = (char*)0x11D4628;
	static char* sMenuDisplayFailSaveSettings = (char*)0x11D313C;
	static char* sMenuDisplayLevelString = (char*)0x11D202C;
	static char* sMenuDisplayNewSave = (char*)0x11D3E00;
	static char* sMenuDisplayNoSaves = (char*)0x11D211C;
	static char* sMenuDisplayPlayTime = (char*)0x11D29A4;
	static char* sMenuDisplayQuicksaveName = (char*)0x11D3280;
	static char* sMenuDisplaySave = (char*)0x11D4064;
	static char* sMenuDisplayShortXBoxSaveMessage = (char*)0x11D4934;
	static char* sMenuDisplayUnknownLocationString = (char*)0x11D4FD0;
	static char* sMenuDisplayXBoxFailSaveSettings = (char*)0x11D2C2C;
	static char* sMenuDisplayXBoxSaveMessage = (char*)0x11D2230;
	static char* sMerchantNoGold = (char*)0x11D2DC4;
	static char* sMiscConstantEffect = (char*)0x11D38D4;
	static char* sMiscPlayerDeadLoadOption = (char*)0x11D4010;
	static char* sMiscPlayerDeadMenuOption = (char*)0x11D452C;
	static char* sMiscPlayerDeadMessage = (char*)0x11D4B44;
	static char* sMiscTabText = (char*)0x11D28A8;
	static char* sMiscUnknownEffect = (char*)0x11D3064;
	static char* sMissingImage = (char*)0x11D33F4;
	static char* sMissingName = (char*)0x11D35BC;
	static char* sModEffects = (char*)0x11D4028;
	static char* sMonthApril = (char*)0x11C7980;
	static char* sMonthAugust = (char*)0x11C795C;
	static char* sMonthDecember = (char*)0x11C78E4;
	static char* sMonthFebruary = (char*)0x11C7950;
	static char* sMonthJanuary = (char*)0x11C7A28;
	static char* sMonthJuly = (char*)0x11C79EC;
	static char* sMonthJune = (char*)0x11C7A34;
	static char* sMonthMarch = (char*)0x11C79A4;
	static char* sMonthMay = (char*)0x11C7974;
	static char* sMonthNovember = (char*)0x11C7908;
	static char* sMonthOctober = (char*)0x11C7890;
	static char* sMonthSeptember = (char*)0x11C7920;
	static char* sMouseSensitivity = (char*)0x11D25CC;
	static char* sMouth = (char*)0x11D4184;
	static char* sMouthChin = (char*)0x11D3F80;
	static char* sMouthLips = (char*)0x11D2A40;
	static char* sMouthdrawn = (char*)0x11D295C;
	static char* sMouthhappy = (char*)0x11D4004;
	static char* sMouthhigh = (char*)0x11D36DC;
	static char* sMouthlipsdeflated = (char*)0x11D3484;
	static char* sMouthlipslarge = (char*)0x11D2E3C;
	static char* sMouthlipspuckered = (char*)0x11D1FFC;
	static char* sMouthprotruding = (char*)0x11D3D64;
	static char* sMouthtilt = (char*)0x11D3274;
	static char* sMouthunderbite = (char*)0x11D3328;
	static char* sMoveMarker = (char*)0x11D4964;
	static char* sMoveMarkerQuestion = (char*)0x11D443C;
	static char* sMusicVolume = (char*)0x11D3058;
	static char* sMustRestart = (char*)0x11D4940;
	static char* sNPCModelBeast = (char*)0x11D2B3C;
	static char* sNPCModelMale = (char*)0x11D3E48;
	static char* sNPCOutOfMoneyText = (char*)0x11D31F0;
	static char* sName = (char*)0x11D4E38;
	static char* sNares = (char*)0x11D35EC;
	static char* sNasolabiallines = (char*)0x11D39E8;
	static char* sNavigate = (char*)0x11D27DC;
	static char* sNavigateText = (char*)0x11D2ECC;
	static char* sNetTotalText = (char*)0x11D24B8;
	static char* sNew = (char*)0x11D2170;
	static char* sNewGame = (char*)0x11D232C;
	static char* sNewSave = (char*)0x11D2C50;
	static char* sNext = (char*)0x11D34B4;
	static char* sNextChallenge = (char*)0x11D3214;
	static char* sNo = (char*)0x11D3688;
	static char* sNoCharge = (char*)0x11D304C;
	static char* sNoChildUse = (char*)0x11D4F88;
	static char* sNoDeviceSelected = (char*)0x11D2B18;
	static char* sNoEatQuestItem = (char*)0x11D3A00;
	static char* sNoFastTravelAlarm = (char*)0x11D4118;
	static char* sNoFastTravelCell = (char*)0x11D473C;
	static char* sNoFastTravelCombat = (char*)0x11D2848;
	static char* sNoFastTravelHostileActorsNear = (char*)0x11D3DDC;
	static char* sNoFastTravelInAir = (char*)0x11D4124;
	static char* sNoFastTravelOverencumbered = (char*)0x11D50CC;
	static char* sNoFastTravelUndiscovered = (char*)0x11D48EC;
	static char* sNoItemsToRepair = (char*)0x11D37D8;
	static char* sNoJumpWarning = (char*)0x11D43E8;
	static char* sNoLockPick = (char*)0x11D4910;
	static char* sNoLockPickIfCrimeAlert = (char*)0x11D3A24;
	static char* sNoMoreFollowers = (char*)0x11D3D58;
	static char* sNoProfileSelected = (char*)0x11D37A8;
	static char* sNoRace = (char*)0x11D2BC0;
	static char* sNoRepairHostileActorsNear = (char*)0x11D2D04;
	static char* sNoRepairInCombat = (char*)0x11D2DB8;
	static char* sNoRestart = (char*)0x11D43A0;
	static char* sNoSaves = (char*)0x11D39F4;
	static char* sNoSitOnOwnedFurniture = (char*)0x11D2044;
	static char* sNoSleepCombat = (char*)0x11D2A70;
	static char* sNoSleepInOwnedBed = (char*)0x11D289C;
	static char* sNoSleepInRadiation = (char*)0x11D2530;
	static char* sNoSleepTakingHealthDamage = (char*)0x11D1E10;
	static char* sNoSleepTrespass = (char*)0x11D4220;
	static char* sNoSpareParts = (char*)0x11D2158;
	static char* sNoText = (char*)0x11D06F8;
	static char* sNoWaitInAir = (char*)0x11D3E24;
	static char* sNoWaitInCell = (char*)0x11D20B0;
	static char* sNoWaitInCombat = (char*)0x11D2FEC;
	static char* sNoWaitInJail = (char*)0x11D3C8C;
	static char* sNoWaitInRadiation = (char*)0x11D4B14;
	static char* sNoWaitTakingHealthDamage = (char*)0x11D47D8;
	static char* sNoWaitTrespass = (char*)0x11D4478;
	static char* sNoWaitUnderWater = (char*)0x11D494C;
	static char* sNoWaitWhileAlarmSounding = (char*)0x11D28B4;
	static char* sNone = (char*)0x11D1F90;
	static char* sNormal = (char*)0x11D2FC8;
	static char* sNormalWeaponsResisted = (char*)0x11CFB54;
	static char* sNose = (char*)0x11D4D24;
	static char* sNoseTex = (char*)0x11D2644;
	static char* sNosebridgeshallow = (char*)0x11D214C;
	static char* sNosebridgeshort = (char*)0x11D27E8;
	static char* sNosedown = (char*)0x11D4AFC;
	static char* sNoseflat = (char*)0x11D3E18;
	static char* sNosenostrilssmall = (char*)0x11D3E6C;
	static char* sNosenostrilswide = (char*)0x11D4970;
	static char* sNosenostriltilt = (char*)0x11D22F0;
	static char* sNoseregion = (char*)0x11D2BA8;
	static char* sNoseselliondown = (char*)0x11D2DAC;
	static char* sNosesellionlower = (char*)0x11D27D0;
	static char* sNosesellionshallow = (char*)0x11D2DE8;
	static char* sNosesellionthin = (char*)0x11D4CA0;
	static char* sNoseshort = (char*)0x11D2DA0;
	static char* sNosetilt = (char*)0x11D2350;
	static char* sNotEnoughCaps = (char*)0x11D3028;
	static char* sNotEnoughRoomWarning = (char*)0x11D3D34;
	static char* sNotesToggle = (char*)0x11D2D1C;
	static char* sNoviceSkillLevelText = (char*)0x11CBE90;
	static char* sNumberAbbrev = (char*)0x11D3994;
	static char* sOKText = (char*)0x11D05FC;
	static char* sObjectFade = (char*)0x11D31B4;
	static char* sObjectInUse = (char*)0x11D4814;
	static char* sObjectLODFade = (char*)0x11D2BF0;
	static char* sOddtext = (char*)0x11D2D34;
	static char* sOff = (char*)0x11D2590;
	static char* sOfferRefused = (char*)0x11D39D0;
	static char* sOk = (char*)0x11D38BC;
	static char* sOldDownloadsAvailable = (char*)0x11D3AD8;
	static char* sOn = (char*)0x11D4DF0;
	static char* sOpenWithKey = (char*)0x11D5114;
	static char* sOpenedContainer = (char*)0x11D5120;
	static char* sOr = (char*)0x11D3250;
	static char* sOutOfLockpicks = (char*)0x11D34F0;
	static char* sPCControlsTextNone = (char*)0x11D37B4;
	static char* sPCControlsTriggerPrefix = (char*)0x11D4A0C;
	static char* sPCMenuHintA = (char*)0x11D506C;
	static char* sPCMenuHintE = (char*)0x11D2F20;
	static char* sPCMenuHintF = (char*)0x11D28C0;
	static char* sPCMenuHintQ = (char*)0x11D4A9C;
	static char* sPCMenuHintR = (char*)0x11D2C5C;
	static char* sPCMenuHintRMB = (char*)0x11D21D0;
	static char* sPCMenuHintS = (char*)0x11D40A0;
	static char* sPCMenuHintW = (char*)0x11D44B4;
	static char* sPCMenuHintX = (char*)0x11D4EA4;
	static char* sPMTime = (char*)0x11D27F4;
	static char* sPartCrippledByPlayerMessage = (char*)0x11D30B8;
	static char* sPauseText = (char*)0x11D1E40;
	static char* sPayoutListText = (char*)0x11D4058;
	static char* sPayoutText = (char*)0x11D3F50;
	static char* sPick = (char*)0x11D45A4;
	static char* sPickpocket = (char*)0x11D370C;
	static char* sPickpocketFail = (char*)0x11D3F98;
	static char* sPicksRemainingText = (char*)0x11D4364;
	static char* sPipboyColor = (char*)0x11D23C8;
	static char* sPlaceBetText = (char*)0x11D41E4;
	static char* sPlaceCardText = (char*)0x11D3370;
	static char* sPlaceMarker = (char*)0x11D3184;
	static char* sPlayAudio = (char*)0x11D45F8;
	static char* sPlayCaravanText = (char*)0x11D2788;
	static char* sPlayTime = (char*)0x11D3958;
	static char* sPlayer = (char*)0x11D2704;
	static char* sPlayerOutOfMoneyText = (char*)0x11D3EF0;
	static char* sPleaseStandBy = (char*)0x11D39C4;
	static char* sPlural = (char*)0x11D3118;
	static char* sPluralPlain = (char*)0x11D3D70;
	static char* sPoisonAlreadyPoisonedMessage = (char*)0x11D2818;
	static char* sPoisonBowConfirmMessage = (char*)0x11D247C;
	static char* sPoisonConfirmMessage = (char*)0x11D4E98;
	static char* sPressControl = (char*)0x11D4B20;
	static char* sPressStart = (char*)0x11D2EF0;
	static char* sPrevChallenge = (char*)0x11D4FA0;
	static char* sPrevious = (char*)0x11D446C;
	static char* sQuantity = (char*)0x11D2548;
	static char* sQuestAddedText = (char*)0x11D2830;
	static char* sQuestCompletedText = (char*)0x11D2380;
	static char* sQuestFailed = (char*)0x11D27C4;
	static char* sQuestUpdatedText = (char*)0x11D4508;
	static char* sQuestsTabText = (char*)0x11D5024;
	static char* sQuickLoading = (char*)0x11D35B0;
	static char* sQuickSaving = (char*)0x11D3604;
	static char* sQuicksaveAbbrev = (char*)0x11D4E20;
	static char* sQuit = (char*)0x11D42EC;
	static char* sQuitCaravanText = (char*)0x11D43B8;
	static char* sRSMAge = (char*)0x11D4088;
	static char* sRSMBlueAbbrev = (char*)0x11D2D4C;
	static char* sRSMCharacter = (char*)0x11D4550;
	static char* sRSMConfirmDone = (char*)0x11D410C;
	static char* sRSMConfirmRandomize = (char*)0x11D328C;
	static char* sRSMCustom = (char*)0x11D352C;
	static char* sRSMCustomize = (char*)0x11D36E8;
	static char* sRSMEyeColor = (char*)0x11D31CC;
	static char* sRSMEyeSockets = (char*)0x11D4178;
	static char* sRSMEyelids = (char*)0x11D244C;
	static char* sRSMFace = (char*)0x11D205C;
	static char* sRSMFacialHair = (char*)0x11D23A4;
	static char* sRSMGeneral = (char*)0x11D3EB4;
	static char* sRSMGreenAbbrev = (char*)0x11D25A8;
	static char* sRSMHair = (char*)0x11D43DC;
	static char* sRSMHairColor = (char*)0x11D4A78;
	static char* sRSMHairStyle = (char*)0x11D22D8;
	static char* sRSMMisc = (char*)0x11D4658;
	static char* sRSMPreset = (char*)0x11D3FF8;
	static char* sRSMRace = (char*)0x11D20E0;
	static char* sRSMRandomize = (char*)0x11D3D4C;
	static char* sRSMRedAbbrev = (char*)0x11D2A88;
	static char* sRSMSex = (char*)0x11D1F3C;
	static char* sRSMShapeOption01 = (char*)0x11D1ED0;
	static char* sRSMShapeOption02 = (char*)0x11D3508;
	static char* sRSMShapeOption03 = (char*)0x11D3844;
	static char* sRSMShapeOption04 = (char*)0x11D4B38;
	static char* sRSMShapeOption05 = (char*)0x11D2290;
	static char* sRSMShapeOption06 = (char*)0x11D35A4;
	static char* sRSMShapeOption07 = (char*)0x11D32E0;
	static char* sRSMShapeOption08 = (char*)0x11D322C;
	static char* sRSMShapeOption09 = (char*)0x11D46F4;
	static char* sRSMShapeOption10 = (char*)0x11D4718;
	static char* sRSMShapeOption11 = (char*)0x11D2410;
	static char* sRSMShapeOption12 = (char*)0x11D3154;
	static char* sRSMShapeOption13 = (char*)0x11D4E8C;
	static char* sRSMShapeOption14 = (char*)0x11D3A90;
	static char* sRSMShapeOption15 = (char*)0x11D2518;
	static char* sRSMShapeOption16 = (char*)0x11D4388;
	static char* sRSMShapeOption18 = (char*)0x11D43F4;
	static char* sRSMShapeOption19 = (char*)0x11D49F4;
	static char* sRSMShapeOption20 = (char*)0x11D2860;
	static char* sRSMShapeOption21 = (char*)0x11D20BC;
	static char* sRSMShapeOption22 = (char*)0x11D2CA4;
	static char* sRSMShapeOption27 = (char*)0x11D3724;
	static char* sRSMShapeOption30 = (char*)0x11D277C;
	static char* sRSMShapeOption32 = (char*)0x11D364C;
	static char* sRSMShapeOption33 = (char*)0x11D4BF8;
	static char* sRSMShapeOption35 = (char*)0x11D2854;
	static char* sRSMShapeOption36 = (char*)0x11D34A8;
	static char* sRSMShapeOption37 = (char*)0x11D422C;
	static char* sRSMShapeOption38 = (char*)0x11D3AB4;
	static char* sRSMShapeOption39 = (char*)0x11D500C;
	static char* sRSMShapeOption40 = (char*)0x11D22E4;
	static char* sRSMShapeOption41 = (char*)0x11D479C;
	static char* sRSMShapeOption42 = (char*)0x11D3664;
	static char* sRSMShapeOption43 = (char*)0x11D4280;
	static char* sRSMShapeOption45 = (char*)0x11D2E48;
	static char* sRSMShapeOption46 = (char*)0x11D2E00;
	static char* sRSMShapeOption47 = (char*)0x11D36F4;
	static char* sRSMShapeOption48 = (char*)0x11D4904;
	static char* sRSMShapeOption50 = (char*)0x11D23EC;
	static char* sRSMShapeOption51 = (char*)0x11D4F28;
	static char* sRSMShapeOption53 = (char*)0x11D5048;
	static char* sRSMShapeOption54 = (char*)0x11D32A4;
	static char* sRSMShapeOption55 = (char*)0x11D3130;
	static char* sRSMToneOption01 = (char*)0x11D5108;
	static char* sRSMToneOption02 = (char*)0x11D26EC;
	static char* sRSMToneOption03 = (char*)0x11D4F94;
	static char* sRSMToneOption04 = (char*)0x11D1F24;
	static char* sRSMToneOption05 = (char*)0x11D4C58;
	static char* sRSMToneOption06 = (char*)0x11D3B84;
	static char* sRSMToneOption07 = (char*)0x11D2680;
	static char* sRSMToneOption08 = (char*)0x11D3C80;
	static char* sRSMToneOption09 = (char*)0x11D3A84;
	static char* sRSMToneOption10 = (char*)0x11D4370;
	static char* sRSMToneOption11 = (char*)0x11D49DC;
	static char* sRSMToneOption12 = (char*)0x11D280C;
	static char* sRSMToneOption13 = (char*)0x11D2080;
	static char* sRSMToneOption14 = (char*)0x11D1E58;
	static char* sRSMToneOption15 = (char*)0x11D42A4;
	static char* sRSMToneOption16 = (char*)0x11D2CB0;
	static char* sRSMToneOption17 = (char*)0x11D4454;
	static char* sRSMToneOption18 = (char*)0x11D1EB8;
	static char* sRSMToneOption19 = (char*)0x11D3A48;
	static char* sRSMToneOption20 = (char*)0x11D2A58;
	static char* sRSMToneOption21 = (char*)0x11D4DFC;
	static char* sRSMToneOption22 = (char*)0x11D4B68;
	static char* sRSMToneOption23 = (char*)0x11D4B74;
	static char* sRSMToneOption24 = (char*)0x11D33E8;
	static char* sRSMToneOption25 = (char*)0x11D292C;
	static char* sRSMToneOption26 = (char*)0x11D509C;
	static char* sRace = (char*)0x11D4868;
	static char* sRaceDescription = (char*)0x11D3E60;
	static char* sRadiationDecrease = (char*)0x11D40AC;
	static char* sRadiationIncrease = (char*)0x11D3388;
	static char* sRadiationNotSick = (char*)0x11D29B0;
	static char* sRadiationSick = (char*)0x11D3EC0;
	static char* sRadioSignalLost = (char*)0x11D25FC;
	static char* sRadioStationDiscovered = (char*)0x11D434C;
	static char* sRadioVolume = (char*)0x11D1DC4;
	static char* sRadioWaveformFileFormat = (char*)0x11D5060;
	static char* sRadsPerSecond = (char*)0x11D21DC;
	static char* sRagdollDataDefault = (char*)0x11D14C8;
	static char* sRaiseText = (char*)0x11D2038;
	static char* sRandom = (char*)0x11D23D4;
	static char* sRandomDoorTeleportFailureMessage = (char*)0x11C9388;
	static char* sRangeText = (char*)0x11D334C;
	static char* sRanksText = (char*)0x11D40E8;
	static char* sRecipes = (char*)0x11D208C;
	static char* sRed = (char*)0x11D2374;
	static char* sRedText = (char*)0x11D1DF4;
	static char* sRedeemCode = (char*)0x11D4094;
	static char* sRemaining = (char*)0x11D3964;
	static char* sRemoteActivation = (char*)0x11D2BFC;
	static char* sRemoveBetText = (char*)0x11D2C20;
	static char* sRemoveItemfromInventory = (char*)0x11D3DB8;
	static char* sRemoveMarker = (char*)0x11D33AC;
	static char* sRemoveText = (char*)0x11D3550;
	static char* sRepChangeNegSound = (char*)0x11CBA34;
	static char* sRepChangePosSound = (char*)0x11CBCB4;
	static char* sRepNegativeGainIcon = (char*)0x11CBAD4;
	static char* sRepNegativeLossIcon = (char*)0x11CBA04;
	static char* sRepPositiveGainIcon = (char*)0x11CBD60;
	static char* sRepPositiveLossIcon = (char*)0x11CBC38;
	static char* sRepTitlePosNoneNegNone = (char*)0x11CBCE8;
	static char* sRepTitlePosNoneNegNoneDesc = (char*)0x11CBD98;
	static char* sRepTitlePosNoneNegNoneIcon = (char*)0x11CBC00;
	static char* sRepTitlePosNoneNegOne = (char*)0x11CBD78;
	static char* sRepTitlePosNoneNegOneDesc = (char*)0x11CBBE8;
	static char* sRepTitlePosNoneNegOneIcon = (char*)0x11CBCF4;
	static char* sRepTitlePosNoneNegThree = (char*)0x11CBD00;
	static char* sRepTitlePosNoneNegThreeDesc = (char*)0x11CBC20;
	static char* sRepTitlePosNoneNegThreeIcon = (char*)0x11CBB44;
	static char* sRepTitlePosNoneNegTwo = (char*)0x11CBC44;
	static char* sRepTitlePosNoneNegTwoDesc = (char*)0x11CBB68;
	static char* sRepTitlePosNoneNegTwoIcon = (char*)0x11CBB84;
	static char* sRepTitlePosOneNegNone = (char*)0x11CBD2C;
	static char* sRepTitlePosOneNegNoneDesc = (char*)0x11CBBA8;
	static char* sRepTitlePosOneNegNoneIcon = (char*)0x11CBBD0;
	static char* sRepTitlePosOneNegOne = (char*)0x11CBBF4;
	static char* sRepTitlePosOneNegOneDesc = (char*)0x11CBCD8;
	static char* sRepTitlePosOneNegOneIcon = (char*)0x11CBA50;
	static char* sRepTitlePosOneNegThree = (char*)0x11CBD88;
	static char* sRepTitlePosOneNegThreeDesc = (char*)0x11CBAE4;
	static char* sRepTitlePosOneNegThreeIcon = (char*)0x11CBAA4;
	static char* sRepTitlePosOneNegTwo = (char*)0x11CBA8C;
	static char* sRepTitlePosOneNegTwoDesc = (char*)0x11CBC2C;
	static char* sRepTitlePosOneNegTwoIcon = (char*)0x11CBA1C;
	static char* sRepTitlePosThreeNegNone = (char*)0x11CBC0C;
	static char* sRepTitlePosThreeNegNoneDesc = (char*)0x11CBA44;
	static char* sRepTitlePosThreeNegNoneIcon = (char*)0x11CBD48;
	static char* sRepTitlePosThreeNegOne = (char*)0x11CBB30;
	static char* sRepTitlePosThreeNegOneDesc = (char*)0x11CBC80;
	static char* sRepTitlePosThreeNegOneIcon = (char*)0x11CBB90;
	static char* sRepTitlePosThreeNegThree = (char*)0x11CBA10;
	static char* sRepTitlePosThreeNegThreeDesc = (char*)0x11CBCA4;
	static char* sRepTitlePosThreeNegThreeIcon = (char*)0x11CBD3C;
	static char* sRepTitlePosThreeNegTwo = (char*)0x11CBBDC;
	static char* sRepTitlePosThreeNegTwoDesc = (char*)0x11CBBC0;
	static char* sRepTitlePosThreeNegTwoIcon = (char*)0x11CBD0C;
	static char* sRepTitlePosTwoNegNone = (char*)0x11CBBB4;
	static char* sRepTitlePosTwoNegNoneDesc = (char*)0x11CBC98;
	static char* sRepTitlePosTwoNegNoneIcon = (char*)0x11CBAF0;
	static char* sRepTitlePosTwoNegOne = (char*)0x11CBC64;
	static char* sRepTitlePosTwoNegOneDesc = (char*)0x11CBD1C;
	static char* sRepTitlePosTwoNegOneIcon = (char*)0x11CBB50;
	static char* sRepTitlePosTwoNegThree = (char*)0x11CBB08;
	static char* sRepTitlePosTwoNegThreeIcon = (char*)0x11CBA68;
	static char* sRepTitlePosTwoNegTwo = (char*)0x11CBB5C;
	static char* sRepTitlePosTwoNegTwoDesc = (char*)0x11CBB14;
	static char* sRepTitlePosTwoNegTwoIcon = (char*)0x11CBAB4;
	static char* sRepair = (char*)0x11D49AC;
	static char* sRepairAllItems = (char*)0x11D4784;
	static char* sRepairCost = (char*)0x11D3CF8;
	static char* sRepairItem = (char*)0x11D1F30;
	static char* sRepairServicesTitle = (char*)0x11D32BC;
	static char* sRepairSkill = (char*)0x11D4034;
	static char* sRepairSkillTooLow = (char*)0x11D2B24;
	static char* sReputationButton = (char*)0x11D4148;
	static char* sRequirementsText = (char*)0x11D467C;
	static char* sReset = (char*)0x11D33DC;
	static char* sResetToDefaults = (char*)0x11D29E0;
	static char* sResolution = (char*)0x11D20EC;
	static char* sRestartSignedOut = (char*)0x11D2320;
	static char* sRestartToUseNewContent = (char*)0x11D3D04;
	static char* sRestartToUseProfileContent = (char*)0x11D2068;
	static char* sRetryText = (char*)0x11D01DC;
	static char* sReturn = (char*)0x11D21C4;
	static char* sRewardXP = (char*)0x11D38EC;
	static char* sRewardXPIcon = (char*)0x11D20F8;
	static char* sRightArmDamagedByPlayerIcon = (char*)0x11D4A6C;
	static char* sRightArmDamagedMessage = (char*)0x11D4C40;
	static char* sRightLegDamagedByPlayerIcon = (char*)0x11D3CC8;
	static char* sRightLegDamagedMessage = (char*)0x11D3D28;
	static char* sRouletteAntiCheatText = (char*)0x11D2D28;
	static char* sRumble = (char*)0x11D3754;
	static char* sSave = (char*)0x11D3B90;
	static char* sSaveFailed = (char*)0x11D4F10;
	static char* sSaveGame = (char*)0x11D2674;
	static char* sSaveGameContentIsMissing = (char*)0x11D2104;
	static char* sSaveGameCorrupt = (char*)0x11D46E8;
	static char* sSaveGameCorruptMenuMessage = (char*)0x11D1F18;
	static char* sSaveGameDeviceError = (char*)0x11D2BB4;
	static char* sSaveGameIsCorrupt = (char*)0x11D35F8;
	static char* sSaveGameNoLongerAvailable = (char*)0x11D3778;
	static char* sSaveGameNoMasterFilesFound = (char*)0x11D30D0;
	static char* sSaveGameOutOfDiskSpace = (char*)0x11D49E8;
	static char* sSaveGameXboxContentIsMissing = (char*)0x11D2E9C;
	static char* sSaveNotAvailable = (char*)0x11D48B0;
	static char* sSaveOnRest = (char*)0x11D4A24;
	static char* sSaveOnTravel = (char*)0x11D3A54;
	static char* sSaveOnWait = (char*)0x11D3BF0;
	static char* sSaveOverSaveGame = (char*)0x11D4598;
	static char* sSaveSuccessful = (char*)0x11D33C4;
	static char* sSavesRemaining = (char*)0x11D25D8;
	static char* sScrollEquipped = (char*)0x11D2578;
	static char* sSearch = (char*)0x11D38E0;
	static char* sSeasonFall = (char*)0x11C798C;
	static char* sSeasonSpring = (char*)0x11C7A10;
	static char* sSeasonSummer = (char*)0x11C7A04;
	static char* sSeasonWinter = (char*)0x11C7968;
	static char* sSecondDozenText = (char*)0x11D2650;
	static char* sSelect = (char*)0x11D3ECC;
	static char* sSelectCardText = (char*)0x11D4208;
	static char* sSelectItemToRepair = (char*)0x11D2710;
	static char* sSelfRange = (char*)0x11D3340;
	static char* sSell = (char*)0x11D346C;
	static char* sServeTimeQuestion = (char*)0x11D3628;
	static char* sSetMarkerQuestion = (char*)0x11D3A30;
	static char* sSettings = (char*)0x11D1FE4;
	static char* sSexFemale = (char*)0x11D43D0;
	static char* sSexFemalePossessive = (char*)0x11D401C;
	static char* sSexFemalePronoun = (char*)0x11D4C94;
	static char* sSexMale = (char*)0x11D1FC0;
	static char* sSexMalePossessive = (char*)0x11D4D90;
	static char* sSexMalePronoun = (char*)0x11D49A0;
	static char* sShadowFade = (char*)0x11D2614;
	static char* sShape = (char*)0x11D26D4;
	static char* sShowActiveNotes = (char*)0x11D379C;
	static char* sShowAllNotes = (char*)0x11D27AC;
	static char* sShowLocation = (char*)0x11D4D00;
	static char* sSkillDecreased = (char*)0x11D34C0;
	static char* sSkillIncreased = (char*)0x11D3874;
	static char* sSkillIncreasedNum = (char*)0x11D49C4;
	static char* sSkillLevelApprentice = (char*)0x11D67D4;
	static char* sSkillLevelExpert = (char*)0x11D6834;
	static char* sSkillLevelJourneyman = (char*)0x11D67E0;
	static char* sSkillLevelMaster = (char*)0x11D6810;
	static char* sSkillLevelNovice = (char*)0x11D6828;
	static char* sSkillRequirement = (char*)0x11D2B0C;
	static char* sSkillsCount = (char*)0x11D388C;
	static char* sSkillsTitle = (char*)0x11D413C;
	static char* sSkin = (char*)0x11D3490;
	static char* sSkinflushed = (char*)0x11D3B48;
	static char* sSkinshade = (char*)0x11D2DF4;
	static char* sSkintintorange = (char*)0x11D2C74;
	static char* sSkintintpurple = (char*)0x11D47B4;
	static char* sSleep = (char*)0x11D394C;
	static char* sSlotAntiCheatText = (char*)0x11D2AC4;
	static char* sSlotPressAnyButtonText = (char*)0x11D3880;
	static char* sSmall = (char*)0x11D2434;
	static char* sSneakAttackCriticalStrike = (char*)0x11D3244;
	static char* sSneakAttackCriticalStrikeIcon = (char*)0x11D4418;
	static char* sSneakCaution = (char*)0x11D4808;
	static char* sSneakDanger = (char*)0x11D4EBC;
	static char* sSneakDetected = (char*)0x11D2494;
	static char* sSneakHidden = (char*)0x11D27B8;
	static char* sSortMethod = (char*)0x11D2CF8;
	static char* sSpace = (char*)0x11D31E4;
	static char* sSpecNameCombat = (char*)0x11CBE64;
	static char* sSpecNameMagic = (char*)0x11CBE70;
	static char* sSpecNameStealth = (char*)0x11CBEA0;
	static char* sSpecularityFade = (char*)0x11D2488;
	static char* sSpeechChallengeFailure = (char*)0x11D2800;
	static char* sSpeechChallengeSuccess = (char*)0x11D3FEC;
	static char* sSpinText = (char*)0x11D2FD4;
	static char* sSplitText = (char*)0x11D4238;
	static char* sStartANewGame = (char*)0x11D4160;
	static char* sStartNewGame = (char*)0x11D4724;
	static char* sStats = (char*)0x11D3FE0;
	static char* sStatsAP = (char*)0x11D44A8;
	static char* sStatsAddicted = (char*)0x11D3BB4;
	static char* sStatsAlcohol = (char*)0x11D1EF4;
	static char* sStatsBody = (char*)0x11D470C;
	static char* sStatsCNDAbbrev = (char*)0x11D48D4;
	static char* sStatsCondition = (char*)0x11D229C;
	static char* sStatsCrippled = (char*)0x11D2E84;
	static char* sStatsEFFAbbrev = (char*)0x11D41C0;
	static char* sStatsEffects = (char*)0x11D376C;
	static char* sStatsFODAbbrev = (char*)0x11D37CC;
	static char* sStatsGeneral = (char*)0x11D4EF8;
	static char* sStatsHP = (char*)0x11D50B4;
	static char* sStatsLMBAbbrev = (char*)0x11D4D78;
	static char* sStatsLVLAbbrev = (char*)0x11D1F60;
	static char* sStatsLimbs = (char*)0x11D265C;
	static char* sStatsNoEffects = (char*)0x11D2EC0;
	static char* sStatsPerks = (char*)0x11D4BD4;
	static char* sStatsRADAbbrev = (char*)0x11D3E78;
	static char* sStatsRadResist = (char*)0x11D47F0;
	static char* sStatsRadiation = (char*)0x11D2B90;
	static char* sStatsSLPAbbrev = (char*)0x11D2470;
	static char* sStatsSkills = (char*)0x11D3B0C;
	static char* sStatsSpecial = (char*)0x11D2998;
	static char* sStatsStatus = (char*)0x11D2F8C;
	static char* sStatsXP = (char*)0x11D3BD8;
	static char* sStatsXPMax = (char*)0x11D4730;
	static char* sStayText = (char*)0x11D3100;
	static char* sSteal = (char*)0x11D4F4C;
	static char* sStealHorse = (char*)0x11D2014;
	static char* sStimpak = (char*)0x11D256C;
	static char* sStopAudio = (char*)0x11D2F14;
	static char* sStyle = (char*)0x11D4448;
	static char* sSuccessfulSneakAttackEnd = (char*)0x11D3700;
	static char* sSuccessfulSneakAttackMain = (char*)0x11D4CAC;
	static char* sSurgery = (char*)0x11D2188;
	static char* sSurrenderText = (char*)0x11D25F0;
	static char* sSwitchHandsText = (char*)0x11D4E2C;
	static char* sSwitchLimbs = (char*)0x11D3838;
	static char* sSystemSaveAbbrev = (char*)0x11D4E08;
	static char* sTakeAll = (char*)0x11D2D10;
	static char* sTargetRange = (char*)0x11D397C;
	static char* sTeammateOverencumbered = (char*)0x11D262C;
	static char* sTerminalLocked = (char*)0x11C8384;
	static char* sTerminalServerText1 = (char*)0x11C83A4;
	static char* sTerminalServerText2 = (char*)0x11C82F4;
	static char* sTerminalServerText3 = (char*)0x11C8338;
	static char* sTerminalServerText4 = (char*)0x11C83BC;
	static char* sTerminalServerText5 = (char*)0x11C8358;
	static char* sTerminalServerText6 = (char*)0x11C82E8;
	static char* sTerminalServerText7 = (char*)0x11C8304;
	static char* sTerminalServerText8 = (char*)0x11C834C;
	static char* sTerminalServerText9 = (char*)0x11C8324;
	static char* sTextNote = (char*)0x11D4838;
	static char* sTextureSize = (char*)0x11D21F4;
	static char* sThirdDozenText = (char*)0x11D2DD0;
	static char* sTo = (char*)0x11D373C;
	static char* sTone = (char*)0x11D2254;
	static char* sTotalBetText = (char*)0x11D316C;
	static char* sTotalCardsText = (char*)0x11D2F74;
	static char* sTotalFundsText = (char*)0x11D4958;
	static char* sTouchRange = (char*)0x11D286C;
	static char* sTraitMenuCounter = (char*)0x11D2C14;
	static char* sTraitMenuCounterSingular = (char*)0x11D455C;
	static char* sTraitMenuTitleTextSingular = (char*)0x11D3520;
	static char* sTraitsCount = (char*)0x11D3E84;
	static char* sTraitsTitle = (char*)0x11D1EC4;
	static char* sTransact = (char*)0x11D4820;
	static char* sTravel = (char*)0x11D1DAC;
	static char* sTravelQuestion = (char*)0x11D4A3C;
	static char* sTreeLODFade = (char*)0x11D2B00;
	static char* sTrueIronSights = (char*)0x11D3EFC;
	static char* sTune = (char*)0x11D3418;
	static char* sTwoToOneText = (char*)0x11D32F8;
	static char* sUnequipItemOnPlayer = (char*)0x11D4250;
	static char* sUnluckyLoseText = (char*)0x11D25E4;
	static char* sVATSMessageLowAP = (char*)0x11D1D94;
	static char* sVATSMessageNoAmmo = (char*)0x11D28CC;
	static char* sVATSMessageZeroChance = (char*)0x11D3898;
	static char* sVDSGManual = (char*)0x11D2344;
	static char* sVDSGPlate = (char*)0x11D3004;
	static char* sValue = (char*)0x11D2794;
	static char* sVampireFeed = (char*)0x11D5018;
	static char* sVampireFeedQuestion = (char*)0x11D2ED8;
	static char* sVampireTalk = (char*)0x11D3FBC;
	static char* sVatsAimed = (char*)0x11D3F44;
	static char* sVatsAiming = (char*)0x11D3D1C;
	static char* sVatsBodyPart = (char*)0x11D2B78;
	static char* sVatsSelect = (char*)0x11D5084;
	static char* sVatsTarget = (char*)0x11D4D3C;
	static char* sVatsUnarmedAttack1 = (char*)0x11D46C4;
	static char* sVatsUnarmedAttack2 = (char*)0x11D46DC;
	static char* sVatsUnarmedAttackGround = (char*)0x11D2758;
	static char* sVersionNumber = (char*)0x11D21B8;
	static char* sVideo = (char*)0x11D3790;
	static char* sVideoChange = (char*)0x11D3784;
	static char* sViewDistance = (char*)0x11D31A8;
	static char* sVoiceVolume = (char*)0x11D24E8;
	static char* sWait = (char*)0x11D23B0;
	static char* sWeaponBreak = (char*)0x11D2920;
	static char* sWeaponLowCond = (char*)0x11D45C8;
	static char* sWeight = (char*)0x11D2908;
	static char* sWhite = (char*)0x11D2128;
	static char* sWinLossText = (char*)0x11D41FC;
	static char* sWorldMapTabText = (char*)0x11D2050;
	static char* sXBoxLoadNoDeviceMessage = (char*)0x11D3D10;
	static char* sXPProgressMarker = (char*)0x11D3394;
	static char* sXSensitivity = (char*)0x11D41D8;
	static char* sYSensitivity = (char*)0x11D2F5C;
	static char* sYes = (char*)0x11D34FC;
	static char* sYesRestart = (char*)0x11D2F50;
	static char* sYesText = (char*)0x11D0CB8;
	static char* sYesToAllText = (char*)0x11D12B8;
	static char* sYouBreakEvenText = (char*)0x11D3F8C;
	static char* sYouLose = (char*)0x11D3478;
	static char* sYouWin = (char*)0x11D2FF8;
	static char* sYour = (char*)0x11D2CEC;
	static float* fAIAcquireObjectDistance = (float*)0x11CDEC0;
	static float* fAIAwareofPlayerTimer = (float*)0x11CD214;
	static float* fAIBestHeadTrackDistance = (float*)0x11CD118;
	static float* fAICombatFleeScoreThreshold = (float*)0x11CF054;
	static float* fAICombatNoAreaEffectAllyDistance = (float*)0x11CFCE4;
	static float* fAICombatNoTargetLOSPriorityMult = (float*)0x11CF734;
	static float* fAICombatSlopeDifference = (float*)0x11CE4A4;
	static float* fAICombatTargetUnreachablePriorityMult = (float*)0x11CE1B0;
	static float* fAICombatUnreachableTargetPriorityMult = (float*)0x11CEDE0;
	static float* fAIConversationExploreTime = (float*)0x11CD96C;
	static float* fAIDefaultSpeechMult = (float*)0x11CD0C0;
	static float* fAIDodgeDecisionBase = (float*)0x11CF8FC;
	static float* fAIDodgeFavorLeftRightMult = (float*)0x11CF28C;
	static float* fAIDodgeVerticalRangedAttackMult = (float*)0x11CF55C;
	static float* fAIDodgeWalkChance = (float*)0x11CE384;
	static float* fAIEnergyLevelBase = (float*)0x11CD554;
	static float* fAIEngergyLevelMult = (float*)0x11CD7F4;
	static float* fAIEscortHysteresisWidth = (float*)0x11CD1CC;
	static float* fAIEscortWaitDistanceExterior = (float*)0x11CD830;
	static float* fAIEscortWaitDistanceInterior = (float*)0x11CDBB0;
	static float* fAIExplosiveWeaponDamageMult = (float*)0x11CE898;
	static float* fAIExplosiveWeaponRangeMult = (float*)0x11CF5EC;
	static float* fAIExteriorSpectatorDetection = (float*)0x11CDFE8;
	static float* fAIExteriorSpectatorDistance = (float*)0x11CD994;
	static float* fAIFaceTargetAnimationAngle = (float*)0x11CE180;
	static float* fAIFindBedChairsDistance = (float*)0x11CD250;
	static float* fAIFleeConfBase = (float*)0x11CF1F0;
	static float* fAIFleeConfMult = (float*)0x11CF8E4;
	static float* fAIFleeHealthMult = (float*)0x11CF5C8;
	static float* fAIFleeSuccessTimeout = (float*)0x11CEAF4;
	static float* fAIFurnitureDestinationRadius = (float*)0x11CDD10;
	static float* fAIGreetingTimer = (float*)0x11CD454;
	static float* fAIHoldDefaultHeadTrackTimer = (float*)0x11CDBBC;
	static float* fAIIdleAnimationDistance = (float*)0x11CD678;
	static float* fAIIdleWaitTime = (float*)0x11CDD34;
	static float* fAIInteriorHeadTrackMult = (float*)0x11CD924;
	static float* fAIInteriorSpectatorDetection = (float*)0x11CDDBC;
	static float* fAIInteriorSpectatorDistance = (float*)0x11CD818;
	static float* fAIMagicSpellMult = (float*)0x11CEB18;
	static float* fAIMagicTimer = (float*)0x11CF4A8;
	static float* fAIMaxHeadTrackDistance = (float*)0x11CD93C;
	static float* fAIMaxHeadTrackDistanceFromPC = (float*)0x11CD2F8;
	static float* fAIMaxSmileDistance = (float*)0x11CD754;
	static float* fAIMaxWanderTime = (float*)0x11CDB10;
	static float* fAIMeleeArmorMult = (float*)0x11CE2A0;
	static float* fAIMeleeHandMult = (float*)0x11CEC74;
	static float* fAIMeleeWeaponMult = (float*)0x11CE44C;
	static float* fAIMinGreetingDistance = (float*)0x11CD418;
	static float* fAIMoveDistanceToRecalcFollowPath = (float*)0x11CD954;
	static float* fAIPowerAttackCreatureChance = (float*)0x11CF868;
	static float* fAIPowerAttackFatigueBase = (float*)0x11CFC48;
	static float* fAIPowerAttackFatigueMult = (float*)0x11CF078;
	static float* fAIPowerAttackKnockdownBonus = (float*)0x11CF568;
	static float* fAIPowerAttackNPCChance = (float*)0x11CF0F4;
	static float* fAIPowerAttackRecoilBonus = (float*)0x11CEDA4;
	static float* fAIPursueDistanceLineOfSight = (float*)0x11CD5D8;
	static float* fAIRadiusToRunDetectionExterior = (float*)0x11CD578;
	static float* fAIRadiusToRunDetectionInterior = (float*)0x11CDE84;
	static float* fAIRangMagicSpellMult = (float*)0x11CF4D8;
	static float* fAIRangedWeaponMult = (float*)0x11CF348;
	static float* fAISocialRadiusToTriggerConversation = (float*)0x11CD930;
	static float* fAISocialRadiusToTriggerConversationInterior = (float*)0x11CD760;
	static float* fAISocialTimerForConversationsMax = (float*)0x11CD03C;
	static float* fAISocialTimerForConversationsMin = (float*)0x11CD32C;
	static float* fAISocialchanceForConversation = (float*)0x11CDC08;
	static float* fAISocialchanceForConversationInterior = (float*)0x11CD030;
	static float* fAISpectatorCommentTimer = (float*)0x11CCFF4;
	static float* fAISpectatorRememberThreatTimer = (float*)0x11CD268;
	static float* fAITrespassWarningTimer = (float*)0x11CD2C8;
	static float* fAIUpdateMovementRestrictionsDistance = (float*)0x11CF96C;
	static float* fAIUseWeaponDistance = (float*)0x11CDD40;
	static float* fAItalktoNPCtimer = (float*)0x11CDBE4;
	static float* fAItalktosameNPCtimer = (float*)0x11CDCDC;
	static float* fAVDActionPointsBase = (float*)0x11CD5A8;
	static float* fAVDActionPointsMult = (float*)0x11CD7C0;
	static float* fAVDCarryWeightMult = (float*)0x11CDD04;
	static float* fAVDCarryWeightsBase = (float*)0x11CDE0C;
	static float* fAVDCritLuckBase = (float*)0x11CDEE4;
	static float* fAVDCritLuckMult = (float*)0x11CDB4C;
	static float* fAVDDefaultBodyPartCondition = (float*)0x11CDA74;
	static float* fAVDFatigueBase = (float*)0x11CD63C;
	static float* fAVDFatigueEnduranceMult = (float*)0x11CD7B4;
	static float* fAVDFatigueLevelMult = (float*)0x11CDAE0;
	static float* fAVDHealRateEndurance10Bonus = (float*)0x11CDD58;
	static float* fAVDHealRateEndurance6Bonus = (float*)0x11CD4DC;
	static float* fAVDHealRateEndurance7Bonus = (float*)0x11CD364;
	static float* fAVDHealRateEndurance8Bonus = (float*)0x11CDA14;
	static float* fAVDHealRateEndurance9Bonus = (float*)0x11CD6E8;
	static float* fAVDHealthEnduranceMult = (float*)0x11CD274;
	static float* fAVDHealthEnduranceOffset = (float*)0x11CD124;
	static float* fAVDHealthLevelMult = (float*)0x11CDEA8;
	static float* fAVDMeleeDamageStrengthMult = (float*)0x11CD130;
	static float* fAVDMeleeDamageStrengthOffset = (float*)0x11CD8A0;
	static float* fAVDNPCFatigueBase = (float*)0x11CD978;
	static float* fAVDNPCFatigueEnduranceMult = (float*)0x11CE01C;
	static float* fAVDNPCFatigueLevelMult = (float*)0x11CDB58;
	static float* fAVDNPCHealthEnduranceMult = (float*)0x11CD548;
	static float* fAVDNPCHealthEnduranceOffset = (float*)0x11CD280;
	static float* fAVDNPCHealthLevelMult = (float*)0x11CD90C;
	static float* fAVDPoisonResistEnduranceMult = (float*)0x11CDF48;
	static float* fAVDPoisonResistEnduranceOffset = (float*)0x11CDF7C;
	static float* fAVDRadResistEnduranceMult = (float*)0x11CDCEC;
	static float* fAVDRadResistEnduranceOffset = (float*)0x11CDE54;
	static float* fAVDSkillBarterBase = (float*)0x11CDB28;
	static float* fAVDSkillBigGunsBase = (float*)0x11CDCF8;
	static float* fAVDSkillEnergyWeaponsBase = (float*)0x11CD478;
	static float* fAVDSkillExplosivesBase = (float*)0x11CDE6C;
	static float* fAVDSkillLockpickBase = (float*)0x11CD048;
	static float* fAVDSkillLuckBonusMult = (float*)0x11CDD88;
	static float* fAVDSkillMedicineBase = (float*)0x11CD9E0;
	static float* fAVDSkillMeleeWeaponsBase = (float*)0x11CD4E8;
	static float* fAVDSkillPrimaryBonusMult = (float*)0x11CDB34;
	static float* fAVDSkillRepairBase = (float*)0x11CD5C0;
	static float* fAVDSkillScienceBase = (float*)0x11CDF20;
	static float* fAVDSkillSmallGunsBase = (float*)0x11CD0E8;
	static float* fAVDSkillSneakBase = (float*)0x11CD824;
	static float* fAVDSkillSpeechBase = (float*)0x11CCFB4;
	static float* fAVDSkillSurvivalBase = (float*)0x11CDAEC;
	static float* fAVDSkillUnarmedBase = (float*)0x11CD5E4;
	static float* fAVDTagSkillBonus = (float*)0x11CCF60;
	static float* fAVDUnarmedDamageBase = (float*)0x11CD3AC;
	static float* fAVDUnarmedDamageMult = (float*)0x11CDAB0;
	static float* fAbsorbBoltGrowWidth = (float*)0x11D1684;
	static float* fAbsorbBoltSmallWidth = (float*)0x11D1AB8;
	static float* fAbsorbBoltsRadius = (float*)0x11D1714;
	static float* fAbsorbBoltsRadiusStrength = (float*)0x11D1C8C;
	static float* fAbsorbCoreColorB = (float*)0x11D18B8;
	static float* fAbsorbCoreColorG = (float*)0x11D1574;
	static float* fAbsorbCoreColorR = (float*)0x11D1C98;
	static float* fAbsorbGlowColorB = (float*)0x11D181C;
	static float* fAbsorbGlowColorG = (float*)0x11D1834;
	static float* fAbsorbGlowColorR = (float*)0x11D16A8;
	static float* fAbsorbMoveSpeed = (float*)0x11D1C14;
	static float* fAbsorbSegmentLength = (float*)0x11D1AF4;
	static float* fAbsorbSegmentVariance = (float*)0x11D1D40;
	static float* fAbsorbTortuosityVariance = (float*)0x11D1AC4;
	static float* fActionPointsAimAdjustment = (float*)0x11D60BC;
	static float* fActionPointsAttackGrenade = (float*)0x11D6028;
	static float* fActionPointsAttackHandle = (float*)0x11D5F80;
	static float* fActionPointsAttackLauncher = (float*)0x11D5F40;
	static float* fActionPointsAttackMine = (float*)0x11D6034;
	static float* fActionPointsAttackOneHandMelee = (float*)0x11D606C;
	static float* fActionPointsAttackPistol = (float*)0x11D5EF4;
	static float* fActionPointsAttackRifle = (float*)0x11D609C;
	static float* fActionPointsAttackThrown = (float*)0x11D5EC8;
	static float* fActionPointsAttackTwoHandMelee = (float*)0x11D5FDC;
	static float* fActionPointsAttackUnarmed = (float*)0x11D5ED8;
	static float* fActionPointsCrouch = (float*)0x11D5F0C;
	static float* fActionPointsFOVBase = (float*)0x11D6078;
	static float* fActionPointsFOVMult = (float*)0x11D5F00;
	static float* fActionPointsHeal = (float*)0x11D6044;
	static float* fActionPointsPowerAttackMult = (float*)0x11D5FA8;
	static float* fActionPointsReload = (float*)0x11D5F68;
	static float* fActionPointsRestoreRate = (float*)0x11D5FF8;
	static float* fActionPointsRunAndGunMult = (float*)0x11D5F8C;
	static float* fActionPointsStand = (float*)0x11D5F4C;
	static float* fActionPointsSustainedFireMult = (float*)0x11D5F5C;
	static float* fActionPointsSwitchWeapon = (float*)0x11D5F34;
	static float* fActionPointsToggleWeaponDrawn = (float*)0x11D5F98;
	static float* fActionPointsVATSMeleeMult = (float*)0x11D5FEC;
	static float* fActiveEffectConditionUpdateInterval = (float*)0x11D17E0;
	static float* fActorAlertSoundTimer = (float*)0x11CD8DC;
	static float* fActorAnimZAdjust = (float*)0x11D041C;
	static float* fActorArmorDesirabilityDamageMult = (float*)0x11D071C;
	static float* fActorArmorDesirabilitySkillMult = (float*)0x11D0818;
	static float* fActorLookForce = (float*)0x11D0B7C;
	static float* fActorLuckSkillMult = (float*)0x11D1240;
	static float* fActorStrengthEncumbranceMult = (float*)0x11D01C0;
	static float* fActorSwimBreathBase = (float*)0x11D086C;
	static float* fActorSwimBreathDamage = (float*)0x11D1180;
	static float* fActorSwimBreathMult = (float*)0x11D0E2C;
	static float* fActorTeleportFadeSeconds = (float*)0x11CDABC;
	static float* fActorTurnAnimMinTime = (float*)0x11CD298;
	static float* fActorWeaponDesirabilityDamageMult = (float*)0x11D0728;
	static float* fActorWeaponDesirabilitySkillMult = (float*)0x11D0290;
	static float* fAddictionUsageMonitorThreshold = (float*)0x11D187C;
	static float* fAgilityReloadBase = (float*)0x11D0D6C;
	static float* fAgilityReloadModifier = (float*)0x11CFF5C;
	static float* fAiAcquireKillBase = (float*)0x11CDC6C;
	static float* fAiAcquireKillMult = (float*)0x11CD10C;
	static float* fAiAcquirePickBase = (float*)0x11CD86C;
	static float* fAiAcquirePickMult = (float*)0x11CD524;
	static float* fAiAcquireStealBase = (float*)0x11CD73C;
	static float* fAiAcquireStealMult = (float*)0x11CCFD0;
	static float* fAimSpeedPerkMultiplier = (float*)0x11CECBC;
	static float* fAlchemyGoldMult = (float*)0x11D1CA4;
	static float* fAlignEvilMaxKarma = (float*)0x11C5148;
	static float* fAlignGoodMinKarma = (float*)0x11C4E58;
	static float* fAlignMaxKarma = (float*)0x11C510C;
	static float* fAlignMinKarma = (float*)0x11C5164;
	static float* fAlignVeryEvilMaxKarma = (float*)0x11C4F68;
	static float* fAlignVeryGoodMinKarma = (float*)0x11C5094;
	static float* fAmbushOverRideRadiusforPlayerDetection = (float*)0x11CD560;
	static float* fArmorRatingBase = (float*)0x11CEFF4;
	static float* fArmorRatingConditionBase = (float*)0x11CF4F0;
	static float* fArmorRatingConditionMult = (float*)0x11CED5C;
	static float* fArmorRatingMax = (float*)0x11CF990;
	static float* fArmorRatingMult = (float*)0x11CE434;
	static float* fArmorWeightLightMaxMod = (float*)0x11D0404;
	static float* fArrowAgeMax = (float*)0x11CE688;
	static float* fArrowBounceBlockPercentage = (float*)0x11CE4E4;
	static float* fArrowBounceLinearSpeed = (float*)0x11CE1E0;
	static float* fArrowBounceRotateSpeed = (float*)0x11CEDB0;
	static float* fArrowBowTimerBase = (float*)0x11CF330;
	static float* fArrowBowTimerMult = (float*)0x11CEE04;
	static float* fArrowFakeMass = (float*)0x11CF8B4;
	static float* fArrowGravityBase = (float*)0x11CF048;
	static float* fArrowGravityMin = (float*)0x11CECF8;
	static float* fArrowGravityMult = (float*)0x11CEC8C;
	static float* fArrowMaxDistance = (float*)0x11CE080;
	static float* fArrowOptimalDistance = (float*)0x11CF0E8;
	static float* fArrowSpeedMult = (float*)0x11CE4F0;
	static float* fArrowWeakGravity = (float*)0x11CFDF4;
	static float* fArrowWeakSpeed = (float*)0x11CE1D4;
	static float* fAttributeClassPrimaryBonus = (float*)0x11CB7CC;
	static float* fAttributeClassSecondaryBonus = (float*)0x11CB7B0;
	static float* fAutoAimMaxDegrees = (float*)0x11CFAFC;
	static float* fAutoAimMaxDegrees3rdPerson = (float*)0x11CE784;
	static float* fAutoAimMaxDegreesMelee = (float*)0x11CE910;
	static float* fAutoAimMaxDegreesMiss = (float*)0x11CFD14;
	static float* fAutoAimMaxDegreesVATS = (float*)0x11CFC24;
	static float* fAutoAimMaxDistance = (float*)0x11CED68;
	static float* fAutoAimMeleeChaseMult = (float*)0x11CE964;
	static float* fAutoAimMissRatioHigh = (float*)0x11CF43C;
	static float* fAutoAimMissRatioLow = (float*)0x11CF0C0;
	static float* fAutoAimScreenPercentage = (float*)0x11CEFA8;
	static float* fAutoDoorActivateDistance = (float*)0x11C93C8;
	static float* fAutomaticWeaponBurstCooldownTime = (float*)0x11CF220;
	static float* fAutomaticWeaponBurstFireTime = (float*)0x11CEEF4;
	static float* fBSUnitsPerFoot = (float*)0x11D121C;
	static float* fBarterBuyBase = (float*)0x11D03C8;
	static float* fBarterBuyMult = (float*)0x11D0410;
	static float* fBarterDispBase = (float*)0x11D1480;
	static float* fBarterDispositionMod = (float*)0x11D0EBC;
	static float* fBarterHaggleBase = (float*)0x11D0A70;
	static float* fBarterHaggleCurve = (float*)0x11D03E0;
	static float* fBarterHaggleDispMult = (float*)0x11D1390;
	static float* fBarterHaggleMax = (float*)0x11D0F58;
	static float* fBarterSellBase = (float*)0x11D0764;
	static float* fBarterSellMult = (float*)0x11D0374;
	static float* fBeamWidthDefault = (float*)0x11CF844;
	static float* fBlinkDelayMax = (float*)0x11D5918;
	static float* fBlinkDelayMin = (float*)0x11D5810;
	static float* fBlinkDownTime = (float*)0x11D5960;
	static float* fBlinkUpTime = (float*)0x11D58BC;
	static float* fBlockAmountHandToHandMult = (float*)0x11CE5E0;
	static float* fBlockAmountWeaponMult = (float*)0x11CFA98;
	static float* fBlockMax = (float*)0x11CF060;
	static float* fBlockScoreNoShieldMult = (float*)0x11CF25C;
	static float* fBlockSkillBase = (float*)0x11CE844;
	static float* fBlockSkillMult = (float*)0x11CFD90;
	static float* fBloodSplatterCountBase = (float*)0x11CEE28;
	static float* fBloodSplatterCountDamageBase = (float*)0x11CF318;
	static float* fBloodSplatterCountDamageMult = (float*)0x11CED2C;
	static float* fBloodSplatterCountRandomMargin = (float*)0x11CEB3C;
	static float* fBloodSplatterDuration = (float*)0x11CFD50;
	static float* fBloodSplatterFadeStart = (float*)0x11CFC30;
	static float* fBloodSplatterFlareMult = (float*)0x11CF6AC;
	static float* fBloodSplatterFlareOffsetScale = (float*)0x11CEEB8;
	static float* fBloodSplatterFlareSize = (float*)0x11CF2C8;
	static float* fBloodSplatterMaxOpacity = (float*)0x11CF984;
	static float* fBloodSplatterMaxOpacity2 = (float*)0x11CF924;
	static float* fBloodSplatterMaxSize = (float*)0x11CFAA4;
	static float* fBloodSplatterMinOpacity = (float*)0x11CFAE4;
	static float* fBloodSplatterMinOpacity2 = (float*)0x11CECA4;
	static float* fBloodSplatterMinSize = (float*)0x11CF9A8;
	static float* fBloodSplatterOpacityChance = (float*)0x11CEFE8;
	static float* fBookPerkBonus = (float*)0x11C9288;
	static float* fBowHoldTimer = (float*)0x11CD060;
	static float* fBribeBase = (float*)0x11D1144;
	static float* fBribeMult = (float*)0x11D0BA0;
	static float* fBuoyancyBottle = (float*)0x11CFFB0;
	static float* fBuoyancyCloth = (float*)0x11D0E44;
	static float* fBuoyancyDirt = (float*)0x11D0C58;
	static float* fBuoyancyGlass = (float*)0x11D0BF8;
	static float* fBuoyancyGrass = (float*)0x11D0914;
	static float* fBuoyancyMetal = (float*)0x11D0674;
	static float* fBuoyancyMultBody = (float*)0x11D0E68;
	static float* fBuoyancyMultExtremity = (float*)0x11D00D0;
	static float* fBuoyancyOrganic = (float*)0x11D10E4;
	static float* fBuoyancySkin = (float*)0x11D029C;
	static float* fBuoyancySodaCan = (float*)0x11D0890;
	static float* fBuoyancyStone = (float*)0x11D06D4;
	static float* fBuoyancyWater = (float*)0x11D1420;
	static float* fBuoyancyWood = (float*)0x11D1228;
	static float* fCameraShakeDistFadeDelta = (float*)0x11D1438;
	static float* fCameraShakeDistFadeStart = (float*)0x11D0A4C;
	static float* fCameraShakeDistMin = (float*)0x11D0D84;
	static float* fCameraShakeExplosionDistMult = (float*)0x11D0284;
	static float* fCameraShakeFadeTime = (float*)0x11D08B4;
	static float* fCameraShakeMultMin = (float*)0x11D09E0;
	static float* fCameraShakeTime = (float*)0x11D0DFC;
	static float* fChameleonMaxRefraction = (float*)0x11C36DC;
	static float* fChameleonMinRefraction = (float*)0x11C3668;
	static float* fCharacterControllerMultipleStepSpeed = (float*)0x11C3CEC;
	static float* fCharacterDefaultTurningSpeed = (float*)0x11CD100;
	static float* fChase3rdPersonVanityXYMult = (float*)0x11CD3DC;
	static float* fChase3rdPersonZUnitsPerSecond = (float*)0x11CD28C;
	static float* fChaseCameraMax = (float*)0x11CD56C;
	static float* fCheckDeadBodyTimer = (float*)0x11CDB04;
	static float* fCheckPositionFallDistance = (float*)0x11CF740;
	static float* fClothingArmorBase = (float*)0x11D1108;
	static float* fClothingArmorScale = (float*)0x11D0CAC;
	static float* fClothingBase = (float*)0x11D0440;
	static float* fClothingClassScale = (float*)0x11D0D18;
	static float* fClothingJewelryBase = (float*)0x11D1030;
	static float* fClothingJewelryScale = (float*)0x11D0EA4;
	static float* fCombatAbsoluteMaxRangeMult = (float*)0x11CE880;
	static float* fCombatAdvanceNormalAttackChance = (float*)0x11CF280;
	static float* fCombatAvoidThreatsChance = (float*)0x11CE958;
	static float* fCombatBetweenAdvanceTimer = (float*)0x11CE5BC;
	static float* fCombatBuffMaxTimer = (float*)0x11CFBC4;
	static float* fCombatBuffStandoffTimer = (float*)0x11CFE00;
	static float* fCombatClusterUpdateTime = (float*)0x11CE70C;
	static float* fCombatCollectAlliesTimer = (float*)0x11CE9AC;
	static float* fCombatConfidenceModifierMax = (float*)0x11CF7F0;
	static float* fCombatConfidenceModifierMin = (float*)0x11CFDD0;
	static float* fCombatCoverMaxRangeMult = (float*)0x11CE3F4;
	static float* fCombatCurrentWeaponAbsoluteMaxRangeMult = (float*)0x11CE4B0;
	static float* fCombatDamageBonusMeleeSneakingMult = (float*)0x11CEAE4;
	static float* fCombatDamageBonusSneakingMult = (float*)0x11CF798;
	static float* fCombatDamageScale = (float*)0x11CEDC8;
	static float* fCombatDeadActorHitConeMult = (float*)0x11CFDA8;
	static float* fCombatDetectionBufferTime = (float*)0x11CE9B8;
	static float* fCombatDetectionDialogueIdleMaxElapsedTime = (float*)0x11CE360;
	static float* fCombatDetectionDialogueIdleMinElapsedTime = (float*)0x11CF250;
	static float* fCombatDetectionDialogueMaxElapsedTime = (float*)0x11CFA50;
	static float* fCombatDetectionDialogueMinElapsedTime = (float*)0x11CF0B4;
	static float* fCombatDetectionLostTime = (float*)0x11CE52C;
	static float* fCombatDialogueAttackMaxElapsedTime = (float*)0x11CE4CC;
	static float* fCombatDialogueAttackMinElapsedTime = (float*)0x11CFB24;
	static float* fCombatDialogueAvoidThreatMaxElapsedTime = (float*)0x11CF89C;
	static float* fCombatDialogueAvoidThreatMinElapsedTime = (float*)0x11CF85C;
	static float* fCombatDialogueFireExplosiveMaxElapsedTime = (float*)0x11CFCC0;
	static float* fCombatDialogueFireExplosiveMinElapsedTime = (float*)0x11CED44;
	static float* fCombatDialogueFleeMaxElapsedTime = (float*)0x11CE24C;
	static float* fCombatDialogueFleeMinElapsedTime = (float*)0x11CEBA8;
	static float* fCombatDisarmedFindBetterWeaponInitialTime = (float*)0x11CE05C;
	static float* fCombatDisarmedFindBetterWeaponTime = (float*)0x11CE9DC;
	static float* fCombatDismemberedLimbVelocity = (float*)0x11CEF18;
	static float* fCombatDistance = (float*)0x11CF850;
	static float* fCombatDistanceMin = (float*)0x11CEA90;
	static float* fCombatEnvironmentBloodChance = (float*)0x11CEF90;
	static float* fCombatFindBetterWeaponTime = (float*)0x11CF9FC;
	static float* fCombatFiringArcStationaryTurnMult = (float*)0x11CFB88;
	static float* fCombatFleeBoostConfidenceTargetRadius = (float*)0x11CE090;
	static float* fCombatFleeDoorTargetCheckDistance = (float*)0x11CE2F4;
	static float* fCombatFleeInitialDoorRestrictChance = (float*)0x11CF298;
	static float* fCombatFleeLastDoorRestrictTime = (float*)0x11CEEDC;
	static float* fCombatFleeMaxAllyDistance = (float*)0x11CF024;
	static float* fCombatFleeMaxCoverDistance = (float*)0x11CF8D8;
	static float* fCombatFleeMaxDoorDistance = (float*)0x11CF238;
	static float* fCombatFleeMinAllyDistance = (float*)0x11CE044;
	static float* fCombatFleeMinCoverDistance = (float*)0x11CED38;
	static float* fCombatFleeNormalDistance = (float*)0x11CEA84;
	static float* fCombatFleeTargetAvoidCost = (float*)0x11CEB30;
	static float* fCombatFleeTargetAvoidRadius = (float*)0x11CE904;
	static float* fCombatFleeTargetGatherRadius = (float*)0x11CEA54;
	static float* fCombatFleeUseDoorRestrictTime = (float*)0x11CEAD8;
	static float* fCombatFleeWaitTime = (float*)0x11CE6E8;
	static float* fCombatFollowRadiusBase = (float*)0x11CE21C;
	static float* fCombatFollowRadiusMin = (float*)0x11CEFD0;
	static float* fCombatFollowRadiusMult = (float*)0x11CEB00;
	static float* fCombatFollowSneakFollowRadius = (float*)0x11CF460;
	static float* fCombatForwardAttackChance = (float*)0x11CF03C;
	static float* fCombatGiantCreatureReachMult = (float*)0x11CE488;
	static float* fCombatGrenadeBounceTimeMax = (float*)0x11CE818;
	static float* fCombatGrenadeBounceTimeMin = (float*)0x11CF178;
	static float* fCombatGroupCombatStrengthUpdateTime = (float*)0x11CFE88;
	static float* fCombatGroupFleeingTargetLostRemoveDistance = (float*)0x11CE390;
	static float* fCombatGroupFleeingTargetLostRemoveDistanceTime = (float*)0x11CE754;
	static float* fCombatGroupFleeingTargetLostRemoveTime = (float*)0x11CE294;
	static float* fCombatGuardFollowBufferDistance = (float*)0x11CE7F4;
	static float* fCombatGuardRadiusMin = (float*)0x11CEC14;
	static float* fCombatGuardRadiusMult = (float*)0x11CE634;
	static float* fCombatHideFailedTargetDistance = (float*)0x11CFDE8;
	static float* fCombatHitConeAngle = (float*)0x11CFA5C;
	static float* fCombatInTheWayTimer = (float*)0x11CE970;
	static float* fCombatInventoryUpdateTimer = (float*)0x11CF664;
	static float* fCombatIronSightsDistance = (float*)0x11CEBFC;
	static float* fCombatIronSightsRangeMult = (float*)0x11CE5F8;
	static float* fCombatItemBuffTimer = (float*)0x11CF484;
	static float* fCombatItemRestoreTimer = (float*)0x11CFDDC;
	static float* fCombatLOSBufferTime = (float*)0x11CEA9C;
	static float* fCombatLineOfSightTimer = (float*)0x11CF454;
	static float* fCombatLocationTargetRadiusMin = (float*)0x11CF0DC;
	static float* fCombatLowFleeingTargetHitPercent = (float*)0x11CE234;
	static float* fCombatLowMaxAttackDistance = (float*)0x11CE824;
	static float* fCombatLowTargetHitPercent = (float*)0x11CFBB8;
	static float* fCombatMaxHoldScore = (float*)0x11CEA3C;
	static float* fCombatMinEngageDistance = (float*)0x11CEB9C;
	static float* fCombatMissileImpaleDepth = (float*)0x11CE1EC;
	static float* fCombatMissileStickDepth = (float*)0x11CFC90;
	static float* fCombatMonitorBuffsTimer = (float*)0x11CF774;
	static float* fCombatMoveToActorBufferDistance = (float*)0x11CF148;
	static float* fCombatMusicGroupThreatRatioMax = (float*)0x11CF948;
	static float* fCombatMusicGroupThreatRatioMin = (float*)0x11CEE70;
	static float* fCombatMusicGroupThreatRatioTimer = (float*)0x11CEB48;
	static float* fCombatMusicNearCombatInnerRadius = (float*)0x11CFE60;
	static float* fCombatMusicNearCombatOuterRadius = (float*)0x11CE458;
	static float* fCombatMusicPlayerCombatStrengthCap = (float*)0x11CEBE4;
	static float* fCombatMusicPlayerNearStrengthMult = (float*)0x11CE730;
	static float* fCombatMusicPlayerTargetedThreatRatio = (float*)0x11CE050;
	static float* fCombatMusicStopTime = (float*)0x11CFC18;
	static float* fCombatMusicUpdateTime = (float*)0x11CEEC4;
	static float* fCombatOverheadHitConeAngle = (float*)0x11CEB84;
	static float* fCombatPathingLookAheadDelta = (float*)0x11CE400;
	static float* fCombatPlayerLimbDamageMult = (float*)0x11CFA44;
	static float* fCombatProjectileMaxRangeOptimalMult = (float*)0x11CEAB4;
	static float* fCombatRadiusMinMult = (float*)0x11CFB30;
	static float* fCombatRangedStandoffTimer = (float*)0x11CE850;
	static float* fCombatRelativeDamageMod = (float*)0x11CF544;
	static float* fCombatRoundAmount = (float*)0x11CD6D0;
	static float* fCombatSearchAreaUpdateTime = (float*)0x11CF874;
	static float* fCombatSearchBufferDistance = (float*)0x11CE7B4;
	static float* fCombatSearchCheckDestinationMaxDistance = (float*)0x11CF3C4;
	static float* fCombatSearchCheckDestinationMidDistance = (float*)0x11CF2E4;
	static float* fCombatSearchCheckDestinationMinDistance = (float*)0x11CEB6C;
	static float* fCombatSearchCheckDestinationTime = (float*)0x11CECC8;
	static float* fCombatSearchCheckDoorDistance = (float*)0x11CF93C;
	static float* fCombatSearchCheckDoorLowDistance = (float*)0x11CEF60;
	static float* fCombatSearchCheckDoorMovingDistance = (float*)0x11CE0F4;
	static float* fCombatSearchCheckDoorMovingTime = (float*)0x11CE8F8;
	static float* fCombatSearchCheckInvestigateInitialTime = (float*)0x11CE9C4;
	static float* fCombatSearchCheckInvestigateMaxDistance = (float*)0x11CF2A4;
	static float* fCombatSearchCheckInvestigateTime = (float*)0x11CFAD8;
	static float* fCombatSearchExteriorMaxRadius = (float*)0x11CE0D0;
	static float* fCombatSearchExteriorMediumRadius = (float*)0x11CE934;
	static float* fCombatSearchExteriorMinRadius = (float*)0x11CEFC0;
	static float* fCombatSearchInteriorMaxRadius = (float*)0x11CF6F8;
	static float* fCombatSearchInteriorMediumRadius = (float*)0x11CEEE8;
	static float* fCombatSearchInteriorMinRadius = (float*)0x11CF184;
	static float* fCombatSearchLocationRemoveDistance = (float*)0x11CF688;
	static float* fCombatSearchLookTime = (float*)0x11CF030;
	static float* fCombatSearchSightRadius = (float*)0x11CF430;
	static float* fCombatSearchTargetHiddenMaxTime = (float*)0x11CF0A8;
	static float* fCombatSearchTargetHiddenRemoveTime = (float*)0x11CF3B8;
	static float* fCombatSearchUpdateTime = (float*)0x11CE440;
	static float* fCombatSneakAttackBonusMult = (float*)0x11CE85C;
	static float* fCombatSoundArmorPct = (float*)0x11CAF74;
	static float* fCombatSoundFleshPct = (float*)0x11CAF50;
	static float* fCombatSoundWeaponPct = (float*)0x11CAF84;
	static float* fCombatSpeakAttackChance = (float*)0x11CEA60;
	static float* fCombatSpeakHitChance = (float*)0x11CEE34;
	static float* fCombatSpeakHitThreshold = (float*)0x11CF5A4;
	static float* fCombatSpeakPowerAttackChance = (float*)0x11CE3DC;
	static float* fCombatSpeakTauntChance = (float*)0x11CFDC4;
	static float* fCombatSplashDamageMaxSpeed = (float*)0x11CEBD8;
	static float* fCombatSplashDamageMinDamage = (float*)0x11CEB60;
	static float* fCombatSplashDamageMinRadius = (float*)0x11CF274;
	static float* fCombatStaffTimer = (float*)0x11CE628;
	static float* fCombatStepAdvanceDistance = (float*)0x11CEEAC;
	static float* fCombatStrengthUpdateTime = (float*)0x11CF19C;
	static float* fCombatSweepHitConeAngle = (float*)0x11CFA08;
	static float* fCombatTargetLostRemoveDistance = (float*)0x11CF400;
	static float* fCombatTargetLostRemoveDistanceTime = (float*)0x11CF36C;
	static float* fCombatTargetLostRemoveTime = (float*)0x11CE748;
	static float* fCombatTeammateFollowRadiusBase = (float*)0x11CE58C;
	static float* fCombatTeammateFollowRadiusMin = (float*)0x11CE6AC;
	static float* fCombatTeammateFollowRadiusMult = (float*)0x11CED80;
	static float* fCombatThreatAvoidCost = (float*)0x11CEF9C;
	static float* fCombatThreatDangerousObjectHealth = (float*)0x11CE1BC;
	static float* fCombatThreatExplosiveObjectThreatTime = (float*)0x11CEF24;
	static float* fCombatThreatExtrudeTime = (float*)0x11CE994;
	static float* fCombatThreatExtrudeVelocityThreshold = (float*)0x11CF490;
	static float* fCombatThreatNegativeExtrudeTime = (float*)0x11CED10;
	static float* fCombatThreatProximityExplosionAvoidTime = (float*)0x11CF768;
	static float* fCombatThreatRatioUpdateTime = (float*)0x11CF808;
	static float* fCombatThreatSignificantScore = (float*)0x11CFBD0;
	static float* fCombatThreatTimedExplosionLength = (float*)0x11CEAC0;
	static float* fCombatUnarmedCritDamageMult = (float*)0x11CE580;
	static float* fCombatUppercutHitConeAngle = (float*)0x11CFE48;
	static float* fCombatVulnerabilityMod = (float*)0x11CE2AC;
	static float* fCombatYieldRetryTime = (float*)0x11CEDBC;
	static float* fCombatYieldTime = (float*)0x11CE3AC;
	static float* fCommentOnPlayerActionsTimer = (float*)0x11D0178;
	static float* fCommentOnPlayerKnockingThings = (float*)0x11D0010;
	static float* fConcussionTimer = (float*)0x11D1BA8;
	static float* fConfidenceAverage = (float*)0x11C5300;
	static float* fConfidenceBrave = (float*)0x11C5310;
	static float* fConfidenceCautious = (float*)0x11C5324;
	static float* fConfidenceCowardly = (float*)0x11C5340;
	static float* fConfidenceFoolhardy = (float*)0x11C52E8;
	static float* fCounterAttackTimer = (float*)0x11D0BE8;
	static float* fCoverEvaluationLastSeenExpireTime = (float*)0x11CF6D0;
	static float* fCoverFiredProjectileExpireTime = (float*)0x11CF1C0;
	static float* fCoverFiringReloadClipPercent = (float*)0x11CFA38;
	static float* fCoverWaitReloadClipPercent = (float*)0x11CE324;
	static float* fCoveredAdvanceMinAdvanceDistanceMax = (float*)0x11CF6EC;
	static float* fCoveredAdvanceMinAdvanceDistanceMin = (float*)0x11CE61C;
	static float* fCreatureCalcCombat = (float*)0x11CB5B8;
	static float* fCreatureCalcDamage = (float*)0x11CB590;
	static float* fCreatureCalcMagic = (float*)0x11CB578;
	static float* fCreatureCalcStealth = (float*)0x11CB5D8;
	static float* fCreatureDefaultTurningSpeed = (float*)0x11CFAC0;
	static float* fCrimeAlarmRespMult = (float*)0x11CDC20;
	static float* fCrimeDispAttack = (float*)0x11D13E4;
	static float* fCrimeDispMurder = (float*)0x11D0C1C;
	static float* fCrimeDispPersonal = (float*)0x11D0AC4;
	static float* fCrimeDispPickpocket = (float*)0x11D148C;
	static float* fCrimeDispSteal = (float*)0x11D0500;
	static float* fCrimeDispTresspass = (float*)0x11D068C;
	static float* fCrimeGoldSteal = (float*)0x11D04C4;
	static float* fCrimeSoundBase = (float*)0x11CD960;
	static float* fCrimeSoundMult = (float*)0x11CD918;
	static float* fCrippledArm1HSpreadPenalty = (float*)0x11CF06C;
	static float* fCrippledArm2HSpreadPenalty = (float*)0x11CF00C;
	static float* fCrippledArms1HSpreadPenalty = (float*)0x11CE610;
	static float* fCrippledArms2HSpreadPenalty = (float*)0x11CEF3C;
	static float* fCrossAPCost = (float*)0x11D12E8;
	static float* fCrossSkillChance = (float*)0x11D0A10;
	static float* fCrossSkillDamageMultiplier = (float*)0x11D0338;
	static float* fCrossThreshold = (float*)0x11D1504;
	static float* fCrossVatsMultiplier = (float*)0x11D12DC;
	static float* fDOFDistanceMult = (float*)0x11CF5BC;
	static float* fDamageArmConditionBase = (float*)0x11CFCB4;
	static float* fDamageArmConditionMult = (float*)0x11CFAF0;
	static float* fDamageGunWeapCondBase = (float*)0x11CFB60;
	static float* fDamageGunWeapCondMult = (float*)0x11CF268;
	static float* fDamageMeleeWeapCondBase = (float*)0x11CE6F4;
	static float* fDamageMeleeWeapCondMult = (float*)0x11CFA74;
	static float* fDamagePowerAttackBackBonus = (float*)0x11CFC84;
	static float* fDamagePowerAttackBonus = (float*)0x11CE67C;
	static float* fDamagePowerAttackForwardBonus = (float*)0x11CF2B0;
	static float* fDamagePowerAttackSideBonus = (float*)0x11CEF6C;
	static float* fDamagePowerAttackStandBonus = (float*)0x11CE8A4;
	static float* fDamageSkillBase = (float*)0x11CECEC;
	static float* fDamageSkillMult = (float*)0x11CF354;
	static float* fDamageSneakAttackMult = (float*)0x11CEFDC;
	static float* fDamageStrengthBase = (float*)0x11CE174;
	static float* fDamageStrengthMult = (float*)0x11CF3D0;
	static float* fDamageToArmorPercentage = (float*)0x11CF100;
	static float* fDamageToWeaponValue = (float*)0x11CF154;
	static float* fDamageWeaponMult = (float*)0x11CE2C4;
	static float* fDangerousObjectExplosionDamage = (float*)0x11CE724;
	static float* fDangerousObjectExplosionRadius = (float*)0x11CF1B4;
	static float* fDangerousProjectileExplosionDamage = (float*)0x11CF3F4;
	static float* fDangerousProjectileExplosionRadius = (float*)0x11CEA78;
	static float* fDaytimeColorExtension = (float*)0x11CCBDC;
	static float* fDeathForceDamageMax = (float*)0x11CFE78;
	static float* fDeathForceDamageMin = (float*)0x11CF61C;
	static float* fDeathForceForceMax = (float*)0x11CFBA0;
	static float* fDeathForceForceMin = (float*)0x11CF728;
	static float* fDeathForceRangedDamageMax = (float*)0x11CF628;
	static float* fDeathForceRangedDamageMin = (float*)0x11CFD5C;
	static float* fDeathForceRangedForceMax = (float*)0x11CF954;
	static float* fDeathForceRangedForceMin = (float*)0x11CFD08;
	static float* fDeathSoundMaxDistance = (float*)0x11D0FA0;
	static float* fDebrisFadeTime = (float*)0x11CFC00;
	static float* fDebrisMaxVelocity = (float*)0x11C3C78;
	static float* fDebrisMinExtent = (float*)0x11C3DB4;
	static float* fDefaultFatigue = (float*)0x11C4FA8;
	static float* fDefaultKarma = (float*)0x11C5078;
	static float* fDefaultNoticeTextDisplayTime = (float*)0x11D2C38;
	static float* fDemandBase = (float*)0x11D154C;
	static float* fDemandMult = (float*)0x11D13FC;
	static float* fDetectionActionTimer = (float*)0x11CD500;
	static float* fDetectionCommentTimer = (float*)0x11CD3D0;
	static float* fDetectionEventExpireTime = (float*)0x11CE55C;
	static float* fDetectionLargeActorSizeMult = (float*)0x11CDEF0;
	static float* fDetectionLargeActorThreshold = (float*)0x11CD244;
	static float* fDetectionNightEyeBonus = (float*)0x11D0F94;
	static float* fDetectionSneakLightMod = (float*)0x11CDB88;
	static float* fDetectionTimerSetting = (float*)0x11D0B0C;
	static float* fDetectionViewCone = (float*)0x11CD66C;
	static float* fDialogFocalDepthRange = (float*)0x11D4700;
	static float* fDialogFocalDepthStrength = (float*)0x11D3190;
	static float* fDialogSpeechDelaySeconds = (float*)0x11D32C8;
	static float* fDialogZoomInSeconds = (float*)0x11D3EE4;
	static float* fDialogZoomOutSeconds = (float*)0x11D2440;
	static float* fDiffMultHPByPCE = (float*)0x11D0D90;
	static float* fDiffMultHPByPCH = (float*)0x11D0E5C;
	static float* fDiffMultHPByPCN = (float*)0x11D0788;
	static float* fDiffMultHPByPCVE = (float*)0x11D0C70;
	static float* fDiffMultHPByPCVH = (float*)0x11D01A8;
	static float* fDiffMultHPToPCE = (float*)0x11D083C;
	static float* fDiffMultHPToPCH = (float*)0x11D0530;
	static float* fDiffMultHPToPCN = (float*)0x11D12AC;
	static float* fDiffMultHPToPCVE = (float*)0x11D038C;
	static float* fDiffMultHPToPCVH = (float*)0x11CFEBC;
	static float* fDiffMultXPE = (float*)0x11CFF14;
	static float* fDiffMultXPH = (float*)0x11D06C8;
	static float* fDiffMultXPN = (float*)0x11D0E8C;
	static float* fDiffMultXPVE = (float*)0x11D11E0;
	static float* fDiffMultXPVH = (float*)0x11D0B70;
	static float* fDifficultyDamageMultiplier = (float*)0x11D016C;
	static float* fDifficultyDefaultValue = (float*)0x11D0124;
	static float* fDifficultyMaxValue = (float*)0x11D0B18;
	static float* fDifficultyMinValue = (float*)0x11D0A94;
	static float* fDisarmedPickupWeaponDistanceMult = (float*)0x11CFA14;
	static float* fDispActorCharBase = (float*)0x11CCFC4;
	static float* fDispActorCharMult = (float*)0x11CD388;
	static float* fDispActorRespBase = (float*)0x11CD22C;
	static float* fDispActorRespMult = (float*)0x11CDC2C;
	static float* fDispTargetCharBase = (float*)0x11CDDF0;
	static float* fDispTargetCharMult = (float*)0x11CDF3C;
	static float* fDispTargetCharOffset = (float*)0x11CD018;
	static float* fDispTargetDiseaseBase = (float*)0x11CD43C;
	static float* fDispTargetFactionMult = (float*)0x11CDDC8;
	static float* fDispTargetFactionRankBase = (float*)0x11CD894;
	static float* fDispTargetFactionRankMult = (float*)0x11CD2BC;
	static float* fDispTargetKarmaMult = (float*)0x11CCFE8;
	static float* fDispTargetRaceMult = (float*)0x11CDFAC;
	static float* fDispTargetWeaponBase = (float*)0x11CD2D4;
	static float* fDistanceExteriorReactCombat = (float*)0x11CD9D4;
	static float* fDistanceInteriorReactCombat = (float*)0x11CD06C;
	static float* fDistanceProjectileExplosionDetection = (float*)0x11CD79C;
	static float* fDistancetoPlayerforConversations = (float*)0x11CD518;
	static float* fDrinkRepeatRate = (float*)0x11CD5CC;
	static float* fDyingTimer = (float*)0x11CCF80;
	static float* fEffectTimerBeginsCountdown = (float*)0x11D34E4;
	static float* fEmbeddedWeaponSwitchChance = (float*)0x11CEC80;
	static float* fEmbeddedWeaponSwitchTime = (float*)0x11CEB54;
	static float* fEnchantmentEffectPointsMult = (float*)0x11D0F28;
	static float* fEnchantmentGoldMult = (float*)0x11D1620;
	static float* fEnchantmentPointsMult = (float*)0x11D0260;
	static float* fEnemyHealthBarTimer = (float*)0x11CF880;
	static float* fEssentialDeathTime = (float*)0x11D0704;
	static float* fEssentialHealthPercentReGain = (float*)0x11D0148;
	static float* fExplodeLimbRemovalDelay = (float*)0x11CF33C;
	static float* fExplodeLimbRemovalDelayVATS = (float*)0x11CF9E4;
	static float* fExplosionForceClutterUpBias = (float*)0x11D0E74;
	static float* fExplosionForceKnockdownMinimum = (float*)0x11D118C;
	static float* fExplosionForceMultAngular = (float*)0x11D02F0;
	static float* fExplosionForceMultLinear = (float*)0x11CFF68;
	static float* fExplosionImageSpaceSwapPower = (float*)0x11D0524;
	static float* fExplosionLOSBuffer = (float*)0x11D1510;
	static float* fExplosionLOSBufferDistance = (float*)0x11D1348;
	static float* fExplosionMaxImpulse = (float*)0x11D0CA0;
	static float* fExplosionShudderDurationX = (float*)0x11CFEA4;
	static float* fExplosionShudderDurationY = (float*)0x11D0494;
	static float* fExplosionShudderFrequencyX = (float*)0x11D05E4;
	static float* fExplosionShudderFrequencyY = (float*)0x11D00DC;
	static float* fExplosionShudderIntensityX = (float*)0x11D0D3C;
	static float* fExplosionShudderIntensityY = (float*)0x11D0EE0;
	static float* fExplosionShudderPowerMin = (float*)0x11D0034;
	static float* fExplosionSourceRefMult = (float*)0x11D0DC0;
	static float* fExplosionSplashRadius = (float*)0x11D0DA8;
	static float* fExplosionWaterRadiusRatio = (float*)0x11D0E38;
	static float* fExplosiveIndicatorDistance = (float*)0x11D45E0;
	static float* fExplosiveProjectileBlockedResetTime = (float*)0x11CF160;
	static float* fExplosiveProjectileBlockedWaitTime = (float*)0x11CF8F0;
	static float* fExpressionChangePerSec = (float*)0x11D57C8;
	static float* fExpressionStrengthAdd = (float*)0x11D5780;
	static float* fEyeHeadingMaxOffsetEmotionAngry = (float*)0x11D5754;
	static float* fEyeHeadingMaxOffsetEmotionFear = (float*)0x11D58DC;
	static float* fEyeHeadingMaxOffsetEmotionHappy = (float*)0x11D598C;
	static float* fEyeHeadingMaxOffsetEmotionNeutral = (float*)0x11D590C;
	static float* fEyeHeadingMaxOffsetEmotionSad = (float*)0x11D5898;
	static float* fEyeHeadingMinOffsetEmotionAngry = (float*)0x11D596C;
	static float* fEyeHeadingMinOffsetEmotionFear = (float*)0x11D586C;
	static float* fEyeHeadingMinOffsetEmotionHappy = (float*)0x11D5798;
	static float* fEyeHeadingMinOffsetEmotionNeutral = (float*)0x11D5860;
	static float* fEyeHeadingMinOffsetEmotionSad = (float*)0x11D5934;
	static float* fEyePitchMaxOffsetEmotionAngry = (float*)0x11D57D4;
	static float* fEyePitchMaxOffsetEmotionFear = (float*)0x11D57E4;
	static float* fEyePitchMaxOffsetEmotionHappy = (float*)0x11D5878;
	static float* fEyePitchMaxOffsetEmotionNeutral = (float*)0x11D5838;
	static float* fEyePitchMaxOffsetEmotionSad = (float*)0x11D57BC;
	static float* fEyePitchMinOffsetEmotionAngry = (float*)0x11D5948;
	static float* fEyePitchMinOffsetEmotionFear = (float*)0x11D582C;
	static float* fEyePitchMinOffsetEmotionHappy = (float*)0x11D58EC;
	static float* fEyePitchMinOffsetEmotionNeutral = (float*)0x11D58C8;
	static float* fEyePitchMinOffsetEmotionSad = (float*)0x11D5820;
	static float* fFadeToBlackFadeSeconds = (float*)0x11C3E80;
	static float* fFallLegDamageMult = (float*)0x11D1090;
	static float* fFatigueAttackWeaponBase = (float*)0x11CEE88;
	static float* fFatigueAttackWeaponMult = (float*)0x11CE544;
	static float* fFatigueBlockBase = (float*)0x11CF4C0;
	static float* fFatigueBlockMult = (float*)0x11CFD9C;
	static float* fFatigueBlockSkillBase = (float*)0x11CE09C;
	static float* fFatigueBlockSkillMult = (float*)0x11CFCA8;
	static float* fFatigueCastBase = (float*)0x11D1B60;
	static float* fFatigueCastMult = (float*)0x11D1B0C;
	static float* fFatigueReturnBase = (float*)0x11D05F0;
	static float* fFatigueReturnMult = (float*)0x11D0FDC;
	static float* fFightAbleToDetectTimer = (float*)0x11CDD28;
	static float* fFightAggrBase = (float*)0x11CD900;
	static float* fFightAggrMult = (float*)0x11CCFA4;
	static float* fFightDispBase = (float*)0x11CD1A8;
	static float* fFightDispMult = (float*)0x11CD3C4;
	static float* fFightDistanceBase = (float*)0x11CD3E8;
	static float* fFightDistanceMult = (float*)0x11CDBA4;
	static float* fFightFriendDispBase = (float*)0x11CD0B4;
	static float* fFightFriendDispMult = (float*)0x11CDDD4;
	static float* fFirstPersonCameraMult = (float*)0x11CDA2C;
	static float* fFirstPersonHandChaseSeconds = (float*)0x11CD624;
	static float* fFirstPersonHandChaseSecondsAttack = (float*)0x11CDE3C;
	static float* fFirstPersonHandFollowMult = (float*)0x11CDCB4;
	static float* fFirstPersonZoomMaxMult = (float*)0x11CDD64;
	static float* fFirstPersonZoomMinMult = (float*)0x11CCFDC;
	static float* fFleeDistanceExterior = (float*)0x11CF99C;
	static float* fFleeDistanceInterior = (float*)0x11CE574;
	static float* fFleeDoneDistanceExterior = (float*)0x11CF710;
	static float* fFleeDoneDistanceInterior = (float*)0x11CE6C4;
	static float* fFleeIsSafeTimer = (float*)0x11CD34C;
	static float* fFollowExtraCatchUpSpeedMult = (float*)0x11CD358;
	static float* fFollowMatchSpeedZoneWidth = (float*)0x11CD860;
	static float* fFollowRunMaxSpeedupMultiplier = (float*)0x11CD748;
	static float* fFollowRunMinSlowdownMultiplier = (float*)0x11CD5F4;
	static float* fFollowSlowdownZoneWidth = (float*)0x11CDE78;
	static float* fFollowSpaceBetweenFollowers = (float*)0x11CD660;
	static float* fFollowStopZoneMinMult = (float*)0x11CD424;
	static float* fFollowWalkMaxSpeedupMultiplier = (float*)0x11CD9B8;
	static float* fFollowWalkMinSlowdownMultiplier = (float*)0x11CDFA0;
	static float* fFollowWalkZoneMult = (float*)0x11CE010;
	static float* fFriendHitTimer = (float*)0x11CD584;
	static float* fFriendMinimumLastHitTime = (float*)0x11CD790;
	static float* fFurnitureMarker01DeltaX = (float*)0x11C8B48;
	static float* fFurnitureMarker01DeltaY = (float*)0x11C8978;
	static float* fFurnitureMarker01DeltaZ = (float*)0x11C8BF0;
	static float* fFurnitureMarker01HeadingDelta = (float*)0x11C8AB8;
	static float* fFurnitureMarker02DeltaX = (float*)0x11C8880;
	static float* fFurnitureMarker02DeltaY = (float*)0x11C8C54;
	static float* fFurnitureMarker02DeltaZ = (float*)0x11C8CF4;
	static float* fFurnitureMarker02HeadingDelta = (float*)0x11C8D6C;
	static float* fFurnitureMarker03DeltaX = (float*)0x11C8938;
	static float* fFurnitureMarker03DeltaY = (float*)0x11C8C64;
	static float* fFurnitureMarker03DeltaZ = (float*)0x11C8C94;
	static float* fFurnitureMarker03HeadingDelta = (float*)0x11C8B18;
	static float* fFurnitureMarker04DeltaX = (float*)0x11C8A64;
	static float* fFurnitureMarker04DeltaY = (float*)0x11C8D0C;
	static float* fFurnitureMarker04DeltaZ = (float*)0x11C876C;
	static float* fFurnitureMarker04HeadingDelta = (float*)0x11C8D24;
	static float* fFurnitureMarker05DeltaX = (float*)0x11C8C88;
	static float* fFurnitureMarker05DeltaY = (float*)0x11C8B00;
	static float* fFurnitureMarker05DeltaZ = (float*)0x11C8A70;
	static float* fFurnitureMarker05HeadingDelta = (float*)0x11C8920;
	static float* fFurnitureMarker06DeltaX = (float*)0x11C8954;
	static float* fFurnitureMarker06DeltaY = (float*)0x11C8700;
	static float* fFurnitureMarker06DeltaZ = (float*)0x11C87C0;
	static float* fFurnitureMarker06HeadingDelta = (float*)0x11C87CC;
	static float* fFurnitureMarker07DeltaX = (float*)0x11C879C;
	static float* fFurnitureMarker07DeltaY = (float*)0x11C86D4;
	static float* fFurnitureMarker07DeltaZ = (float*)0x11C8C38;
	static float* fFurnitureMarker07HeadingDelta = (float*)0x11C8850;
	static float* fFurnitureMarker08DeltaX = (float*)0x11C8BE0;
	static float* fFurnitureMarker08DeltaY = (float*)0x11C8838;
	static float* fFurnitureMarker08DeltaZ = (float*)0x11C8690;
	static float* fFurnitureMarker08HeadingDelta = (float*)0x11C863C;
	static float* fFurnitureMarker09DeltaX = (float*)0x11C8D30;
	static float* fFurnitureMarker09DeltaY = (float*)0x11C85EC;
	static float* fFurnitureMarker09DeltaZ = (float*)0x11C8748;
	static float* fFurnitureMarker09HeadingDelta = (float*)0x11C8A0C;
	static float* fFurnitureMarker10DeltaX = (float*)0x11C8D18;
	static float* fFurnitureMarker10DeltaY = (float*)0x11C8C14;
	static float* fFurnitureMarker10DeltaZ = (float*)0x11C88F0;
	static float* fFurnitureMarker10HeadingDelta = (float*)0x11C8718;
	static float* fFurnitureMarker11DeltaX = (float*)0x11C8AAC;
	static float* fFurnitureMarker11DeltaY = (float*)0x11C8630;
	static float* fFurnitureMarker11DeltaZ = (float*)0x11C86E0;
	static float* fFurnitureMarker11HeadingDelta = (float*)0x11C8D98;
	static float* fFurnitureMarker12DeltaX = (float*)0x11C8908;
	static float* fFurnitureMarker12DeltaY = (float*)0x11C866C;
	static float* fFurnitureMarker12DeltaZ = (float*)0x11C8990;
	static float* fFurnitureMarker12HeadingDelta = (float*)0x11C888C;
	static float* fFurnitureMarker13DeltaX = (float*)0x11C8604;
	static float* fFurnitureMarker13DeltaY = (float*)0x11C8D3C;
	static float* fFurnitureMarker13DeltaZ = (float*)0x11C8BD4;
	static float* fFurnitureMarker13HeadingDelta = (float*)0x11C8ADC;
	static float* fFurnitureMarker14DeltaX = (float*)0x11C8CE4;
	static float* fFurnitureMarker14DeltaY = (float*)0x11C88D8;
	static float* fFurnitureMarker14DeltaZ = (float*)0x11C85CC;
	static float* fFurnitureMarker14HeadingDelta = (float*)0x11C8814;
	static float* fFurnitureMarker15DeltaX = (float*)0x11C8844;
	static float* fFurnitureMarker15DeltaY = (float*)0x11C86C8;
	static float* fFurnitureMarker15DeltaZ = (float*)0x11C8724;
	static float* fFurnitureMarker15HeadingDelta = (float*)0x11C8614;
	static float* fFurnitureMarker16DeltaX = (float*)0x11C8868;
	static float* fFurnitureMarker16DeltaY = (float*)0x11C87E8;
	static float* fFurnitureMarker16DeltaZ = (float*)0x11C8C20;
	static float* fFurnitureMarker16HeadingDelta = (float*)0x11C8B60;
	static float* fFurnitureMarker17DeltaX = (float*)0x11C8660;
	static float* fFurnitureMarker17DeltaY = (float*)0x11C8C70;
	static float* fFurnitureMarker17DeltaZ = (float*)0x11C8D7C;
	static float* fFurnitureMarker17HeadingDelta = (float*)0x11C896C;
	static float* fFurnitureMarker18DeltaX = (float*)0x11C87B4;
	static float* fFurnitureMarker18DeltaY = (float*)0x11C8C2C;
	static float* fFurnitureMarker18DeltaZ = (float*)0x11C8B84;
	static float* fFurnitureMarker18HeadingDelta = (float*)0x11C8B30;
	static float* fFurnitureMarker19DeltaX = (float*)0x11C885C;
	static float* fFurnitureMarker19DeltaY = (float*)0x11C8DB0;
	static float* fFurnitureMarker19DeltaZ = (float*)0x11C8B9C;
	static float* fFurnitureMarker19HeadingDelta = (float*)0x11C89F4;
	static float* fFurnitureMarker20DeltaX = (float*)0x11C89CC;
	static float* fFurnitureMarker20DeltaY = (float*)0x11C8730;
	static float* fFurnitureMarker20DeltaZ = (float*)0x11C86AC;
	static float* fFurnitureMarker20HeadingDelta = (float*)0x11C873C;
	static float* fFurnitureMarker21DeltaX = (float*)0x11C889C;
	static float* fFurnitureMarker21DeltaY = (float*)0x11C8CC4;
	static float* fFurnitureMarker21DeltaZ = (float*)0x11C8AA0;
	static float* fFurnitureMarker21HeadingDelta = (float*)0x11C8CD8;
	static float* fFurnitureMarker22DeltaX = (float*)0x11C8D60;
	static float* fFurnitureMarker22DeltaY = (float*)0x11C8790;
	static float* fFurnitureMarker22DeltaZ = (float*)0x11C8984;
	static float* fFurnitureMarker22HeadingDelta = (float*)0x11C8C48;
	static float* fFurnitureMarker23DeltaX = (float*)0x11C882C;
	static float* fFurnitureMarker23DeltaY = (float*)0x11C8B78;
	static float* fFurnitureMarker23DeltaZ = (float*)0x11C8648;
	static float* fFurnitureMarker23HeadingDelta = (float*)0x11C86B8;
	static float* fFurnitureMarker24DeltaX = (float*)0x11C8C08;
	static float* fFurnitureMarker24DeltaY = (float*)0x11C8AF4;
	static float* fFurnitureMarker24DeltaZ = (float*)0x11C8B0C;
	static float* fFurnitureMarker24HeadingDelta = (float*)0x11C8914;
	static float* fFurnitureMarker25DeltaX = (float*)0x11C8684;
	static float* fFurnitureMarker25DeltaY = (float*)0x11C86F4;
	static float* fFurnitureMarker25DeltaZ = (float*)0x11C8CA0;
	static float* fFurnitureMarker25HeadingDelta = (float*)0x11C88E4;
	static float* fFurnitureMarker26DeltaX = (float*)0x11C8778;
	static float* fFurnitureMarker26DeltaY = (float*)0x11C8760;
	static float* fFurnitureMarker26DeltaZ = (float*)0x11C8B90;
	static float* fFurnitureMarker26HeadingDelta = (float*)0x11C88CC;
	static float* fFurnitureMarker27DeltaX = (float*)0x11C8A88;
	static float* fFurnitureMarker27DeltaY = (float*)0x11C86A0;
	static float* fFurnitureMarker27DeltaZ = (float*)0x11C8D8C;
	static float* fFurnitureMarker27HeadingDelta = (float*)0x11C89B4;
	static float* fFurnitureMarker28DeltaX = (float*)0x11C88A8;
	static float* fFurnitureMarker28DeltaY = (float*)0x11C8B3C;
	static float* fFurnitureMarker28DeltaZ = (float*)0x11C8C7C;
	static float* fFurnitureMarker28HeadingDelta = (float*)0x11C88C0;
	static float* fFurnitureMarker29DeltaX = (float*)0x11C8A40;
	static float* fFurnitureMarker29DeltaY = (float*)0x11C8654;
	static float* fFurnitureMarker29DeltaZ = (float*)0x11C8A00;
	static float* fFurnitureMarker29HeadingDelta = (float*)0x11C8A34;
	static float* fFurnitureMarker30DeltaX = (float*)0x11C88FC;
	static float* fFurnitureMarker30DeltaY = (float*)0x11C8BB8;
	static float* fFurnitureMarker30DeltaZ = (float*)0x11C8D48;
	static float* fFurnitureMarker30HeadingDelta = (float*)0x11C8A18;
	static float* fFurnitureMarker31DeltaX = (float*)0x11C8A94;
	static float* fFurnitureMarker31DeltaY = (float*)0x11C89D8;
	static float* fFurnitureMarker31DeltaZ = (float*)0x11C899C;
	static float* fFurnitureMarker31HeadingDelta = (float*)0x11C8BA8;
	static float* fFurnitureMarker32DeltaX = (float*)0x11C8A7C;
	static float* fFurnitureMarker32DeltaY = (float*)0x11C8820;
	static float* fFurnitureMarker32DeltaZ = (float*)0x11C85F8;
	static float* fFurnitureMarker32HeadingDelta = (float*)0x11C8620;
	static float* fFurnitureMarker33DeltaX = (float*)0x11C87DC;
	static float* fFurnitureMarker33DeltaY = (float*)0x11C8B24;
	static float* fFurnitureMarker33DeltaZ = (float*)0x11C8DA4;
	static float* fFurnitureMarker33HeadingDelta = (float*)0x11C8874;
	static float* fFurnitureMarker34DeltaX = (float*)0x11C87A8;
	static float* fFurnitureMarker34DeltaY = (float*)0x11C8754;
	static float* fFurnitureMarker34DeltaZ = (float*)0x11C8D54;
	static float* fFurnitureMarker34HeadingDelta = (float*)0x11C8D00;
	static float* fFurnitureMarker35DeltaX = (float*)0x11C8BC4;
	static float* fFurnitureMarker35DeltaY = (float*)0x11C85D8;
	static float* fFurnitureMarker35DeltaZ = (float*)0x11C8784;
	static float* fFurnitureMarker35HeadingDelta = (float*)0x11C8CAC;
	static float* fFurnitureMarker36DeltaX = (float*)0x11C8AC4;
	static float* fFurnitureMarker36DeltaY = (float*)0x11C8BFC;
	static float* fFurnitureMarker36DeltaZ = (float*)0x11C89A8;
	static float* fFurnitureMarker36HeadingDelta = (float*)0x11C89C0;
	static float* fFurnitureMarker37DeltaX = (float*)0x11C870C;
	static float* fFurnitureMarker37DeltaY = (float*)0x11C8A24;
	static float* fFurnitureMarker37DeltaZ = (float*)0x11C8B6C;
	static float* fFurnitureMarker37HeadingDelta = (float*)0x11C8A58;
	static float* fFurnitureMarker38DeltaX = (float*)0x11C8B54;
	static float* fFurnitureMarker38DeltaY = (float*)0x11C8944;
	static float* fFurnitureMarker38DeltaZ = (float*)0x11C87F4;
	static float* fFurnitureMarker38HeadingDelta = (float*)0x11C88B4;
	static float* fFurnitureMarker39DeltaX = (float*)0x11C8960;
	static float* fFurnitureMarker39DeltaY = (float*)0x11C892C;
	static float* fFurnitureMarker39DeltaZ = (float*)0x11C8A4C;
	static float* fFurnitureMarker39HeadingDelta = (float*)0x11C8AE8;
	static float* fFurnitureMarker40DeltaX = (float*)0x11C89E4;
	static float* fFurnitureMarker40DeltaY = (float*)0x11C8800;
	static float* fFurnitureMarker40DeltaZ = (float*)0x11C8678;
	static float* fFurnitureMarker40HeadingDelta = (float*)0x11C8CB8;
	static float* fGameplayImpulseMinMass = (float*)0x11D1288;
	static float* fGameplayImpulseMultBiped = (float*)0x11D0578;
	static float* fGameplayImpulseMultClutter = (float*)0x11D0D30;
	static float* fGameplayImpulseMultDebrisLarge = (float*)0x11D0F34;
	static float* fGameplayImpulseMultProp = (float*)0x11D0D54;
	static float* fGameplayImpulseMultTrap = (float*)0x11D106C;
	static float* fGameplayImpulseScale = (float*)0x11D0710;
	static float* fGetHitPainMult = (float*)0x11CF838;
	static float* fGrabMaxWeightRunning = (float*)0x11D0980;
	static float* fGrabMaxWeightWalking = (float*)0x11D1234;
	static float* fGrenadeAgeMax = (float*)0x11CF538;
	static float* fGrenadeFriction = (float*)0x11CE5EC;
	static float* fGrenadeHighArcSpeedPercentage = (float*)0x11CFB7C;
	static float* fGrenadeRestitution = (float*)0x11CE30C;
	static float* fGrenadeThrowHitFractionThreshold = (float*)0x11CF960;
	static float* fGroundAttackVatsMultiplier = (float*)0x11D07B8;
	static float* fGuardPackageAttackRadiusMult = (float*)0x11CD1FC;
	static float* fGunDecalCameraDistance = (float*)0x11CEC2C;
	static float* fGunParticleCameraDistance = (float*)0x11CE270;
	static float* fGunReferenceSkill = (float*)0x11CE240;
	static float* fGunShellCameraDistance = (float*)0x11CF580;
	static float* fGunShellDirectionRandomize = (float*)0x11CF4B4;
	static float* fGunShellEjectSpeed = (float*)0x11CF49C;
	static float* fGunShellLifetime = (float*)0x11CE7C4;
	static float* fGunShellRotateRandomize = (float*)0x11CE0E8;
	static float* fGunShellRotateSpeed = (float*)0x11CF1D8;
	static float* fGunSpreadArmBase = (float*)0x11CE4BC;
	static float* fGunSpreadArmMult = (float*)0x11CE6A0;
	static float* fGunSpreadCondBase = (float*)0x11CE204;
	static float* fGunSpreadCondMult = (float*)0x11CF82C;
	static float* fGunSpreadCrouchBase = (float*)0x11CF1CC;
	static float* fGunSpreadCrouchMult = (float*)0x11CFC54;
	static float* fGunSpreadDriftBase = (float*)0x11CE5B0;
	static float* fGunSpreadDriftMult = (float*)0x11CE7D0;
	static float* fGunSpreadHeadBase = (float*)0x11CFE18;
	static float* fGunSpreadHeadMult = (float*)0x11CEC20;
	static float* fGunSpreadIronSightsBase = (float*)0x11CE2E8;
	static float* fGunSpreadIronSightsMult = (float*)0x11CF16C;
	static float* fGunSpreadNPCArmBase = (float*)0x11CE778;
	static float* fGunSpreadNPCArmMult = (float*)0x11CEA24;
	static float* fGunSpreadRunBase = (float*)0x11CFC78;
	static float* fGunSpreadRunMult = (float*)0x11CF018;
	static float* fGunSpreadSkillBase = (float*)0x11CF360;
	static float* fGunSpreadSkillMult = (float*)0x11CE508;
	static float* fGunSpreadWalkBase = (float*)0x11CF000;
	static float* fGunSpreadWalkMult = (float*)0x11CFACC;
	static float* fGunWobbleChaseDriftTime = (float*)0x11CF58C;
	static float* fGunWobbleMultScope = (float*)0x11CF71C;
	static float* fHCDehydrationRate = (float*)0x11D0C4C;
	static float* fHCFlashTextThreshold = (float*)0x11D0800;
	static float* fHCFullAlphaTextThreshold = (float*)0x11D0C88;
	static float* fHCHalfAlphaTextThreshold = (float*)0x11D05A8;
	static float* fHCRedTextThreshold = (float*)0x11D1330;
	static float* fHCSleepDeprivationRate = (float*)0x11D1444;
	static float* fHCSleepRestorationMod = (float*)0x11D0C28;
	static float* fHCStarvationRate = (float*)0x11D1018;
	static float* fHackLevelMult = (float*)0x11C83C8;
	static float* fHandDamageSkillBase = (float*)0x11CE604;
	static float* fHandDamageSkillMult = (float*)0x11CF09C;
	static float* fHandDamageStrengthBase = (float*)0x11CF208;
	static float* fHandDamageStrengthMult = (float*)0x11CE47C;
	static float* fHandFatigueDamageBase = (float*)0x11CEA00;
	static float* fHandFatigueDamageMult = (float*)0x11CE8D4;
	static float* fHandHealthMax = (float*)0x11CE354;
	static float* fHandHealthMin = (float*)0x11CE640;
	static float* fHandReachMult = (float*)0x11CF1E4;
	static float* fHavokTauRatio = (float*)0x11D1324;
	static float* fHealingRateSleepingBase = (float*)0x11D0200;
	static float* fHealingRateSleepingMult = (float*)0x11D1168;
	static float* fHelloCooldownTime = (float*)0x11D03A4;
	static float* fHitCasterSizeLarge = (float*)0x11CC324;
	static float* fHitCasterSizeSmall = (float*)0x11CC310;
	static float* fHostileActorExteriorDistance = (float*)0x11D0BB8;
	static float* fHostileActorInteriorDistance = (float*)0x11D04B8;
	static float* fHotKeyDownTimer = (float*)0x11D2D88;
	static float* fHotKeyShowTimer = (float*)0x11D27A0;
	static float* fIdleChatterCommentTimer = (float*)0x11CD00C;
	static float* fIdleChatterCommentTimerMax = (float*)0x11CD190;
	static float* fImpactShaderMaxDistance = (float*)0x11D1120;
	static float* fImpactShaderMaxMagnitude = (float*)0x11D08A8;
	static float* fImpactShaderMinMagnitude = (float*)0x11D0620;
	static float* fImprovedDetectModifier = (float*)0x11D0320;
	static float* fIronSightsDOFDistance = (float*)0x11CF8CC;
	static float* fIronSightsDOFRange = (float*)0x11CFD74;
	static float* fIronSightsDOFStrengthCap = (float*)0x11CE6B8;
	static float* fIronSightsDOFSwitchSeconds = (float*)0x11CEDF8;
	static float* fIronSightsFOVTimeChange = (float*)0x11CE874;
	static float* fIronSightsGunMotionBlur = (float*)0x11CE4D8;
	static float* fIronSightsMotionBlur = (float*)0x11CF6A0;
	static float* fItemConditionValueBase = (float*)0x11D0040;
	static float* fItemConditionValueExp = (float*)0x11D0C04;
	static float* fItemConditionValueMult = (float*)0x11D013C;
	static float* fItemDetectionTimer = (float*)0x11D065C;
	static float* fItemPointsMult = (float*)0x11D1A64;
	static float* fItemRepairCostMult = (float*)0x11D115C;
	static float* fJumpDoubleMult = (float*)0x11D127C;
	static float* fJumpFallHeightExponent = (float*)0x11D0D24;
	static float* fJumpFallHeightMin = (float*)0x11CFF98;
	static float* fJumpFallHeightMult = (float*)0x11D1414;
	static float* fJumpFallRiderMult = (float*)0x11D0D9C;
	static float* fJumpFallSkillBase = (float*)0x11D03BC;
	static float* fJumpFallSkillMult = (float*)0x11D0B28;
	static float* fJumpFallVelocityMin = (float*)0x11D01E8;
	static float* fJumpHeightMin = (float*)0x11D0278;
	static float* fJumpMoveBase = (float*)0x11D0740;
	static float* fJumpMoveMult = (float*)0x11D0FB8;
	static float* fJumpSwimmingMult = (float*)0x11D13A8;
	static float* fKarmaDeathPenalty = (float*)0x11C4EE0;
	static float* fKarmaModKillingEvilActor = (float*)0x11CDED8;
	static float* fKarmaModKillingVeryEvilActor = (float*)0x11CD50C;
	static float* fKarmaModMurderingGoodNPC = (float*)0x11CD7A8;
	static float* fKarmaModMurderingNonEvilCreature = (float*)0x11CD168;
	static float* fKarmaModMurderingNonEvilNPC = (float*)0x11CDF70;
	static float* fKarmaModMurderingVeryGoodNPC = (float*)0x11CDCA8;
	static float* fKarmaModStealing = (float*)0x11CDE24;
	static float* fKillCameraCooldown = (float*)0x11D0A58;
	static float* fKillCameraTime = (float*)0x11D0100;
	static float* fKnockbackAgilBase = (float*)0x11CE664;
	static float* fKnockbackAgilMult = (float*)0x11CEA6C;
	static float* fKnockbackDamageBase = (float*)0x11CF9C0;
	static float* fKnockbackDamageMult = (float*)0x11CFA20;
	static float* fKnockbackForceMax = (float*)0x11CF5B0;
	static float* fKnockbackTime = (float*)0x11CFBDC;
	static float* fKnockdownAgilBase = (float*)0x11CE790;
	static float* fKnockdownAgilMult = (float*)0x11CE068;
	static float* fKnockdownBaseHealthThreshold = (float*)0x11CF1A8;
	static float* fKnockdownChance = (float*)0x11CE80C;
	static float* fKnockdownCurrentHealthThreshold = (float*)0x11CEBCC;
	static float* fKnockdownDamageBase = (float*)0x11CEED0;
	static float* fKnockdownDamageMult = (float*)0x11CECD4;
	static float* fLeafRockAmountSwayInfluence = (float*)0x11D5DC8;
	static float* fLeafRockSpeedSwayInfluence = (float*)0x11D5C6C;
	static float* fLeafRockTimeScale = (float*)0x11D5CE0;
	static float* fLeafRustleAmountSwayInfluence = (float*)0x11D5D40;
	static float* fLeafRustleSpeedSwayInfluence = (float*)0x11D5C78;
	static float* fLeafRustleTimeScale = (float*)0x11D5C60;
	static float* fLevelScalingMult = (float*)0x11C9554;
	static float* fLeveledActorMultBoss = (float*)0x11C3A80;
	static float* fLeveledActorMultEasy = (float*)0x11C39E0;
	static float* fLeveledActorMultHard = (float*)0x11C3A14;
	static float* fLeveledActorMultMedium = (float*)0x11C39C8;
	static float* fLeveledLockMult = (float*)0x11C39B8;
	static float* fLoadingWheelScale = (float*)0x11D2ADC;
	static float* fLocalMapMarkerMaxSize = (float*)0x11D42BC;
	static float* fLocalMapMarkerMinSize = (float*)0x11D4568;
	static float* fLocalMapMaxZoom = (float*)0x11D2F68;
	static float* fLocalMapMinZoom = (float*)0x11D4C64;
	static float* fLocalPlayerCursorMaxSize = (float*)0x11D38F8;
	static float* fLocalQuestMarkerMaxSize = (float*)0x11D26C8;
	static float* fLocalQuestMarkerMinSize = (float*)0x11D29D4;
	static float* fLocalfPlayerCursorMinSize = (float*)0x11D32EC;
	static float* fLockLevelBase = (float*)0x11CD800;
	static float* fLockLevelMult = (float*)0x11CDB70;
	static float* fLockPickBreakBase = (float*)0x11CD1B4;
	static float* fLockPickBreakMult = (float*)0x11CD238;
	static float* fLockPickQualityBase = (float*)0x11CDC38;
	static float* fLockPickQualityMult = (float*)0x11CD184;
	static float* fLockSkillBase = (float*)0x11D0554;
	static float* fLockSkillMult = (float*)0x11CD220;
	static float* fLockTrapGoOffBase = (float*)0x11CD4AC;
	static float* fLockTrapGoOffMult = (float*)0x11CD730;
	static float* fLockpickBonusHealth = (float*)0x11D0DE4;
	static float* fLookDownDisableBlinkingAmt = (float*)0x11D57FC;
	static float* fLowLevelNPCBaseHealthMult = (float*)0x11D01B4;
	static float* fMagicAbsorbDistanceReachMult = (float*)0x11D1AAC;
	static float* fMagicAreaBaseCostMult = (float*)0x11D1960;
	static float* fMagicAreaScale = (float*)0x11D1BC0;
	static float* fMagicAreaScaleMax = (float*)0x11D1AD0;
	static float* fMagicAreaScaleMin = (float*)0x11D15A8;
	static float* fMagicArmorPenaltyMax = (float*)0x11D1924;
	static float* fMagicArmorPenaltyMin = (float*)0x11D15D8;
	static float* fMagicBallMaximumDistance = (float*)0x11C3638;
	static float* fMagicBallOptimalDistance = (float*)0x11C36EC;
	static float* fMagicBoltDuration = (float*)0x11D159C;
	static float* fMagicBoltMaximumDistance = (float*)0x11C36D0;
	static float* fMagicBoltOptimalDistance = (float*)0x11C3620;
	static float* fMagicBoltSegmentLength = (float*)0x11D17BC;
	static float* fMagicCEEnchantMagOffset = (float*)0x11D1C44;
	static float* fMagicCasterSkillCostBase = (float*)0x11D16E4;
	static float* fMagicCasterSkillCostMult = (float*)0x11D1798;
	static float* fMagicCloudAreaMin = (float*)0x11D15CC;
	static float* fMagicCloudDurationMin = (float*)0x11D1B78;
	static float* fMagicCloudFindTargetTime = (float*)0x11D17F8;
	static float* fMagicCloudLifeScale = (float*)0x11D1894;
	static float* fMagicCloudSizeScale = (float*)0x11D1BD8;
	static float* fMagicCloudSlowdownRate = (float*)0x11D1ADC;
	static float* fMagicCloudSpeedBase = (float*)0x11D19D0;
	static float* fMagicCloudSpeedScale = (float*)0x11D19F4;
	static float* fMagicCostScale = (float*)0x11D1990;
	static float* fMagicDefaultCEBarterFactor = (float*)0x11C37EC;
	static float* fMagicDefaultCEEnchantFactor = (float*)0x11C36C4;
	static float* fMagicDefaultTouchDistance = (float*)0x11D1A94;
	static float* fMagicDiseaseTransferBase = (float*)0x11D1CBC;
	static float* fMagicDiseaseTransferMult = (float*)0x11D18A0;
	static float* fMagicDispelMagnitudeMult = (float*)0x11D1B24;
	static float* fMagicDurMagBaseCostMult = (float*)0x11D199C;
	static float* fMagicEnchantmentChargeBase = (float*)0x11D15B4;
	static float* fMagicEnchantmentChargeMult = (float*)0x11D196C;
	static float* fMagicEnchantmentDrainBase = (float*)0x11D19AC;
	static float* fMagicEnchantmentDrainMult = (float*)0x11D1C08;
	static float* fMagicExplosionAgilityMult = (float*)0x11D1CD4;
	static float* fMagicExplosionClutterMult = (float*)0x11D1B90;
	static float* fMagicExplosionIncorporealMult = (float*)0x11D16C0;
	static float* fMagicExplosionIncorporealTime = (float*)0x11D15C0;
	static float* fMagicExplosionPowerBase = (float*)0x11D1BB4;
	static float* fMagicExplosionPowerMax = (float*)0x11D1888;
	static float* fMagicExplosionPowerMin = (float*)0x11D1810;
	static float* fMagicExplosionPowerMult = (float*)0x11D1CEC;
	static float* fMagicFatigueDrainBase = (float*)0x11D1C20;
	static float* fMagicFatigueDrainMult = (float*)0x11D1738;
	static float* fMagicFogMaximumDistance = (float*)0x11C3708;
	static float* fMagicFogOptimalDistance = (float*)0x11C3738;
	static float* fMagicLevelMagnitudeMult = (float*)0x11D1708;
	static float* fMagicLightForwardOffset = (float*)0x11D1A88;
	static float* fMagicLightHeightOffset = (float*)0x11D15F0;
	static float* fMagicLightRadiusBase = (float*)0x11D1984;
	static float* fMagicLightSideOffset = (float*)0x11D1A34;
	static float* fMagicMedicineSkillBase = (float*)0x11D17D4;
	static float* fMagicMedicineSkillMult = (float*)0x11D1678;
	static float* fMagicNightEyeAmbient = (float*)0x11D166C;
	static float* fMagicPlayerMinimumInvisibility = (float*)0x11D1B3C;
	static float* fMagicProjectileBaseSpeed = (float*)0x11D16FC;
	static float* fMagicProjectileMaxDistance = (float*)0x11D1D04;
	static float* fMagicRangeTargetCostMult = (float*)0x11D1954;
	static float* fMagicResistActorSkillBase = (float*)0x11D1C38;
	static float* fMagicResistActorSkillMult = (float*)0x11D1A24;
	static float* fMagicResistTargetWillpowerBase = (float*)0x11D1828;
	static float* fMagicResistTargetWillpowerMult = (float*)0x11D19B8;
	static float* fMagicSpellLevelApprenticeMin = (float*)0x11D19C4;
	static float* fMagicSpellLevelCostBase = (float*)0x11D1590;
	static float* fMagicSpellLevelCostMult = (float*)0x11D1B9C;
	static float* fMagicSpellLevelExpertMin = (float*)0x11D1D10;
	static float* fMagicSpellLevelJourneymanMin = (float*)0x11D1CC8;
	static float* fMagicSpellLevelMasterMin = (float*)0x11D1B84;
	static float* fMagicSprayMaximumDistance = (float*)0x11C36AC;
	static float* fMagicSprayOptimalDistance = (float*)0x11C35B8;
	static float* fMagicSunDamageBaseDamage = (float*)0x11D1768;
	static float* fMagicSunDamageMinWeather = (float*)0x11D193C;
	static float* fMagicSunDamagePainInitialDelay = (float*)0x11D1948;
	static float* fMagicSunDamagePainTimer = (float*)0x11D18DC;
	static float* fMagicSunDamageScreenGlowMult = (float*)0x11D1A7C;
	static float* fMagicSunDamageScreenGlowRateDown = (float*)0x11D169C;
	static float* fMagicSunDamageScreenGlowRateUp = (float*)0x11D16D8;
	static float* fMagicSunDamageSunHiddenScale = (float*)0x11D1B6C;
	static float* fMagicSunDamageWaterScale = (float*)0x11D1650;
	static float* fMagicSurvivalSkillBase = (float*)0x11D1858;
	static float* fMagicSurvivalSkillMult = (float*)0x11D1A58;
	static float* fMagicTelekinesiDistanceMult = (float*)0x11D1900;
	static float* fMagicTelekinesisComplexMaxForce = (float*)0x11D1608;
	static float* fMagicTelekinesisComplexObjectDamping = (float*)0x11D172C;
	static float* fMagicTelekinesisComplexSpringDamping = (float*)0x11D18AC;
	static float* fMagicTelekinesisComplexSpringElasticity = (float*)0x11D1840;
	static float* fMagicTelekinesisDistanceMin = (float*)0x11D1D28;
	static float* fMagicTelekinesisLiftPowerMult = (float*)0x11D1930;
	static float* fMagicTelekinesisMaxForce = (float*)0x11D1780;
	static float* fMagicTelekinesisMoveAccelerate = (float*)0x11D1A40;
	static float* fMagicTelekinesisMoveBase = (float*)0x11D1CF8;
	static float* fMagicTelekinesisMoveMax = (float*)0x11D1CB0;
	static float* fMagicTelekinesisObjectDamping = (float*)0x11D1B48;
	static float* fMagicTelekinesisSpringDamping = (float*)0x11D1A0C;
	static float* fMagicTelekinesisSpringElasticity = (float*)0x11D1C80;
	static float* fMagicTelekinesisThrow = (float*)0x11D17EC;
	static float* fMagicTrackingLimit = (float*)0x11D1A00;
	static float* fMagicTrackingLimitComplex = (float*)0x11D165C;
	static float* fMagicTrackingMultBall = (float*)0x11D1C2C;
	static float* fMagicTrackingMultBolt = (float*)0x11D175C;
	static float* fMagicTrackingMultFog = (float*)0x11D15FC;
	static float* fMagicUnitsPerFoot = (float*)0x11D15E4;
	static float* fMagicVACNoPartTargetedMult = (float*)0x11D17B0;
	static float* fMagicVACPartTargetedMult = (float*)0x11D1864;
	static float* fMagickaReturnBase = (float*)0x11D1638;
	static float* fMagickaReturnMult = (float*)0x11D1744;
	static float* fMarksmanFatigueBurnPerSecond = (float*)0x11CF610;
	static float* fMarksmanFatigueBurnPerShot = (float*)0x11CE94C;
	static float* fMasserAngleFadeEnd = (float*)0x11CCC98;
	static float* fMasserAngleFadeStart = (float*)0x11CCCBC;
	static float* fMasserAngleShadowEarlyFade = (float*)0x11CCBA8;
	static float* fMasserSpeed = (float*)0x11CCC00;
	static float* fMasserZOffset = (float*)0x11CCC58;
	static float* fMaxArmorRating = (float*)0x11D1024;
	static float* fMaxRadiationLevel = (float*)0x11D2C44;
	static float* fMaximumWind = (float*)0x11D11F8;
	static float* fMeleeMovementRestrictionsUpdateTime = (float*)0x11CEE64;
	static float* fMinDamMultiplier = (float*)0x11CED50;
	static float* fMinDistanceUseHorse = (float*)0x11D032C;
	static float* fMinFatigue = (float*)0x11D2668;
	static float* fMinGunSpreadValue = (float*)0x11CEB90;
	static float* fMineAgeMax = (float*)0x11CEE10;
	static float* fMineExteriorRadiusMult = (float*)0x11CF7E4;
	static float* fMinesBlinkFast = (float*)0x11CE2D0;
	static float* fMinesBlinkMax = (float*)0x11CE9E8;
	static float* fMinesBlinkSlow = (float*)0x11CEE7C;
	static float* fMinesDelayMin = (float*)0x11CF7B0;
	static float* fMinimumFatigue = (float*)0x11CE11C;
	static float* fMotionBlur = (float*)0x11CF8A8;
	static float* fMountedMaxLookingDown = (float*)0x11CD400;
	static float* fMove2HBigPenalty = (float*)0x11D09B0;
	static float* fMove2HRPenalty = (float*)0x11D08C0;
	static float* fMoveBaseSpeed = (float*)0x11D044C;
	static float* fMoveHeavyArmorPenalty = (float*)0x11D0EB0;
	static float* fMoveLegConditionMult = (float*)0x11D0B4C;
	static float* fMoveMaxFlySpeed = (float*)0x11D0E20;
	static float* fMoveMediumArmorPenalty = (float*)0x11D0028;
	static float* fMoveMinFlySpeed = (float*)0x11D0CC4;
	static float* fMoveNoWeaponMult = (float*)0x11D0C34;
	static float* fMoveOneCrippledLegSpeedMult = (float*)0x11D11BC;
	static float* fMoveRunMult = (float*)0x11D089C;
	static float* fMoveSneakMult = (float*)0x11CFFF8;
	static float* fMoveSwimRunAthleticsMult = (float*)0x11CFF8C;
	static float* fMoveSwimRunBase = (float*)0x11D11A4;
	static float* fMoveSwimWalkAthleticsMult = (float*)0x11D12F4;
	static float* fMoveSwimWalkBase = (float*)0x11D00C4;
	static float* fMoveTwoCrippledLegsSpeedMult = (float*)0x11D026C;
	static float* fMovementNearTargetAvoidCost = (float*)0x11CF124;
	static float* fMovementNearTargetAvoidRadius = (float*)0x11CF4E4;
	static float* fMovementTargetAvoidCost = (float*)0x11CFCFC;
	static float* fMovementTargetAvoidRadius = (float*)0x11CE64C;
	static float* fMovementTargetAvoidRadiusMult = (float*)0x11CF384;
	static float* fNPCAttributeHealthMult = (float*)0x11D0A40;
	static float* fNPCBaseMagickaMult = (float*)0x11D07E8;
	static float* fNPCGeneticVariation = (float*)0x11CB7A4;
	static float* fNPCMaxGunWobbleAngle = (float*)0x11CE038;
	static float* fNonAttackGunWobbleMult = (float*)0x11CEC38;
	static float* fNoteGreyOutTime = (float*)0x11D47C0;
	static float* fNoticeTextTimePerCharacter = (float*)0x11D217C;
	static float* fObjectHitH2HReach = (float*)0x11D0EC8;
	static float* fObjectHitOneHandReach = (float*)0x11D112C;
	static float* fObjectHitTwoHandReach = (float*)0x11D0488;
	static float* fObjectHitWeaponReach = (float*)0x11D1054;
	static float* fObjectMotionBlur = (float*)0x11CF244;
	static float* fObjectWeightPickupDetectionMult = (float*)0x11CDF88;
	static float* fOverShoulderFOV = (float*)0x11CDA5C;
	static float* fOverShoulderOffsetPointX = (float*)0x11CDA38;
	static float* fOverShoulderOffsetPointY = (float*)0x11CDFB8;
	static float* fOverShoulderOffsetPointZ = (float*)0x11CD320;
	static float* fOverShoulderOffsetPointZoomingX = (float*)0x11CD784;
	static float* fOverShoulderOffsetPointZoomingY = (float*)0x11CDF54;
	static float* fOverShoulderOffsetPointZoomingZ = (float*)0x11CD178;
	static float* fOverShoulderPosX = (float*)0x11CDC60;
	static float* fOverShoulderPosZ = (float*)0x11CDC48;
	static float* fOverShoulderRotMult = (float*)0x11CDE00;
	static float* fOverShoulderStartBlendDist = (float*)0x11CD848;
	static float* fPCBaseHealthMult = (float*)0x11D10C0;
	static float* fPCBaseMagickaMult = (float*)0x11D13D8;
	static float* fPCTurnAnimDeltaThreshold = (float*)0x11CD430;
	static float* fPCTurnAnimMinTime = (float*)0x11CDF2C;
	static float* fPackRatModifier = (float*)0x11C64AC;
	static float* fPackRatThreshold = (float*)0x11C647C;
	static float* fPainDelay = (float*)0x11D0698;
	static float* fPathPointTurningSpeed = (float*)0x11D03F8;
	static float* fPathPointZDistanceAllowance = (float*)0x11D09D4;
	static float* fPathingLargeActorRadius = (float*)0x11D6EF4;
	static float* fPerceptionMult = (float*)0x11CDAA4;
	static float* fPerkAthleticsApprenticeFatigueMult = (float*)0x11D0D60;
	static float* fPerkAthleticsExpertFatigueMult = (float*)0x11D10F0;
	static float* fPerkAthleticsJourneymanFatigueMult = (float*)0x11D0794;
	static float* fPerkAthleticsMasterFatigueMult = (float*)0x11D0CD0;
	static float* fPerkAthleticsNoviceFatigueMult = (float*)0x11D14BC;
	static float* fPerkHeavyArmorExpertSpeedMult = (float*)0x11D09F8;
	static float* fPerkHeavyArmorJourneymanDamageMult = (float*)0x11D06E0;
	static float* fPerkHeavyArmorMasterSpeedMult = (float*)0x11D13C0;
	static float* fPerkHeavyArmorNoviceDamageMult = (float*)0x11D1138;
	static float* fPerkHeavyArmorSinkGravityMult = (float*)0x11D0458;
	static float* fPerkJumpFatigueExpertMult = (float*)0x11D0F04;
	static float* fPerkLightArmorExpertSpeedMult = (float*)0x11D0160;
	static float* fPerkLightArmorJourneymanDamageMult = (float*)0x11D0860;
	static float* fPerkLightArmorMasterRatingMult = (float*)0x11CF520;
	static float* fPerkLightArmorNoviceDamageMult = (float*)0x11D0AAC;
	static float* fPerkSneakAttackMarksmanApprenticeMult = (float*)0x11CE128;
	static float* fPerkSneakAttackMarksmanExpertMult = (float*)0x11CED20;
	static float* fPerkSneakAttackMarksmanJourneymanMult = (float*)0x11CFBE8;
	static float* fPerkSneakAttackMarksmanMasterMult = (float*)0x11CE2DC;
	static float* fPerkSneakAttackMarksmanNoviceMult = (float*)0x11CF634;
	static float* fPerkSneakAttackMeleeApprenticeMult = (float*)0x11CF130;
	static float* fPerkSneakAttackMeleeExpertMult = (float*)0x11CFDB4;
	static float* fPerkSneakAttackMeleeJourneymanMult = (float*)0x11CE40C;
	static float* fPerkSneakAttackMeleeMasterMult = (float*)0x11CE258;
	static float* fPerkSneakAttackMeleeNoviceMult = (float*)0x11CEA0C;
	static float* fPersAdmireAggr = (float*)0x11D0154;
	static float* fPersAdmireConf = (float*)0x11D0878;
	static float* fPersAdmireEner = (float*)0x11D0E08;
	static float* fPersAdmireIntel = (float*)0x11D1300;
	static float* fPersAdmirePers = (float*)0x11D05C0;
	static float* fPersAdmireResp = (float*)0x11D1294;
	static float* fPersAdmireStre = (float*)0x11D0FC4;
	static float* fPersAdmireWillp = (float*)0x11D0518;
	static float* fPersBoastAggr = (float*)0x11D07A0;
	static float* fPersBoastConf = (float*)0x11D0004;
	static float* fPersBoastEner = (float*)0x11D0950;
	static float* fPersBoastIntel = (float*)0x11D059C;
	static float* fPersBoastPers = (float*)0x11D1198;
	static float* fPersBoastResp = (float*)0x11D0ED4;
	static float* fPersBoastStre = (float*)0x11D0614;
	static float* fPersBoastWillp = (float*)0x11D0FD0;
	static float* fPersBullyAggr = (float*)0x11CFFBC;
	static float* fPersBullyConf = (float*)0x11D0B00;
	static float* fPersBullyEner = (float*)0x11D0938;
	static float* fPersBullyIntel = (float*)0x11D04F4;
	static float* fPersBullyPers = (float*)0x11D1474;
	static float* fPersBullyResp = (float*)0x11D04A0;
	static float* fPersBullyStre = (float*)0x11D0B58;
	static float* fPersBullyWillp = (float*)0x11D03D4;
	static float* fPersJokeAggr = (float*)0x11D09C8;
	static float* fPersJokeConf = (float*)0x11D02CC;
	static float* fPersJokeEner = (float*)0x11D13B4;
	static float* fPersJokeIntel = (float*)0x11D02C0;
	static float* fPersJokePers = (float*)0x11D08E4;
	static float* fPersJokeResp = (float*)0x11D14A4;
	static float* fPersJokeStre = (float*)0x11D02A8;
	static float* fPersJokeWillp = (float*)0x11D0118;
	static float* fPersuasionAccuracyMaxDisposition = (float*)0x11D1150;
	static float* fPersuasionAccuracyMaxSelect = (float*)0x11CFEE4;
	static float* fPersuasionAccuracyMinDispostion = (float*)0x11D06B0;
	static float* fPersuasionAccuracyMinSelect = (float*)0x11D04E8;
	static float* fPersuasionBaseValueMaxDisposition = (float*)0x11CFF80;
	static float* fPersuasionBaseValueMaxSelect = (float*)0x11D05B4;
	static float* fPersuasionBaseValueMinDispostion = (float*)0x11D1174;
	static float* fPersuasionBaseValueMinSelect = (float*)0x11CFFE0;
	static float* fPersuasionBaseValueShape = (float*)0x11D0DD8;
	static float* fPersuasionMaxDisposition = (float*)0x11D0548;
	static float* fPersuasionMaxInput = (float*)0x11D0094;
	static float* fPersuasionMaxSelect = (float*)0x11D02FC;
	static float* fPersuasionMinDispostion = (float*)0x11CFFD4;
	static float* fPersuasionMinInput = (float*)0x11D02D8;
	static float* fPersuasionMinPercentCircle = (float*)0x11D0B64;
	static float* fPersuasionMinSelect = (float*)0x11D13F0;
	static float* fPersuasionShape = (float*)0x11D0EF8;
	static float* fPhysicsDamage1Damage = (float*)0x11CF604;
	static float* fPhysicsDamage1Mass = (float*)0x11CFB3C;
	static float* fPhysicsDamage1SpeedMin = (float*)0x11CFD68;
	static float* fPhysicsDamage2Damage = (float*)0x11CF930;
	static float* fPhysicsDamage2Mass = (float*)0x11CE718;
	static float* fPhysicsDamage2SpeedMin = (float*)0x11CE158;
	static float* fPhysicsDamage3Damage = (float*)0x11CE97C;
	static float* fPhysicsDamage3Mass = (float*)0x11CFA8C;
	static float* fPhysicsDamage3SpeedMin = (float*)0x11CE7A8;
	static float* fPhysicsDamageSpeedBase = (float*)0x11CF300;
	static float* fPhysicsDamageSpeedMin = (float*)0x11CE760;
	static float* fPhysicsDamageSpeedMult = (float*)0x11CE988;
	static float* fPickBreakSecs = (float*)0x11D41CC;
	static float* fPickLevelBase = (float*)0x11CD9EC;
	static float* fPickLevelMult = (float*)0x11CD1C0;
	static float* fPickNumBase = (float*)0x11CDB64;
	static float* fPickNumMult = (float*)0x11CDAC8;
	static float* fPickPocketActorSkillBase = (float*)0x11CDEFC;
	static float* fPickPocketActorSkillMult = (float*)0x11CD8E8;
	static float* fPickPocketAmountBase = (float*)0x11CDA8C;
	static float* fPickPocketAmountMult = (float*)0x11CD8AC;
	static float* fPickPocketMaxChance = (float*)0x11CDA44;
	static float* fPickPocketMinChance = (float*)0x11CE000;
	static float* fPickPocketTargetSkillBase = (float*)0x11CD490;
	static float* fPickPocketTargetSkillMult = (float*)0x11CDECC;
	static float* fPickSpring1 = (float*)0x11CD0CC;
	static float* fPickSpring2 = (float*)0x11CD8B8;
	static float* fPickSpring3 = (float*)0x11CD33C;
	static float* fPickSpring4 = (float*)0x11CD40C;
	static float* fPickSpring5 = (float*)0x11CD884;
	static float* fPickUpWeaponDelay = (float*)0x11CCF48;
	static float* fPickupItemDistanceFudge = (float*)0x11CF918;
	static float* fPickupWeaponDistanceMinMaxDPSMult = (float*)0x11CE800;
	static float* fPickupWeaponMeleeDistanceMax = (float*)0x11CE464;
	static float* fPickupWeaponMeleeDistanceMin = (float*)0x11CF324;
	static float* fPickupWeaponMeleeWeaponDPSMult = (float*)0x11CF0CC;
	static float* fPickupWeaponMinDPSImprovementPercent = (float*)0x11CFB70;
	static float* fPickupWeaponRangedDistanceMax = (float*)0x11CEF0C;
	static float* fPickupWeaponRangedDistanceMin = (float*)0x11CFB48;
	static float* fPickupWeaponRangedMeleeDPSRatioThreshold = (float*)0x11CE264;
	static float* fPickupWeaponTargetUnreachableDistanceMult = (float*)0x11CF90C;
	static float* fPickupWeaponUnarmedDistanceMax = (float*)0x11CEC50;
	static float* fPickupWeaponUnarmedDistanceMin = (float*)0x11CEEA0;
	static float* fPlayerAmmoSwapTimer = (float*)0x11CD15C;
	static float* fPlayerDeathReloadTime = (float*)0x11CD630;
	static float* fPlayerDetectActorValue = (float*)0x11D13CC;
	static float* fPlayerDropDistance = (float*)0x11D062C;
	static float* fPlayerHealthHeartbeatFast = (float*)0x11D04AC;
	static float* fPlayerHealthHeartbeatSlow = (float*)0x11D00B8;
	static float* fPlayerMaxResistance = (float*)0x11D0ADC;
	static float* fPlayerPipBoyLightTimer = (float*)0x11CD09C;
	static float* fPlayerTargetCombatDistance = (float*)0x11CF448;
	static float* fPlayerTeleportFadeSeconds = (float*)0x11CD7CC;
	static float* fPlayerWeaponReloadTimer = (float*)0x11CDFD0;
	static float* fPotionGoldValueMult = (float*)0x11D0F70;
	static float* fPotionMortPestleMult = (float*)0x11D0BC4;
	static float* fPotionT1AleDurMult = (float*)0x11D00A0;
	static float* fPotionT1AleMagMult = (float*)0x11D02B4;
	static float* fPotionT1CalDurMult = (float*)0x11D133C;
	static float* fPotionT1CalMagMult = (float*)0x11D0230;
	static float* fPotionT1MagMult = (float*)0x11D00E8;
	static float* fPotionT1RetDurMult = (float*)0x11D056C;
	static float* fPotionT1RetMagMult = (float*)0x11D06BC;
	static float* fPotionT2AleDurMult = (float*)0x11D14EC;
	static float* fPotionT2CalDurMult = (float*)0x11D1528;
	static float* fPotionT2RetDurMult = (float*)0x11D0398;
	static float* fPotionT3AleMagMult = (float*)0x11CFF44;
	static float* fPotionT3CalMagMult = (float*)0x11D010C;
	static float* fPotionT3RetMagMult = (float*)0x11D0F40;
	static float* fPowerAttackDelay = (float*)0x11CDDAC;
	static float* fPowerAttackFatiguePenalty = (float*)0x11CF39C;
	static float* fProjectileCollisionImpulseScale = (float*)0x11CE228;
	static float* fProjectileDefaultTracerRange = (float*)0x11D0A34;
	static float* fProjectileInventoryGrenadeFreakoutTime = (float*)0x11CED8C;
	static float* fProjectileInventoryGrenadeTimer = (float*)0x11CE6D0;
	static float* fProjectileKnockMinMass = (float*)0x11CF118;
	static float* fProjectileKnockMultBiped = (float*)0x11CECB0;
	static float* fProjectileKnockMultClutter = (float*)0x11CE79C;
	static float* fProjectileKnockMultProp = (float*)0x11CF9D8;
	static float* fProjectileKnockMultTrap = (float*)0x11CE3E8;
	static float* fProjectileMaxDistance = (float*)0x11CE0DC;
	static float* fProjectileReorientTracerMin = (float*)0x11CFF38;
	static float* fQuestCinematicCharacterFadeIn = (float*)0x11D223C;
	static float* fQuestCinematicCharacterFadeInDelay = (float*)0x11D268C;
	static float* fQuestCinematicCharacterFadeOut = (float*)0x11D4F34;
	static float* fQuestCinematicCharacterRemain = (float*)0x11D4D18;
	static float* fQuestCinematicObjectiveFadeIn = (float*)0x11D2C98;
	static float* fQuestCinematicObjectiveFadeInDelay = (float*)0x11D4CC4;
	static float* fQuestCinematicObjectiveFadeOut = (float*)0x11D2B60;
	static float* fQuestCinematicObjectivePauseTime = (float*)0x11D3B6C;
	static float* fQuestCinematicObjectiveScrollTime = (float*)0x11D2728;
	static float* fRaceGeneticVariation = (float*)0x11CB994;
	static float* fRadiationAccumulationRate = (float*)0x11D0F1C;
	static float* fRadiationAvoidThreshold = (float*)0x11CD878;
	static float* fRadiationDecayRate = (float*)0x11D1318;
	static float* fRadiationReevaluationRate = (float*)0x11D0DB4;
	static float* fRadiationResistanceAvoidLevel = (float*)0x11CDCCC;
	static float* fRandomDoorDistance = (float*)0x11C939C;
	static float* fReEquipArmorTime = (float*)0x11CDA68;
	static float* fRechargeGoldMult = (float*)0x11D151C;
	static float* fReflectedAbsorbChanceReduction = (float*)0x11D1584;
	static float* fRemoteCombatMissedAttack = (float*)0x11CDB7C;
	static float* fRemoveExcessComplexDeadTime = (float*)0x11D1534;
	static float* fRemoveExcessDeadTime = (float*)0x11D0A88;
	static float* fRepairMax = (float*)0x11CFFA4;
	static float* fRepairMin = (float*)0x11D0884;
	static float* fRepairScavengeMult = (float*)0x11D074C;
	static float* fRepairSkillBase = (float*)0x11D0FF4;
	static float* fRepairSkillMax = (float*)0x11D0190;
	static float* fReputationBumpAverage = (float*)0x11CBA74;
	static float* fReputationBumpMajor = (float*)0x11CBC58;
	static float* fReputationBumpMinor = (float*)0x11CBCCC;
	static float* fReputationBumpVeryMajor = (float*)0x11CBB74;
	static float* fReputationBumpVeryMinor = (float*)0x11CBC8C;
	static float* fReputationMajorCrimeNeg = (float*)0x11CBAFC;
	static float* fReputationMinorCrimeNeg = (float*)0x11CBB20;
	static float* fReputationThresholdOne = (float*)0x11CBA80;
	static float* fReputationThresholdThree = (float*)0x11CBD6C;
	static float* fReputationThresholdTwo = (float*)0x11CBC74;
	static float* fRockitDamageBonusWeightMin = (float*)0x11CF6B8;
	static float* fRockitDamageBonusWeightMult = (float*)0x11CED74;
	static float* fRumbleBlockStrength = (float*)0x11D007C;
	static float* fRumbleBlockTime = (float*)0x11CFEB0;
	static float* fRumbleHitBlockedStrength = (float*)0x11D100C;
	static float* fRumbleHitBlockedTime = (float*)0x11D098C;
	static float* fRumbleHitStrength = (float*)0x11D0B34;
	static float* fRumbleHitTime = (float*)0x11D0680;
	static float* fRumblePainStrength = (float*)0x11D0F4C;
	static float* fRumblePainTime = (float*)0x11D050C;
	static float* fRumbleShakeRadiusMult = (float*)0x11D0B40;
	static float* fRumbleShakeTimeMult = (float*)0x11D0650;
	static float* fRumbleStruckStrength = (float*)0x11D1378;
	static float* fRumbleStruckTime = (float*)0x11D0AD0;
	static float* fRunningSpreadPenalty = (float*)0x11CE834;
	static float* fSandBoxExtraDialogueRange = (float*)0x11CCF3C;
	static float* fSandBoxSearchRadius = (float*)0x11CD3F4;
	static float* fSandboxBreakfastMax = (float*)0x11CD9A0;
	static float* fSandboxBreakfastMin = (float*)0x11CDEB4;
	static float* fSandboxDinnerMax = (float*)0x11CD2A4;
	static float* fSandboxDinnerMin = (float*)0x11CD0DC;
	static float* fSandboxDurationBase = (float*)0x11CDC78;
	static float* fSandboxDurationMultEating = (float*)0x11CD394;
	static float* fSandboxDurationMultFurniture = (float*)0x11CDF94;
	static float* fSandboxDurationMultIdleMarker = (float*)0x11CD59C;
	static float* fSandboxDurationMultWandering = (float*)0x11CD948;
	static float* fSandboxDurationRangeMult = (float*)0x11CD1D8;
	static float* fSandboxEnergyMult = (float*)0x11CDC14;
	static float* fSandboxEnergyMultEating = (float*)0x11CDC54;
	static float* fSandboxEnergyMultFurniture = (float*)0x11CDB94;
	static float* fSandboxEnergyMultIdleMarker = (float*)0x11CD024;
	static float* fSandboxEnergyMultWandering = (float*)0x11CD60C;
	static float* fSandboxLunchMax = (float*)0x11CDE48;
	static float* fSandboxLunchMin = (float*)0x11CD9AC;
	static float* fSandboxMealDurationMax = (float*)0x11CDB1C;
	static float* fSandboxMealDurationMin = (float*)0x11CD9C8;
	static float* fSandboxSleepDurationMax = (float*)0x11CCF74;
	static float* fSandboxSleepDurationMin = (float*)0x11CD370;
	static float* fSandboxSleepStartMax = (float*)0x11CD590;
	static float* fSandboxSleepStartMin = (float*)0x11CD70C;
	static float* fSayOncePerDayInfoTimer = (float*)0x11D0AF4;
	static float* fScrollCostMult = (float*)0x11D178C;
	static float* fSearchPackageDistanceToTarget = (float*)0x11CDA80;
	static float* fSearchPackageTimer = (float*)0x11CD6DC;
	static float* fSecondsBetweenWindowUpdate = (float*)0x11CCCAC;
	static float* fSecundaAngleFadeEnd = (float*)0x11CCBEC;
	static float* fSecundaAngleFadeStart = (float*)0x11CCB9C;
	static float* fSecundaAngleShadowEarlyFade = (float*)0x11CCC68;
	static float* fSecundaSpeed = (float*)0x11CCBD0;
	static float* fSecundaZOffset = (float*)0x11CCC80;
	static float* fSeenDataUpdateRadius = (float*)0x11CA098;
	static float* fShaderShadowUpdateDistance = (float*)0x11CCF98;
	static float* fShockBoltGrowWidth = (float*)0x11D1B30;
	static float* fShockBoltSmallWidth = (float*)0x11D1614;
	static float* fShockBoltsLength = (float*)0x11D1AA0;
	static float* fShockBoltsRadius = (float*)0x11D162C;
	static float* fShockBoltsRadiusStrength = (float*)0x11D1BF0;
	static float* fShockBranchBoltsRadius = (float*)0x11D1690;
	static float* fShockBranchBoltsRadiusStrength = (float*)0x11D17A4;
	static float* fShockBranchLifetime = (float*)0x11D1B18;
	static float* fShockBranchSegmentLength = (float*)0x11D16B4;
	static float* fShockBranchSegmentVariance = (float*)0x11D18C4;
	static float* fShockCastVOffset = (float*)0x11D1AE8;
	static float* fShockCoreColorB = (float*)0x11D18F4;
	static float* fShockCoreColorG = (float*)0x11D190C;
	static float* fShockCoreColorR = (float*)0x11D1BE4;
	static float* fShockGlowColorB = (float*)0x11D1CE0;
	static float* fShockGlowColorG = (float*)0x11D19DC;
	static float* fShockGlowColorR = (float*)0x11D1C50;
	static float* fShockSegmentLength = (float*)0x11D1750;
	static float* fShockSegmentVariance = (float*)0x11D16CC;
	static float* fShockSubSegmentVariance = (float*)0x11D17C8;
	static float* fSittingMaxLookingDown = (float*)0x11CD8D0;
	static float* fSkillUseExp = (float*)0x11D1048;
	static float* fSkillUseFactor = (float*)0x11D0064;
	static float* fSkillUseMajorMult = (float*)0x11D0944;
	static float* fSkillUseMinorMult = (float*)0x11D1450;
	static float* fSkillUseSpecMult = (float*)0x11D0F10;
	static float* fSneakActionMult = (float*)0x11CD084;
	static float* fSneakAlertMod = (float*)0x11CDFC4;
	static float* fSneakAmbushNonTargetMod = (float*)0x11CD1E4;
	static float* fSneakAmbushTargetMod = (float*)0x11CDBFC;
	static float* fSneakBaseValue = (float*)0x11CD7E8;
	static float* fSneakBootWeightBase = (float*)0x11CD25C;
	static float* fSneakBootWeightMult = (float*)0x11CDC84;
	static float* fSneakCombatMod = (float*)0x11CDBD8;
	static float* fSneakDistanceAttenuationExponent = (float*)0x11CD308;
	static float* fSneakExteriorDistanceMult = (float*)0x11CDCC0;
	static float* fSneakLightMoveMult = (float*)0x11CDD1C;
	static float* fSneakLightMult = (float*)0x11CD090;
	static float* fSneakLightRunMult = (float*)0x11CD2E0;
	static float* fSneakLostMin = (float*)0x11CDA50;
	static float* fSneakMaxDistance = (float*)0x11CD7DC;
	static float* fSneakNoticeMin = (float*)0x11D3CBC;
	static float* fSneakNoticedMin = (float*)0x11CD460;
	static float* fSneakPerceptionSkillMax = (float*)0x11CDDA0;
	static float* fSneakPerceptionSkillMin = (float*)0x11CDF08;
	static float* fSneakRunningMult = (float*)0x11CD14C;
	static float* fSneakSeenMin = (float*)0x11CDF14;
	static float* fSneakSizeBase = (float*)0x11CD654;
	static float* fSneakSkillMult = (float*)0x11CDA08;
	static float* fSneakSleepBonus = (float*)0x11CD778;
	static float* fSneakSoundLosMult = (float*)0x11CD2EC;
	static float* fSneakSoundsMult = (float*)0x11CE028;
	static float* fSneakStealthBoyMult = (float*)0x11CD314;
	static float* fSneakUnseenMin = (float*)0x11CDE60;
	static float* fSortActorDistanceListTimer = (float*)0x11CD8F4;
	static float* fSpeechAutoSuccessThreshold = (float*)0x11D00F4;
	static float* fSpeechChallengeDispositionBase = (float*)0x11D0A28;
	static float* fSpeechChallengeDispositionMultiplier = (float*)0x11D1114;
	static float* fSpeechChallengeFailureBase = (float*)0x11CFF20;
	static float* fSpeechChallengeFailureMultiplier = (float*)0x11D14D4;
	static float* fSpeechChallengeMultiplier = (float*)0x11D0C94;
	static float* fSpeechChallengeSpeechBase = (float*)0x11D07C4;
	static float* fSpeechCraftBase = (float*)0x11D0998;
	static float* fSpeechCraftMult = (float*)0x11D14B0;
	static float* fSpeechDelay = (float*)0x11D578C;
	static float* fSpellCastingDetectionHitActorMod = (float*)0x11CD0F4;
	static float* fSpellCastingDetectionMod = (float*)0x11CDD4C;
	static float* fSpellmakingGoldMult = (float*)0x11D18E8;
	static float* fSplashScale1 = (float*)0x11D145C;
	static float* fSplashScale2 = (float*)0x11D0130;
	static float* fSplashScale3 = (float*)0x11D0920;
	static float* fSplashSoundHeavy = (float*)0x11D0C7C;
	static float* fSplashSoundLight = (float*)0x11D0314;
	static float* fSplashSoundMedium = (float*)0x11D07F4;
	static float* fSplashSoundOutMult = (float*)0x11D0AB8;
	static float* fSplashSoundTimer = (float*)0x11D1360;
	static float* fSplashSoundVelocityMult = (float*)0x11D00AC;
	static float* fSprayDecalsDistance = (float*)0x11C581C;
	static float* fSprayDecalsGravity = (float*)0x11C5850;
	static float* fStandingSpreadPenalty = (float*)0x11CF64C;
	static float* fStarsRotateDays = (float*)0x11CCE10;
	static float* fStarsRotateXAxis = (float*)0x11CCDC8;
	static float* fStarsRotateYAxis = (float*)0x11CCE34;
	static float* fStarsRotateZAxis = (float*)0x11CCDE0;
	static float* fStatsHealthLevelMult = (float*)0x11D0824;
	static float* fStatsHealthStartMult = (float*)0x11D103C;
	static float* fSubSegmentVariance = (float*)0x11D1978;
	static float* fSubmergedAngularDamping = (float*)0x11D0584;
	static float* fSubmergedLODDistance = (float*)0x11D05D8;
	static float* fSubmergedLinearDampingH = (float*)0x11D0EEC;
	static float* fSubmergedLinearDampingV = (float*)0x11D047C;
	static float* fSubmergedMaxSpeed = (float*)0x11D0CF4;
	static float* fSubmergedMaxWaterDistance = (float*)0x11D124C;
	static float* fSubtitleSpeechDelay = (float*)0x11D20D4;
	static float* fSunAlphaTransTime = (float*)0x11CCEA8;
	static float* fSunMinimumGlareScale = (float*)0x11CCEC4;
	static float* fSunReduceGlareSpeed = (float*)0x11CCEF0;
	static float* fSunXExtreme = (float*)0x11CCE98;
	static float* fSunYExtreme = (float*)0x11CCF10;
	static float* fSunZExtreme = (float*)0x11CCEB8;
	static float* fSwimRadiationDamageMult = (float*)0x11D0464;
	static float* fTakeBackTimerSetting = (float*)0x11CDC90;
	static float* fTargetMovedCoveredMoveRepathLength = (float*)0x11CF7BC;
	static float* fTargetMovedRepathLength = (float*)0x11CE498;
	static float* fTargetMovedRepathLengthLow = (float*)0x11CE658;
	static float* fTargetSearchRadius = (float*)0x11D65B0;
	static float* fThrowingStrengthPenalty = (float*)0x11CF9CC;
	static float* fTorchEvaluationTimer = (float*)0x11D0C10;
	static float* fTorchLightLevelInterior = (float*)0x11D0D00;
	static float* fTorchLightLevelMorning = (float*)0x11D0218;
	static float* fTorchLightLevelNight = (float*)0x11D142C;
	static float* fTrackDeadZoneXY = (float*)0x11D58A4;
	static float* fTrackDeadZoneZ = (float*)0x11D5978;
	static float* fTrackEyeXY = (float*)0x11D5954;
	static float* fTrackEyeZ = (float*)0x11D58F8;
	static float* fTrackFudgeXY = (float*)0x11D5844;
	static float* fTrackFudgeZ = (float*)0x11D5854;
	static float* fTrackJustAcquiredDuration = (float*)0x11D5760;
	static float* fTrackMaxZ = (float*)0x11D57F0;
	static float* fTrackMinZ = (float*)0x11D5774;
	static float* fTrackSpeed = (float*)0x11D5928;
	static float* fTrackXY = (float*)0x11D588C;
	static float* fTrainingCostMult = (float*)0x11CFF74;
	static float* fTreeFarDistanceBase = (float*)0x11D5D78;
	static float* fTreeNearDistanceBase = (float*)0x11D5D68;
	static float* fTreeSizeConversion = (float*)0x11D5D34;
	static float* fTreeWindVariance = (float*)0x11D5DA8;
	static float* fTurboTimeMultiplier = (float*)0x11D0FAC;
	static float* fUnaimedSpreadPenalty = (float*)0x11CEDD4;
	static float* fUnarmedCreatureDPSMult = (float*)0x11CF6C4;
	static float* fUnarmedDamageMult = (float*)0x11CF814;
	static float* fUnarmedNPCDPSMult = (float*)0x11CFBF4;
	static float* fUnderwaterFullDepth = (float*)0x11CCC44;
	static float* fUpdateInterval = (float*)0x11D5E68;
	static float* fUpperCutAPCost = (float*)0x11D14F8;
	static float* fUpperCutSkillChance = (float*)0x11D10FC;
	static float* fUpperCutThreshold = (float*)0x11D1384;
	static float* fUpperCutVatsMultiplier = (float*)0x11D0428;
	static float* fVATSAutomaticMeleeDamageMult = (float*)0x11CF5D4;
	static float* fVATSCamTransRBDownStart = (float*)0x11CE6DC;
	static float* fVATSCamTransRBRampDown = (float*)0x11CF1FC;
	static float* fVATSCamTransRBRampup = (float*)0x11CE568;
	static float* fVATSCamTransRBStart = (float*)0x11CE428;
	static float* fVATSCamTransRBStrengthCap = (float*)0x11CFB08;
	static float* fVATSCamZoomInTime = (float*)0x11D4A30;
	static float* fVATSCameraCutAwayDistance = (float*)0x11CA7D4;
	static float* fVATSCameraDollyMin = (float*)0x11CA770;
	static float* fVATSCameraDollyTime = (float*)0x11CA7A0;
	static float* fVATSCameraEffectVolume = (float*)0x11CA7C4;
	static float* fVATSCameraMaxTime = (float*)0x11CE8C8;
	static float* fVATSCameraMinTime = (float*)0x11CE36C;
	static float* fVATSCrippledArmThrowingPenalty = (float*)0x11CF694;
	static float* fVATSCriticalChanceBonus = (float*)0x11CE470;
	static float* fVATSDOFRange = (float*)0x11CFE24;
	static float* fVATSDOFStrengthCap = (float*)0x11CE928;
	static float* fVATSDOFSwitchSeconds = (float*)0x11CF4FC;
	static float* fVATSDamageToWeaponMult = (float*)0x11CE5D4;
	static float* fVATSDestructibleMult = (float*)0x11CE700;
	static float* fVATSFortuneOdds = (float*)0x11CE330;
	static float* fVATSGrenadeChanceMult = (float*)0x11CF8C0;
	static float* fVATSGrenadeDistAimZMult = (float*)0x11CE76C;
	static float* fVATSGrenadeRangeMin = (float*)0x11CFBAC;
	static float* fVATSGrenadeRangeMult = (float*)0x11CED04;
	static float* fVATSGrenadeSkillFactor = (float*)0x11CF52C;
	static float* fVATSGrenadeSuccessExplodeTimer = (float*)0x11CE514;
	static float* fVATSGrenadeSuccessMaxDistance = (float*)0x11CFD20;
	static float* fVATSGrenadeTargetArea = (float*)0x11CEB24;
	static float* fVATSH2HWarpDistanceMult = (float*)0x11CF13C;
	static float* fVATSHitChanceMult = (float*)0x11CF508;
	static float* fVATSImageSpaceTransitionTime = (float*)0x11CF704;
	static float* fVATSLimbSelectCamPanTime = (float*)0x11D458C;
	static float* fVATSMaxChance = (float*)0x11CE110;
	static float* fVATSMaxEngageDistance = (float*)0x11D45BC;
	static float* fVATSMeleeArmConditionBase = (float*)0x11CE1C8;
	static float* fVATSMeleeArmConditionMult = (float*)0x11CED98;
	static float* fVATSMeleeChanceMult = (float*)0x11CF090;
	static float* fVATSMeleeMaxDistance = (float*)0x11CF67C;
	static float* fVATSMeleeReachMult = (float*)0x11CE198;
	static float* fVATSMeleeWarpDistanceMult = (float*)0x11CF74C;
	static float* fVATSMoveCameraLimbMult = (float*)0x11CE8EC;
	static float* fVATSMoveCameraLimbPercent = (float*)0x11CEF30;
	static float* fVATSMoveCameraMaxSpeed = (float*)0x11CEC44;
	static float* fVATSMoveCameraXPercent = (float*)0x11CE670;
	static float* fVATSMoveCameraYPercent = (float*)0x11CE8BC;
	static float* fVATSParalyzePalmChance = (float*)0x11CE8E0;
	static float* fVATSPlaybackDelay = (float*)0x11CE33C;
	static float* fVATSPlayerDamageMult = (float*)0x11CE9F4;
	static float* fVATSPlayerTimeUpdateMult = (float*)0x11CF378;
	static float* fVATSRadialRampup = (float*)0x11CEC08;
	static float* fVATSRadialStart = (float*)0x11CF390;
	static float* fVATSRadialStrength = (float*)0x11CFCCC;
	static float* fVATSRangeSpreadMax = (float*)0x11CFE54;
	static float* fVATSScreenPercentFactor = (float*)0x11CFAB4;
	static float* fVATSShotBurstTime = (float*)0x11CF640;
	static float* fVATSShotLongBurstTime = (float*)0x11CF10C;
	static float* fVATSSkillFactor = (float*)0x11CE9A0;
	static float* fVATSSmartCameraCheckHeight = (float*)0x11D1204;
	static float* fVATSSmartCameraCheckStepCount = (float*)0x11D0854;
	static float* fVATSSmartCameraCheckStepDistance = (float*)0x11D09EC;
	static float* fVATSSpreadMult = (float*)0x11CFE0C;
	static float* fVATSStealthMult = (float*)0x11CEE58;
	static float* fVATSStrangerDistance = (float*)0x11CE88C;
	static float* fVATSStrangerOdds = (float*)0x11CE73C;
	static float* fVATSTargetActorHeightPanMult = (float*)0x11CEBC0;
	static float* fVATSTargetActorZMultFar = (float*)0x11CE5C8;
	static float* fVATSTargetActorZMultFarDist = (float*)0x11CE8B0;
	static float* fVATSTargetActorZMultNear = (float*)0x11CEAA8;
	static float* fVATSTargetFOVMinDist = (float*)0x11CEF78;
	static float* fVATSTargetFOVMinFOV = (float*)0x11CEA48;
	static float* fVATSTargetFOVMultFar = (float*)0x11CE5A4;
	static float* fVATSTargetFOVMultFarDist = (float*)0x11CFE30;
	static float* fVATSTargetFOVMultNear = (float*)0x11CE348;
	static float* fVATSTargetRotateMult = (float*)0x11CE940;
	static float* fVATSTargetScanRotateMult = (float*)0x11CF6DC;
	static float* fVATSTargetSelectCamPanTime = (float*)0x11D48E0;
	static float* fVATSTargetTimeUpdateMult = (float*)0x11CFCF0;
	static float* fVATSThrownWeaponRangeMult = (float*)0x11CEF84;
	static float* fValueofItemForNoOwnership = (float*)0x11D0F7C;
	static float* fVanityModeAutoDelay = (float*)0x11CCF54;
	static float* fVanityModeAutoXSpeed = (float*)0x11CD4D0;
	static float* fVanityModeAutoYDegrees = (float*)0x11CD988;
	static float* fVanityModeAutoYSpeed = (float*)0x11CD19C;
	static float* fVanityModeDelay = (float*)0x11CDE90;
	static float* fVanityModeForceDefault = (float*)0x11CD49C;
	static float* fVanityModeWheelDeadMin = (float*)0x11CD618;
	static float* fVanityModeWheelDefault = (float*)0x11CCF30;
	static float* fVanityModeWheelInMult = (float*)0x11CDC9C;
	static float* fVanityModeWheelMax = (float*)0x11CDE18;
	static float* fVanityModeWheelMin = (float*)0x11CDA98;
	static float* fVanityModeWheelOutMult = (float*)0x11CD2B0;
	static float* fVanityModeXBoxXMult = (float*)0x11CDBCC;
	static float* fVanityModeXMult = (float*)0x11CDD94;
	static float* fVanityModeYMult = (float*)0x11CD448;
	static float* fVatsShotgunSpreadRatio = (float*)0x11CF9B4;
	static float* fWadeRadiationDamageMult = (float*)0x11D1468;
	static float* fWalkingSpreadPenalty = (float*)0x11CF658;
	static float* fWarningTimer = (float*)0x11CD600;
	static float* fWeapSkillReqPenalty = (float*)0x11CEACC;
	static float* fWeapStrengthReqPenalty = (float*)0x11CE538;
	static float* fWeaponClutterKnockBipedScale = (float*)0x11CEB0C;
	static float* fWeaponClutterKnockMaxWeaponMass = (float*)0x11CF780;
	static float* fWeaponClutterKnockMinClutterMass = (float*)0x11CF670;
	static float* fWeaponClutterKnockMult = (float*)0x11CFB94;
	static float* fWeaponConditionJam1 = (float*)0x11CFE3C;
	static float* fWeaponConditionJam10 = (float*)0x11CF46C;
	static float* fWeaponConditionJam2 = (float*)0x11CEB78;
	static float* fWeaponConditionJam3 = (float*)0x11CF978;
	static float* fWeaponConditionJam4 = (float*)0x11CF9F0;
	static float* fWeaponConditionJam5 = (float*)0x11CE0AC;
	static float* fWeaponConditionJam6 = (float*)0x11CE3C4;
	static float* fWeaponConditionJam7 = (float*)0x11CFC3C;
	static float* fWeaponConditionJam8 = (float*)0x11CF7A4;
	static float* fWeaponConditionJam9 = (float*)0x11CF214;
	static float* fWeaponConditionRateOfFire1 = (float*)0x11CF2D4;
	static float* fWeaponConditionRateOfFire10 = (float*)0x11CF574;
	static float* fWeaponConditionRateOfFire2 = (float*)0x11CE164;
	static float* fWeaponConditionRateOfFire3 = (float*)0x11CEC5C;
	static float* fWeaponConditionRateOfFire4 = (float*)0x11CE074;
	static float* fWeaponConditionRateOfFire5 = (float*)0x11CF424;
	static float* fWeaponConditionRateOfFire6 = (float*)0x11CFC60;
	static float* fWeaponConditionRateOfFire7 = (float*)0x11CEF00;
	static float* fWeaponConditionRateOfFire8 = (float*)0x11CE9D0;
	static float* fWeaponConditionRateOfFire9 = (float*)0x11CE1F8;
	static float* fWeaponConditionReloadJam1 = (float*)0x11CE318;
	static float* fWeaponConditionReloadJam10 = (float*)0x11CE4FC;
	static float* fWeaponConditionReloadJam2 = (float*)0x11CEE1C;
	static float* fWeaponConditionReloadJam3 = (float*)0x11CFD38;
	static float* fWeaponConditionReloadJam4 = (float*)0x11CEFB4;
	static float* fWeaponConditionReloadJam5 = (float*)0x11CEF48;
	static float* fWeaponConditionReloadJam6 = (float*)0x11CE27C;
	static float* fWeaponConditionReloadJam7 = (float*)0x11CEA30;
	static float* fWeaponConditionReloadJam8 = (float*)0x11CE550;
	static float* fWeaponConditionReloadJam9 = (float*)0x11CE520;
	static float* fWeaponConditionSpread1 = (float*)0x11CE39C;
	static float* fWeaponConditionSpread10 = (float*)0x11CE868;
	static float* fWeaponConditionSpread2 = (float*)0x11CFA80;
	static float* fWeaponConditionSpread3 = (float*)0x11CF084;
	static float* fWeaponConditionSpread4 = (float*)0x11CFD2C;
	static float* fWeaponConditionSpread5 = (float*)0x11CE3B8;
	static float* fWeaponConditionSpread6 = (float*)0x11CE140;
	static float* fWeaponConditionSpread7 = (float*)0x11CF7CC;
	static float* fWeaponConditionSpread8 = (float*)0x11CF758;
	static float* fWeaponConditionSpread9 = (float*)0x11CFC6C;
	static float* fWeatherCloudSpeedMax = (float*)0x11CCA70;
	static float* fWeatherFlashAmbient = (float*)0x11CCBC4;
	static float* fWeatherFlashDirectional = (float*)0x11CCCD0;
	static float* fWeatherFlashDuration = (float*)0x11CCC38;
	static float* fWeatherTransAccel = (float*)0x11CCC2C;
	static float* fWeatherTransMax = (float*)0x11CCC8C;
	static float* fWeatherTransMin = (float*)0x11CCC0C;
	static float* fWobbleToSkillConversion = (float*)0x11CF7FC;
	static float* fWorldMapMarkerMaxSize = (float*)0x11D3BC0;
	static float* fWorldMapMarkerMinSize = (float*)0x11D3CEC;
	static float* fWorldMapMaxZoom = (float*)0x11D3D40;
	static float* fWorldMapMinZoom = (float*)0x11D22FC;
	static float* fWorldPlayerCursorMaxSize = (float*)0x11D3DF4;
	static float* fWorldQuestMarkerMaxSize = (float*)0x11D3C5C;
	static float* fWorldQuestMarkerMinSize = (float*)0x11D3430;
	static float* fWorldfPlayerCursorMinSize = (float*)0x11D4874;
	static float* fWortStrMult = (float*)0x11D19E8;
	static float* fWortalchmult = (float*)0x11D1A70;
	static float* fWortcraftChanceIntDenom = (float*)0x11D18D0;
	static float* fWortcraftChanceLuckDenom = (float*)0x11D1BCC;
	static float* fWortcraftFatigueMag = (float*)0x11D1774;
	static float* fWortcraftStrChanceDenom = (float*)0x11D1644;
	static float* fWortcraftStrCostDenom = (float*)0x11D1D34;
	static float* fZKeyComplexHelperMinDistance = (float*)0x11D130C;
	static float* fZKeyComplexHelperScale = (float*)0x11D080C;
	static float* fZKeyComplexHelperWeightMax = (float*)0x11D0380;
	static float* fZKeyComplexHelperWeightMin = (float*)0x11D04DC;
	static float* fZKeyMaxContactDistance = (float*)0x11D0668;
	static float* fZKeyMaxContactMassRatio = (float*)0x11CFFC8;
	static float* fZKeyMaxForce = (float*)0x11D1000;
	static float* fZKeyMaxForceScaleHigh = (float*)0x11D0224;
	static float* fZKeyMaxForceScaleLow = (float*)0x11D0E50;
	static float* fZKeyMaxForceWeightHigh = (float*)0x11D004C;
	static float* fZKeyMaxForceWeightLow = (float*)0x11D1264;
	static float* fZKeyObjectDamping = (float*)0x11D08CC;
	static float* fZKeySpringDamping = (float*)0x11D035C;
	static float* fZKeySpringElasticity = (float*)0x11CFEF0;
	static SInt32* iAICombatMaxAllySummonCount = (SInt32*)0x11CE14C;
	static SInt32* iAICombatMinDetection = (SInt32*)0x11CF78C;
	static SInt32* iAICombatRestoreFatiguePercentage = (SInt32*)0x11CE418;
	static SInt32* iAICombatRestoreHealthPercentage = (SInt32*)0x11CE0B8;
	static SInt32* iAICombatRestoreMagickaPercentage = (SInt32*)0x11CFB18;
	static SInt32* iAIDistanceRadiusMinLocation = (SInt32*)0x11CDE9C;
	static SInt32* iAIFleeMaxHitCount = (SInt32*)0x11CF478;
	static SInt32* iAIFriendlyHitMinDisposition = (SInt32*)0x11CD6F4;
	static SInt32* iAINPCRacePowerChance = (SInt32*)0x11CEA18;
	static SInt32* iAINumberActorsComplexScene = (SInt32*)0x11CDE30;
	static SInt32* iAbsorbNumBolts = (SInt32*)0x11D1C68;
	static SInt32* iActivatePickLength = (SInt32*)0x11D10D8;
	static SInt32* iActorKeepTurnDegree = (SInt32*)0x11CDA20;
	static SInt32* iActorLuckSkillBase = (SInt32*)0x11D1270;
	static SInt32* iActorTorsoMaxRotation = (SInt32*)0x11CD054;
	static SInt32* iActorTurnDegree = (SInt32*)0x11CD484;
	static SInt32* iAimingNumIterations = (SInt32*)0x11CFC0C;
	static SInt32* iAlertAgressionMin = (SInt32*)0x11CDFDC;
	static SInt32* iAllowAlchemyDuringCombat = (SInt32*)0x11D2D7C;
	static SInt32* iAllowRechargeDuringCombat = (SInt32*)0x11D2620;
	static SInt32* iAllowRepairDuringCombat = (SInt32*)0x11D32B0;
	static SInt32* iAllyHitCombatAllowed = (SInt32*)0x11CD4B8;
	static SInt32* iAllyHitNonCombatAllowed = (SInt32*)0x11CD46C;
	static SInt32* iAntiCheatDuration = (SInt32*)0x11D3574;
	static SInt32* iArmorBaseSkill = (SInt32*)0x11D0A64;
	static SInt32* iArmorDamageBootsChance = (SInt32*)0x11CF3DC;
	static SInt32* iArmorDamageCuirassChance = (SInt32*)0x11CF7D8;
	static SInt32* iArmorDamageGauntletsChance = (SInt32*)0x11CF40C;
	static SInt32* iArmorDamageGreavesChance = (SInt32*)0x11CE134;
	static SInt32* iArmorDamageHelmChance = (SInt32*)0x11CEBF0;
	static SInt32* iArmorDamageShieldChance = (SInt32*)0x11CF5E0;
	static SInt32* iArmorWeightBoots = (SInt32*)0x11C91C4;
	static SInt32* iArmorWeightCuirass = (SInt32*)0x11C9220;
	static SInt32* iArmorWeightGauntlets = (SInt32*)0x11C91F0;
	static SInt32* iArmorWeightGreaves = (SInt32*)0x11C9234;
	static SInt32* iArmorWeightHelmet = (SInt32*)0x11C91D4;
	static SInt32* iArmorWeightShield = (SInt32*)0x11C91FC;
	static SInt32* iArrowInventoryChance = (SInt32*)0x11CF514;
	static SInt32* iArrowMaxRefCount = (SInt32*)0x11CF22C;
	static SInt32* iAttractModeIdleTime = (SInt32*)0x11D3CD4;
	static SInt32* iAvoidHurtingNonTargetsResponsibility = (SInt32*)0x11CE3D0;
	static SInt32* iBallisticProjectilePathPickSegments = (SInt32*)0x11CFD80;
	static SInt32* iBarterDispositionPenalty = (SInt32*)0x11D0B88;
	static SInt32* iBaseDisposition = (SInt32*)0x11C50DC;
	static SInt32* iBloodSplatterMaxCount = (SInt32*)0x11CF2BC;
	static SInt32* iBoneLODDistMult = (SInt32*)0x11CCF8C;
	static SInt32* iBurnMinimumMillis = (SInt32*)0x11D2B54;
	static SInt32* iCalcLevelAdjustDown = (SInt32*)0x11CA320;
	static SInt32* iCalcLevelAdjustUp = (SInt32*)0x11CA2B4;
	static SInt32* iCapsLimit = (SInt32*)0x11D3A0C;
	static SInt32* iChanceFleeDialog = (SInt32*)0x11CD83C;
	static SInt32* iClassAcrobat = (SInt32*)0x11D0D48;
	static SInt32* iClassAgent = (SInt32*)0x11D0088;
	static SInt32* iClassArcher = (SInt32*)0x11D023C;
	static SInt32* iClassAssassin = (SInt32*)0x11D1408;
	static SInt32* iClassBarbarian = (SInt32*)0x11D0BAC;
	static SInt32* iClassBard = (SInt32*)0x11CFFEC;
	static SInt32* iClassBattlemage = (SInt32*)0x11D11D4;
	static SInt32* iClassCharactergenClass = (SInt32*)0x11D0E80;
	static SInt32* iClassCrusader = (SInt32*)0x11D0F88;
	static SInt32* iClassHealer = (SInt32*)0x11D1060;
	static SInt32* iClassKnight = (SInt32*)0x11D06EC;
	static SInt32* iClassMage = (SInt32*)0x11D08D8;
	static SInt32* iClassMonk = (SInt32*)0x11D0BD0;
	static SInt32* iClassNightblade = (SInt32*)0x11D0058;
	static SInt32* iClassPilgrim = (SInt32*)0x11D01CC;
	static SInt32* iClassPriest = (SInt32*)0x11D0434;
	static SInt32* iClassRogue = (SInt32*)0x11D0644;
	static SInt32* iClassScout = (SInt32*)0x11D1258;
	static SInt32* iClassSorcerer = (SInt32*)0x11D11B0;
	static SInt32* iClassSpellsword = (SInt32*)0x11D1354;
	static SInt32* iClassThief = (SInt32*)0x11D02E4;
	static SInt32* iClassWarrior = (SInt32*)0x11D0D78;
	static SInt32* iClassWitchhunter = (SInt32*)0x11D0734;
	static SInt32* iCollFreq = (SInt32*)0x11D5EA4;
	static SInt32* iCombatCastDrainMinimumValue = (SInt32*)0x11CE598;
	static SInt32* iCombatCrippledTorsoHitStaggerChance = (SInt32*)0x11CF30C;
	static SInt32* iCombatDismemberPartChance = (SInt32*)0x11CF2F0;
	static SInt32* iCombatExplodePartChance = (SInt32*)0x11CE300;
	static SInt32* iCombatHighPriorityModifier = (SInt32*)0x11CE694;
	static SInt32* iCombatSearchMaxSearchDoorFailure = (SInt32*)0x11CFC9C;
	static SInt32* iCombatTargetLostRemoveSearchCount = (SInt32*)0x11CEF54;
	static SInt32* iCombatTargetPlayerSoftCap = (SInt32*)0x11CF418;
	static SInt32* iComputersDisplayRateMenus = (SInt32*)0x11D3DE8;
	static SInt32* iComputersDisplayRateNotes = (SInt32*)0x11D4BBC;
	static SInt32* iComputersResultDisplayTimeout = (SInt32*)0x11D3E54;
	static SInt32* iCoolDownTimerSetting = (SInt32*)0x11CD3A0;
	static SInt32* iCrimeAlarmRecDistance = (SInt32*)0x11CDBF0;
	static SInt32* iCrimeDaysInPrisonMod = (SInt32*)0x11D03B0;
	static SInt32* iCrimeGoldAttack = (SInt32*)0x11D0974;
	static SInt32* iCrimeGoldMinValue = (SInt32*)0x11D11C8;
	static SInt32* iCrimeGoldMurder = (SInt32*)0x11D0248;
	static SInt32* iCrimeGoldPickpocket = (SInt32*)0x11D0254;
	static SInt32* iCrimeGoldStealHorse = (SInt32*)0x11D06A4;
	static SInt32* iCrimeGoldTresspass = (SInt32*)0x11D020C;
	static SInt32* iCurrentTargetBonus = (SInt32*)0x11CD76C;
	static SInt32* iDeathDropWeaponChance = (SInt32*)0x11D0560;
	static SInt32* iDebrisMaxCount = (SInt32*)0x11CF3E8;
	static SInt32* iDialogueDispositionFriendValue = (SInt32*)0x11D0848;
	static SInt32* iDialogueDummySpeakThisIntOrBelow = (SInt32*)0x11D0DCC;
	static SInt32* iDismemberBloodDecalCount = (SInt32*)0x11CF4CC;
	static SInt32* iDispKaramMax = (SInt32*)0x11CD1F0;
	static SInt32* iDistancetoAttackedTarget = (SInt32*)0x11CD724;
	static SInt32* iExplosionDebug = (SInt32*)0x11D0A7C;
	static SInt32* iFallLegDamageChance = (SInt32*)0x11D10CC;
	static SInt32* iFriendHitCombatAllowed = (SInt32*)0x11CD208;
	static SInt32* iFriendHitNonCombatAllowed = (SInt32*)0x11CD5B4;
	static SInt32* iGuardWarnings = (SInt32*)0x11CDAF8;
	static SInt32* iHUDCompassIconBlinkFastestBlinkTime = (SInt32*)0x11D30F4;
	static SInt32* iHUDCompassIconBlinkLongestPause = (SInt32*)0x11D24F4;
	static SInt32* iHUDCompassIconBlinkMaxDist = (SInt32*)0x11D1D58;
	static SInt32* iHUDCompassIconBlinkMinDist = (SInt32*)0x11D30DC;
	static SInt32* iHUDCompassIconBlinkShortestPause = (SInt32*)0x11D3928;
	static SInt32* iHUDCompassIconBlinkSlowestBlinkTime = (SInt32*)0x11D2BD8;
	static SInt32* iHUDCompassIconBlinkThresholdBlinkTime = (SInt32*)0x11D3C98;
	static SInt32* iHUDCompassIconBlinkThresholdDist = (SInt32*)0x11D4D48;
	static SInt32* iHUDCompassIconBlinkThresholdPause = (SInt32*)0x11D46D0;
	static SInt32* iHUDMaxCompassNPCTicks = (SInt32*)0x11D32D4;
	static SInt32* iHackingDumpRate = (SInt32*)0x11D3514;
	static SInt32* iHackingFlashOffDuration = (SInt32*)0x11D2938;
	static SInt32* iHackingFlashOnDuration = (SInt32*)0x11D42D4;
	static SInt32* iHackingInputRate = (SInt32*)0x11D4E50;
	static SInt32* iHackingMaxWords = (SInt32*)0x11D331C;
	static SInt32* iHackingMinWords = (SInt32*)0x11D3C50;
	static SInt32* iHackingOutputRate = (SInt32*)0x11D3DC4;
	static SInt32* iHackingRetryMilliseconds = (SInt32*)0x11D0B94;
	static SInt32* iHairColor00 = (SInt32*)0x11D4B08;
	static SInt32* iHairColor01 = (SInt32*)0x11D2FA4;
	static SInt32* iHairColor02 = (SInt32*)0x11D4BEC;
	static SInt32* iHairColor03 = (SInt32*)0x11D3C20;
	static SInt32* iHairColor04 = (SInt32*)0x11D1F84;
	static SInt32* iHairColor05 = (SInt32*)0x11D2974;
	static SInt32* iHairColor06 = (SInt32*)0x11D391C;
	static SInt32* iHairColor07 = (SInt32*)0x11D4640;
	static SInt32* iHairColor08 = (SInt32*)0x11D4070;
	static SInt32* iHairColor09 = (SInt32*)0x11D36B8;
	static SInt32* iHairColor10 = (SInt32*)0x11D23E0;
	static SInt32* iHairColor11 = (SInt32*)0x11D2E0C;
	static SInt32* iHairColor12 = (SInt32*)0x11D4C4C;
	static SInt32* iHairColor13 = (SInt32*)0x11D2554;
	static SInt32* iHairColor14 = (SInt32*)0x11D3454;
	static SInt32* iHairColor15 = (SInt32*)0x11D46AC;
	static SInt32* iHeavyArmorStealthPenalty = (SInt32*)0x11D1558;
	static SInt32* iHighDamp = (SInt32*)0x11D5E98;
	static SInt32* iHighResponsibility = (SInt32*)0x11CD718;
	static SInt32* iHorseTurnDegreesPerSecond = (SInt32*)0x11D01F4;
	static SInt32* iHorseTurnDegreesRampUpPerSecond = (SInt32*)0x11D077C;
	static SInt32* iHoursToRespawnCell = (SInt32*)0x11CA164;
	static SInt32* iInventoryAskQuantityAt = (SInt32*)0x11D241C;
	static SInt32* iInventoryMenuIdleDelay = (SInt32*)0x11CD530;
	static SInt32* iKarmaChangeThreshold = (SInt32*)0x11D26B0;
	static SInt32* iKarmaMax = (SInt32*)0x11CD648;
	static SInt32* iKarmaMin = (SInt32*)0x11CDD70;
	static SInt32* iLevCharLevelDifferenceMax = (SInt32*)0x11C8E20;
	static SInt32* iLevCreaLevelDifferenceMax = (SInt32*)0x11C8ED8;
	static SInt32* iLevItemLevelDifferenceMax = (SInt32*)0x11C8F04;
	static SInt32* iLevelUp01Mult = (SInt32*)0x11D1210;
	static SInt32* iLevelUp02Mult = (SInt32*)0x11D0344;
	static SInt32* iLevelUp03Mult = (SInt32*)0x11D109C;
	static SInt32* iLevelUp04Mult = (SInt32*)0x11D10B4;
	static SInt32* iLevelUp05Mult = (SInt32*)0x11D08F0;
	static SInt32* iLevelUp06Mult = (SInt32*)0x11D11EC;
	static SInt32* iLevelUp07Mult = (SInt32*)0x11D1564;
	static SInt32* iLevelUp08Mult = (SInt32*)0x11D0A04;
	static SInt32* iLevelUp09Mult = (SInt32*)0x11D0E98;
	static SInt32* iLevelUp10Mult = (SInt32*)0x11D0638;
	static SInt32* iLevelUpSkillCount = (SInt32*)0x11D1084;
	static SInt32* iLevelUpSkillPointsBase = (SInt32*)0x11CFED4;
	static SInt32* iLevelUpSkillPointsInterval = (SInt32*)0x11D1078;
	static SInt32* iLevelsPerPerk = (SInt32*)0x11CD078;
	static SInt32* iLockLevelMaxAverage = (SInt32*)0x11C3A04;
	static SInt32* iLockLevelMaxEasy = (SInt32*)0x11C3A34;
	static SInt32* iLockLevelMaxHard = (SInt32*)0x11C3AB4;
	static SInt32* iLockLevelMaxImpossible = (SInt32*)0x11C3A28;
	static SInt32* iLockLevelMaxVeryEasy = (SInt32*)0x11C3A50;
	static SInt32* iLockLevelMaxVeryHard = (SInt32*)0x11C39A0;
	static SInt32* iLowDamp = (SInt32*)0x11D5E5C;
	static SInt32* iLowLevelNPCMaxLevel = (SInt32*)0x11D0758;
	static SInt32* iLowResponsiblityLevel = (SInt32*)0x11CDFF4;
	static SInt32* iMagicLightMaxCount = (SInt32*)0x11D1D1C;
	static SInt32* iMagicMaxPotionsApprentice = (SInt32*)0x11D1BFC;
	static SInt32* iMagicMaxPotionsExpert = (SInt32*)0x11D1C5C;
	static SInt32* iMagicMaxPotionsJourneyman = (SInt32*)0x11D184C;
	static SInt32* iMagicMaxPotionsMaster = (SInt32*)0x11D1918;
	static SInt32* iMagicMaxPotionsNovice = (SInt32*)0x11D1C74;
	static SInt32* iMagicMaxSummonedCreatureTypes = (SInt32*)0x11C34FC;
	static SInt32* iMagnitudeLevelAffectsAll = (SInt32*)0x11D1A18;
	static SInt32* iMapMarkerRevealDistance = (SInt32*)0x11D0BDC;
	static SInt32* iMapMarkerVisibleDistance = (SInt32*)0x11D12D0;
	static SInt32* iMarksmanFatigueBurnPerSecondSkill = (SInt32*)0x11CF5F8;
	static SInt32* iMasserSize = (SInt32*)0x11CCC1C;
	static SInt32* iMaxArrowsInQuiver = (SInt32*)0x11C8470;
	static SInt32* iMaxCharacterLevel = (SInt32*)0x11D0C64;
	static SInt32* iMaxPlayerSummonedCreatures = (SInt32*)0x11D1720;
	static SInt32* iMaxSandboxRescanSeconds = (SInt32*)0x11CDF64;
	static SInt32* iMaxStatsToDisplay = (SInt32*)0x11D44C0;
	static SInt32* iMediumArmorStealthPenalty = (SInt32*)0x11D053C;
	static SInt32* iMediumResponsiblityLevel = (SInt32*)0x11CD4F4;
	static SInt32* iMerchantRespawnDay1 = (SInt32*)0x11D0590;
	static SInt32* iMerchantRespawnDay2 = (SInt32*)0x11D0C40;
	static SInt32* iMessCrippledLimbExplodeBonus = (SInt32*)0x11CFE94;
	static SInt32* iMessIntactLimbDismemberChance = (SInt32*)0x11CE2B8;
	static SInt32* iMessIntactLimbExplodeBonus = (SInt32*)0x11CEE40;
	static SInt32* iMessTargetedLimbExplodeBonus = (SInt32*)0x11CE18C;
	static SInt32* iMessTorsoExplodeChance = (SInt32*)0x11CF190;
	static SInt32* iMessageBoxMaxItems = (SInt32*)0x11CA864;
	static SInt32* iMinClipSizeToAddReloadDelay = (SInt32*)0x11CF88C;
	static SInt32* iMinSandboxRescanSeconds = (SInt32*)0x11CD0A8;
	static SInt32* iMineDisarmExperience = (SInt32*)0x11CECE0;
	static SInt32* iMolotovTest = (SInt32*)0x11D0FE8;
	static SInt32* iNPCBasePerLevelHealthMult = (SInt32*)0x11D09BC;
	static SInt32* iNumExplosionDecalCDPoint = (SInt32*)0x11D10A8;
	static SInt32* iNumberActorsAllowedToFollowPlayer = (SInt32*)0x11CDAD4;
	static SInt32* iNumberActorsGoThroughLoadDoorInCombat = (SInt32*)0x11D12A0;
	static SInt32* iNumberActorsInCombatPlayer = (SInt32*)0x11CD000;
	static SInt32* iNumberGuardsCrimeResponse = (SInt32*)0x11CD80C;
	static SInt32* iPCStartSpellSkillLevel = (SInt32*)0x11D04D0;
	static SInt32* iPerkAttackDisarmChance = (SInt32*)0x11CEE94;
	static SInt32* iPerkBlockDisarmChance = (SInt32*)0x11CE210;
	static SInt32* iPerkBlockStaggerChance = (SInt32*)0x11CE378;
	static SInt32* iPerkExtraBarterGoldMaster = (SInt32*)0x11D001C;
	static SInt32* iPerkHandToHandBlockRecoilChance = (SInt32*)0x11CFCD8;
	static SInt32* iPerkHeavyArmorJumpSum = (SInt32*)0x11D095C;
	static SInt32* iPerkHeavyArmorSinkSum = (SInt32*)0x11D07AC;
	static SInt32* iPerkLightArmorMasterMinSum = (SInt32*)0x11CEC98;
	static SInt32* iPerkMarksmanKnockdownChance = (SInt32*)0x11CFE6C;
	static SInt32* iPerkMarksmanParalyzeChance = (SInt32*)0x11CE7DC;
	static SInt32* iPersuasionAngleMax = (SInt32*)0x11D0470;
	static SInt32* iPersuasionAngleMin = (SInt32*)0x11D0308;
	static SInt32* iPersuasionBribeCrime = (SInt32*)0x11D0350;
	static SInt32* iPersuasionBribeGold = (SInt32*)0x11D0908;
	static SInt32* iPersuasionBribeRefuse = (SInt32*)0x11CFEFC;
	static SInt32* iPersuasionBribeScale = (SInt32*)0x11D139C;
	static SInt32* iPersuasionDemandDisposition = (SInt32*)0x11D1498;
	static SInt32* iPersuasionDemandGold = (SInt32*)0x11CFF50;
	static SInt32* iPersuasionDemandRefuse = (SInt32*)0x11D0D0C;
	static SInt32* iPersuasionDemandScale = (SInt32*)0x11D0A1C;
	static SInt32* iPersuasionInner = (SInt32*)0x11CFF08;
	static SInt32* iPersuasionMiddle = (SInt32*)0x11D0F64;
	static SInt32* iPersuasionOuter = (SInt32*)0x11D0E14;
	static SInt32* iPersuasionPower1 = (SInt32*)0x11D0184;
	static SInt32* iPersuasionPower2 = (SInt32*)0x11D0830;
	static SInt32* iPersuasionPower3 = (SInt32*)0x11D1540;
	static SInt32* iPickPocketWarnings = (SInt32*)0x11CD9F8;
	static SInt32* iPlayerCustomClass = (SInt32*)0x11D0AA0;
	static SInt32* iProjectileMineShooterCanTrigger = (SInt32*)0x11CEE4C;
	static SInt32* iQuestReminderPipboyDisabledTime = (SInt32*)0x11D2224;
	static SInt32* iQuestReminderTimer = (SInt32*)0x11D2FE0;
	static SInt32* iQuestReminderTimerLimit = (SInt32*)0x11D3694;
	static SInt32* iRemoveExcessDeadComplexCount = (SInt32*)0x11D0968;
	static SInt32* iRemoveExcessDeadComplexTotalActorCount = (SInt32*)0x11D08FC;
	static SInt32* iRemoveExcessDeadCount = (SInt32*)0x11D0CDC;
	static SInt32* iRemoveExcessDeadTotalActorCount = (SInt32*)0x11D09A4;
	static SInt32* iSandBoxPreventRepeatedActionTime = (SInt32*)0x11CDB40;
	static SInt32* iSecundaSize = (SInt32*)0x11CCCF0;
	static SInt32* iShockBranchNumBolts = (SInt32*)0x11D1A4C;
	static SInt32* iShockBranchSegmentsPerBolt = (SInt32*)0x11D1B54;
	static SInt32* iShockDebug = (SInt32*)0x11D1B00;
	static SInt32* iShockNumBolts = (SInt32*)0x11D1870;
	static SInt32* iShockSegmentsPerBolt = (SInt32*)0x11D1804;
	static SInt32* iShockSubSegments = (SInt32*)0x11D16F0;
	static SInt32* iSkillApprenticeMin = (SInt32*)0x11D681C;
	static SInt32* iSkillExpertMin = (SInt32*)0x11D67F8;
	static SInt32* iSkillJourneymanMin = (SInt32*)0x11D6804;
	static SInt32* iSkillMasterMin = (SInt32*)0x11D67EC;
	static SInt32* iSkillPointsTagSkillMult = (SInt32*)0x11CD6C4;
	static SInt32* iSneakLevelBonus = (SInt32*)0x11CD140;
	static SInt32* iSneakSkillUseDistance = (SInt32*)0x11CD854;
	static SInt32* iSneakStartBonus = (SInt32*)0x11CD8C4;
	static SInt32* iSneakStartBonusLevelPenatly = (SInt32*)0x11CD4C4;
	static SInt32* iSoundLevelLoud = (SInt32*)0x11CDDE4;
	static SInt32* iSoundLevelNormal = (SInt32*)0x11CD53C;
	static SInt32* iSoundLevelSilent = (SInt32*)0x11CD3B8;
	static SInt32* iSpeakSoundLipDistance = (SInt32*)0x11CD37C;
	static SInt32* iSpeechChallengeDifficultyAverage = (SInt32*)0x11CC05C;
	static SInt32* iSpeechChallengeDifficultyEasy = (SInt32*)0x11CC040;
	static SInt32* iSpeechChallengeDifficultyHard = (SInt32*)0x11CC028;
	static SInt32* iSpeechChallengeDifficultyVeryEasy = (SInt32*)0x11CC070;
	static SInt32* iSpeechChallengeDifficultyVeryHard = (SInt32*)0x11CBF58;
	static SInt32* iSprayDecalsDebug = (SInt32*)0x11C586C;
	static SInt32* iStandardEmotionValue = (SInt32*)0x11CBDF8;
	static SInt32* iStealWarnings = (SInt32*)0x11CD700;
	static SInt32* iTrainingSkills = (SInt32*)0x11D019C;
	static SInt32* iTraitMenuMaxNumTraits = (SInt32*)0x11D2F98;
	static SInt32* iUpdateGroups = (SInt32*)0x11D5E48;
	static SInt32* iVATSCameraHitDist = (SInt32*)0x11CF820;
	static SInt32* iVATSConcentratedFireBonus = (SInt32*)0x11D4214;
	static SInt32* iVATSStrangerMaxHP = (SInt32*)0x11CE7E8;
	static SInt32* iVampirismAgeOffset = (SInt32*)0x11CB750;
	static SInt32* iVatsTargetAngle = (SInt32*)0x11CFEC8;
	static SInt32* iWeaponCriticalHitDropChance = (SInt32*)0x11CE100;
	static SInt32* iWortcraftMaxEffectsApprentice = (SInt32*)0x11C36F8;
	static SInt32* iWortcraftMaxEffectsExpert = (SInt32*)0x11C3814;
	static SInt32* iWortcraftMaxEffectsJourneyman = (SInt32*)0x11C35E0;
	static SInt32* iWortcraftMaxEffectsMaster = (SInt32*)0x11C3744;
	static SInt32* iWortcraftMaxEffectsNovice = (SInt32*)0x11C375C;
	static SInt32* iXPBase = (SInt32*)0x11D03EC;
	static SInt32* iXPBumpBase = (SInt32*)0x11D0AE8;
	static SInt32* iXPDeathRewardHealthThreshold = (SInt32*)0x11D645C;
	static SInt32* iXPLevelHackComputerAverage = (SInt32*)0x11D6390;
	static SInt32* iXPLevelHackComputerEasy = (SInt32*)0x11D64E0;
	static SInt32* iXPLevelHackComputerHard = (SInt32*)0x11D64BC;
	static SInt32* iXPLevelHackComputerVeryEasy = (SInt32*)0x11D6544;
	static SInt32* iXPLevelHackComputerVeryHard = (SInt32*)0x11D655C;
	static SInt32* iXPLevelKillCreatureAverage = (SInt32*)0x11D63D8;
	static SInt32* iXPLevelKillCreatureEasy = (SInt32*)0x11D6378;
	static SInt32* iXPLevelKillCreatureHard = (SInt32*)0x11D64EC;
	static SInt32* iXPLevelKillCreatureVeryEasy = (SInt32*)0x11D6468;
	static SInt32* iXPLevelKillCreatureVeryHard = (SInt32*)0x11D63CC;
	static SInt32* iXPLevelKillNPCAverage = (SInt32*)0x11D6550;
	static SInt32* iXPLevelKillNPCEasy = (SInt32*)0x11D6538;
	static SInt32* iXPLevelKillNPCHard = (SInt32*)0x11D6504;
	static SInt32* iXPLevelKillNPCVeryEasy = (SInt32*)0x11D652C;
	static SInt32* iXPLevelKillNPCVeryHard = (SInt32*)0x11D6520;
	static SInt32* iXPLevelPickLockAverage = (SInt32*)0x11D63A8;
	static SInt32* iXPLevelPickLockEasy = (SInt32*)0x11D635C;
	static SInt32* iXPLevelPickLockHard = (SInt32*)0x11D6340;
	static SInt32* iXPLevelPickLockVeryEasy = (SInt32*)0x11D6450;
	static SInt32* iXPLevelPickLockVeryHard = (SInt32*)0x11D64A4;
	static SInt32* iXPLevelSpeechChallengeAverage = (SInt32*)0x11D64D4;
	static SInt32* iXPLevelSpeechChallengeEasy = (SInt32*)0x11D6574;
	static SInt32* iXPLevelSpeechChallengeHard = (SInt32*)0x11D6350;
	static SInt32* iXPLevelSpeechChallengeVeryEasy = (SInt32*)0x11D6568;
	static SInt32* iXPLevelSpeechChallengeVeryHard = (SInt32*)0x11D6510;
	static SInt32* iXPRewardDiscoverMapMarker = (SInt32*)0x11D0368;
	static SInt32* iXPRewardDiscoverSecretArea = (SInt32*)0x11D0DF0;
	static SInt32* iXPRewardHackComputer = (SInt32*)0x11D136C;
	static SInt32* iXPRewardHackComputerAverage = (SInt32*)0x11D648C;
	static SInt32* iXPRewardHackComputerEasy = (SInt32*)0x11D6418;
	static SInt32* iXPRewardHackComputerHard = (SInt32*)0x11D6400;
	static SInt32* iXPRewardHackComputerVeryEasy = (SInt32*)0x11D6498;
	static SInt32* iXPRewardHackComputerVeryHard = (SInt32*)0x11D6474;
	static SInt32* iXPRewardKillNPCAverage = (SInt32*)0x11D63F0;
	static SInt32* iXPRewardKillNPCEasy = (SInt32*)0x11D636C;
	static SInt32* iXPRewardKillNPCHard = (SInt32*)0x11D6434;
	static SInt32* iXPRewardKillNPCVeryEasy = (SInt32*)0x11D6334;
	static SInt32* iXPRewardKillNPCVeryHard = (SInt32*)0x11D6428;
	static SInt32* iXPRewardKillOpponent = (SInt32*)0x11D07DC;
	static SInt32* iXPRewardKillOpponentAverage = (SInt32*)0x11D6328;
	static SInt32* iXPRewardKillOpponentEasy = (SInt32*)0x11D64B0;
	static SInt32* iXPRewardKillOpponentHard = (SInt32*)0x11D6440;
	static SInt32* iXPRewardKillOpponentVeryEasy = (SInt32*)0x11D640C;
	static SInt32* iXPRewardKillOpponentVeryHard = (SInt32*)0x11D64F8;
	static SInt32* iXPRewardPickLock = (SInt32*)0x11D0770;
	static SInt32* iXPRewardPickLockAverage = (SInt32*)0x11D64C8;
	static SInt32* iXPRewardPickLockEasy = (SInt32*)0x11D631C;
	static SInt32* iXPRewardPickLockHard = (SInt32*)0x11D63B4;
	static SInt32* iXPRewardPickLockVeryEasy = (SInt32*)0x11D6480;
	static SInt32* iXPRewardPickLockVeryHard = (SInt32*)0x11D6384;
	static SInt32* iXPRewardSpeechChallengeAverage = (SInt32*)0x11D6304;
	static SInt32* iXPRewardSpeechChallengeEasy = (SInt32*)0x11D63E4;
	static SInt32* iXPRewardSpeechChallengeHard = (SInt32*)0x11D6310;
	static SInt32* iXPRewardSpeechChallengeVeryEasy = (SInt32*)0x11D63C0;
	static SInt32* iXPRewardSpeechChallengeVeryHard = (SInt32*)0x11D639C;
};
#endif
#if 1
namespace eINISettingCollection
{
	static bool* AnimationWarning_bClampWarning = (bool*)0x11C5738;
	static bool* AnimationWarning_bPriorityWarning = (bool*)0x11C5754;
	static bool* Archive_bCheckRuntimeCollisions = (bool*)0x11DEBE0;
	static bool* Archive_bInvalidateOlderFiles = (bool*)0x11DEC50;
	static bool* Archive_bUseArchives = (bool*)0x11DEE40;
	static bool* Audio_bEnableAudio = (bool*)0x11F6DA0;
	static bool* Audio_bEnableAudioCache = (bool*)0x11F6EC0;
	static bool* Audio_bEnableEnviroEffectsOnPC = (bool*)0x11F7134;
	static bool* Audio_bMultiThreadAudio = (bool*)0x11F6E00;
	static bool* Audio_bUseAudioDebugInformation = (bool*)0x11F6E60;
	static bool* BackgroundLoad_bBackgroundCellLoads = (bool*)0x11C9674;
	static bool* BackgroundLoad_bBackgroundLoadLipFiles = (bool*)0x11E05F0;
	static bool* BackgroundLoad_bLoadBackgroundFaceGen = (bool*)0x11D5A28;
	static bool* BackgroundLoad_bLoadHelmetsInBackground = (bool*)0x11C5EF4;
	static bool* BackgroundLoad_bSelectivePurgeUnusedOnFastTravel = (bool*)0x11C3C14;
	static bool* BackgroundLoad_bUseBackgroundFileLoader = (bool*)0x11DECB0;
	static bool* BackgroundLoad_bUseMultiThreadedFaceGen = (bool*)0x11D5A14;
	static bool* BackgroundLoad_bUseMultiThreadedTrees = (bool*)0x11C3D20;
	static bool* bLightAttenuation_bOutQuadInLin = (bool*)0x11C8FC4;
	static bool* bLightAttenuation_bUseConstant = (bool*)0x11C9064;
	static bool* bLightAttenuation_bUseLinear = (bool*)0x11C8FF4;
	static bool* bLightAttenuation_bUseQuadratic = (bool*)0x11C902C;
	static bool* bPrimitivesOn = (bool*)0x11CA2E0;
	static bool* BudgetCaps_bIncludeWaterInMNumberCalculations = (bool*)0x11C597C;
	static bool* bUseWaterHDR = (bool*)0x11C7B0C;
	static bool* Combat_bAimSights = (bool*)0x11C94B4;
	static bool* Combat_bDebugCombatArea = (bool*)0x11F15F0;
	static bool* Combat_bDebugCombatAttackerText = (bool*)0x11F15A8;
	static bool* Combat_bDebugCombatCoverReservations = (bool*)0x11F1684;
	static bool* Combat_bDebugCombatCoverReservationsText = (bool*)0x11F16C4;
	static bool* Combat_bDebugCombatCoverSearch = (bool*)0x11F1678;
	static bool* Combat_bDebugCombatCoverSearch2 = (bool*)0x11F1690;
	static bool* Combat_bDebugCombatCoverSearchText = (bool*)0x11F16E4;
	static bool* Combat_bDebugCombatDetectionEvents = (bool*)0x11F1980;
	static bool* Combat_bDebugCombatGroupClusters = (bool*)0x11F1828;
	static bool* Combat_bDebugCombatGroups = (bool*)0x11F187C;
	static bool* Combat_bDebugCombatGroups2 = (bool*)0x11F185C;
	static bool* Combat_bDebugCombatGuardRadius = (bool*)0x11F15B4;
	static bool* Combat_bDebugCombatProjectileLOS = (bool*)0x11F1C50;
	static bool* Combat_bDebugCombatSearch = (bool*)0x11F1818;
	static bool* Combat_bDebugCombatTargets = (bool*)0x11F1B28;
	static bool* Combat_bDebugCombatTextColorDark = (bool*)0x11F1C34;
	static bool* Combat_bDebugCombatThreats = (bool*)0x11F1BA4;
	static bool* Combat_bDebugCombatUnreachableLocations = (bool*)0x11F15D4;
	static bool* Combat_bDisableCombatDialogue = (bool*)0x11F1768;
	static bool* Combat_bDisableCombatGroupStrategies = (bool*)0x11F18DC;
	static bool* Combat_bDisableNPCAttacks = (bool*)0x11DF6C8;
	static bool* Combat_bDismemberOneLimb = (bool*)0x11DF85C;
	static bool* Combat_bEncounterZoneTargetRestrict = (bool*)0x11F1844;
	static bool* Combat_bForceNPCsUseAmmo = (bool*)0x11C94D4;
	static bool* Combat_bIronSightsZoomEnable = (bool*)0x11E0980;
	static bool* Combat_bLaserSights = (bool*)0x11C94A4;
	static bool* Combat_bPlayHitLocationIdles = (bool*)0x11DF764;
	static bool* Combat_bPlayStaggers = (bool*)0x11DF724;
	static bool* Combat_bProjectileDebug = (bool*)0x11F20F0;
	static bool* Combat_bVatsAlwaysHit = (bool*)0x11DB118;
	static bool* Combat_bVATSProjectileDebug = (bool*)0x11F20BC;
	static bool* Controls_bAlwaysRunByDefault = (bool*)0x11E0B50;
	static bool* Controls_bBackgroundKeyboard = (bool*)0x11F35E0;
	static bool* Controls_bBackgroundMouse = (bool*)0x11F35EC;
	static bool* Controls_bUseJoystick = (bool*)0x11F35D4;
	static bool* Debug_bDebugFaceGenCriticalSection = (bool*)0x11D5A78;
	static bool* Debug_bDebugFaceGenMultithreading = (bool*)0x11D5AC8;
	static bool* Debug_bDebugSaveBuffer = (bool*)0x11DE4EC;
	static bool* Decals_bDebugDecals = (bool*)0x11C5908;
	static bool* Decals_bDecalMultithreaded = (bool*)0x11C58D4;
	static bool* Decals_bDecalOcclusionQuery = (bool*)0x11C58AC;
	static bool* Decals_bDecals = (bool*)0x11C5838;
	static bool* Decals_bProfileDecals = (bool*)0x11C5888;
	static bool* Decals_bSkinnedDecals = (bool*)0x11C58C0;
	static bool* Display_bActorSelfShadowing = (bool*)0x11C7668;
	static bool* Display_bAllow20HairShader = (bool*)0x11C73A8;
	static bool* Display_bAllow30Shaders = (bool*)0x11C713C;
	static bool* Display_bAllowPartialPrecision = (bool*)0x11C7708;
	static bool* Display_bAllowScreenShot = (bool*)0x11C741C;
	static bool* Display_bAutoViewDistance = (bool*)0x120318C;
	static bool* Display_bDecalsOnSkinnedGeometry = (bool*)0x11C76FC;
	static bool* Display_bDo30VFog = (bool*)0x11F94D8;
	static bool* Display_bDoActorShadows = (bool*)0x11C736C;
	static bool* Display_bDoAmbientPass = (bool*)0x11C7158;
	static bool* Display_bDoCanopyShadowPass = (bool*)0x11C75A8;
	static bool* Display_bDoDiffusePass = (bool*)0x11C7548;
	static bool* Display_bDoSpecularPass = (bool*)0x11C7130;
	static bool* Display_bDoStaticAndArchShadows = (bool*)0x11C7384;
	static bool* Display_bDoTallGrassEffect = (bool*)0x11C71C8;
	static bool* Display_bDoTestHDR = (bool*)0x11F94FC;
	static bool* Display_bDoTexturePass = (bool*)0x11C7184;
	static bool* Display_bDynamicWindowReflections = (bool*)0x11C7120;
	static bool* Display_bEquippedTorchesCastShadows = (bool*)0x11C7228;
	static bool* Display_bForce1XShaders = (bool*)0x11C74E4;
	static bool* Display_bForceMultiPass = (bool*)0x11C724C;
	static bool* Display_bForcePow2Textures = (bool*)0x11C753C;
	static bool* Display_bIgnoreResolutionCheck = (bool*)0x11C7330;
	static bool* Display_bImageSpaceEffects = (bool*)0x11F94E4;
	static bool* Display_bLODNoiseAniso = (bool*)0x11C7778;
	static bool* Display_bMTRendering = (bool*)0x11C7110;
	static bool* Display_bReportBadTangentSpace = (bool*)0x11C7674;
	static bool* Display_bShadowsOnGrass = (bool*)0x11C71E0;
	static bool* Display_bShowMenuTextureUse = (bool*)0x11DEC9C;
	static bool* Display_bStaticMenuBackground = (bool*)0x11C7554;
	static bool* Display_bUseFakeFullScreenMotionBlur = (bool*)0x11C75B4;
	static bool* Display_bUseRefractionShader = (bool*)0x11C7508;
	static bool* Display_bUseResolvableDepth = (bool*)0x11C7480;
	static bool* Display_bUseShaders = (bool*)0x11C7270;
	static bool* Display_bUseSunbeams = (bool*)0x11DEAE0;
	static bool* FootIK_bFootPlacementOn = (bool*)0x1267D84;
	static bool* FootIK_bRigidBodyController = (bool*)0x1267E20;
	static bool* GamePlay_bAllowHavokGrabTheLiving = (bool*)0x11E0B20;
	static bool* GamePlay_bEssentialTakeNoDamage = (bool*)0x11E088C;
	static bool* GamePlay_bHealthBarShowing = (bool*)0x11E098C;
	static bool* GamePlay_bInstantLevelUp = (bool*)0x11E09B4;
	static bool* GamePlay_bSetDemigodMode = (bool*)0x11E0898;
	static bool* GamePlay_bShowChallengeUpdates = (bool*)0x11CB4D8;
	static bool* GamePlay_bTrackProgress = (bool*)0x11E0A34;
	static bool* General_bActivateAllQuestScripts = (bool*)0x11CB820;
	static bool* General_bActorLookWithHavok = (bool*)0x11DF940;
	static bool* General_bAlwaysActive = (bool*)0x11DEEDC;
	static bool* General_bAnimateDoorPhysics = (bool*)0x11C4C68;
	static bool* General_bBorderRegionsEnabled = (bool*)0x11E08E4;
	static bool* General_bChangeTimeMultSlowly = (bool*)0x11DEDC0;
	static bool* General_bCheckCellOffsetsOnInit = (bool*)0x11CA640;
	static bool* General_bCheckPurgedTextureList = (bool*)0x11C3CD0;
	static bool* General_bCreateMapsEnable = (bool*)0x11C3FF8;
	static bool* General_bCreateShaderPackage = (bool*)0x11C7614;
	static bool* General_bCRTMemoryChecks = (bool*)0x11DEB58;
	static bool* General_bDebugSpectatorThreats = (bool*)0x11F31CC;
	static bool* General_bDefaultCOCPlacement = (bool*)0x11CA0AC;
	static bool* General_bDisableAllGore = (bool*)0x11DF7FC;
	static bool* General_bDisableAutoVanityMode = (bool*)0x11E09E4;
	static bool* General_bDisableDuplicateReferenceCheck = (bool*)0x11C3F5C;
	static bool* General_bDisplayBoundingVolumes = (bool*)0x11DEB64;
	static bool* General_bDrawSpellContact = (bool*)0x11DBAA8;
	static bool* General_bEnableBoundingVolumeOcclusion = (bool*)0x11DECDC;
	static bool* General_bExternalLODDataFiles = (bool*)0x11CA630;
	static bool* General_bFaceGenTexturing = (bool*)0x11CB9A0;
	static bool* General_bFaceMipMaps = (bool*)0x11D59B0;
	static bool* General_bFadeInScreenShot = (bool*)0x11DABB4;
	static bool* General_bFixAIPackagesOnLoad = (bool*)0x11C534C;
	static bool* General_bFixFaceNormals = (bool*)0x11D5A34;
	static bool* General_bKeepPluginWhenMerging = (bool*)0x11C409C;
	static bool* General_bLoadFaceGenHeadEGTFiles = (bool*)0x11D5AE0;
	static bool* General_bPreCullActors = (bool*)0x11DED84;
	static bool* General_bPreemptivelyUnloadCells = (bool*)0x11C3D44;
	static bool* General_bPreloadIntroSequence = (bool*)0x126FACC;
	static bool* General_bQueueWarnings = (bool*)0x11C3E68;
	static bool* General_bRenderLocalMapContinually = (bool*)0x11DA3BC;
	static bool* General_bRunActorMovementDuringRendering = (bool*)0x11DFB8C;
	static bool* General_bRunDetectionDuringRendering = (bool*)0x11DFC74;
	static bool* General_bRunMiddleLowLevelProcess = (bool*)0x11E0E50;
	static bool* General_bRunVTuneTest = (bool*)0x11DEAD0;
	static bool* General_bShowCheckMemoryOutput = (bool*)0x11DEFE0;
	static bool* General_bShowGunTarget = (bool*)0x11E0A54;
	static bool* General_bShowLoadingAreaMessage = (bool*)0x11C3DC0;
	static bool* General_bTaskletActorAnimMovementUpdates = (bool*)0x11F1270;
	static bool* General_bTaskletActorHavokSync = (bool*)0x11DF218;
	static bool* General_bTaskletActorSceneGraphUpdates = (bool*)0x11F1264;
	static bool* General_bTaskletCellTransformsUpdate = (bool*)0x11DF1BC;
	static bool* General_bTaskletTempEffectsUpdate = (bool*)0x11F1280;
	static bool* General_bTintMipMaps = (bool*)0x11C721C;
	static bool* General_bTrackAllDeaths = (bool*)0x11DF694;
	static bool* General_bUseEyeEnvMapping = (bool*)0x11D5AB8;
	static bool* General_bUseFaceGenHeads = (bool*)0x11D5A48;
	static bool* General_bUseHardDriveCache = (bool*)0x11DED6C;
	static bool* General_bUseMovementBlockedPackage = (bool*)0x11DF6B4;
	static bool* General_bUseMultibounds = (bool*)0x11CA11C;
	static bool* General_bUseMyGamesDirectory = (bool*)0x11DEAB4;
	static bool* General_bUseOptimizedTextureLoading = (bool*)0x11C5578;
	static bool* General_bUseThreadedAI = (bool*)0x11DFB6C;
	static bool* General_bUseThreadedMorpher = (bool*)0x11DED24;
	static bool* General_bUseThreadedParticleSystem = (bool*)0x11DEAF0;
	static bool* General_bUseThreadedTempEffects = (bool*)0x11DECC0;
	static bool* General_bWarnOnMissingFileEntry = (bool*)0x11C5560;
	static bool* Grass_bDrawShaderGrass = (bool*)0x11CA4F4;
	static bool* Grass_bGrassPointLighting = (bool*)0x11CA484;
	static bool* HAVOK_bAddBipedWhenKeyframed = (bool*)0x11C3DA4;
	static bool* HAVOK_bAutoWaterUsesHavokShapes = (bool*)0x11CC5AC;
	static bool* HAVOK_bDisablePlayerCollision = (bool*)0x11E0B68;
	static bool* HAVOK_bFindContactPointsOnAdd = (bool*)0x1267B44;
	static bool* HAVOK_bHavokDebug = (bool*)0x1267B2C;
	static bool* HAVOK_bPreventHavokAddAll = (bool*)0x11CA398;
	static bool* HAVOK_bPreventHavokAddClutter = (bool*)0x11CA3F0;
	static bool* HAVOK_bTreeTops = (bool*)0x11D5E88;
	static bool* Havok_bWONameSync = (bool*)0x1267BA4;
	static bool* HeadTracking_bDisableHeadTracking = (bool*)0x11DF6D4;
	static bool* Imagespace_bDoMotionBlur = (bool*)0x12024A0;
	static bool* Imagespace_bDoRadialBlur = (bool*)0x11F968C;
	static bool* Interface_bActivatePickUseGamebryoPick = (bool*)0x11D8B00;
	static bool* Interface_bAllowConsole = (bool*)0x11D8B98;
	static bool* Interface_bHideUnavailablePerks = (bool*)0x11DA038;
	static bool* Interface_bUseFuzzyPicking = (bool*)0x11CC62C;
	static bool* InterfaceFX_bEnableMenuRenderDebugMode = (bool*)0x11D8AB4;
	static bool* InterfaceFX_bUseImageSpaceMenuFX = (bool*)0x11D8BA4;
	static bool* InterfaceFX_bUseOptimizedMenuRendering = (bool*)0x11DB1E4;
	static bool* Landscape_bCurrentCellOnly = (bool*)0x11C9F64;
	static bool* Landscape_bPreventSafetyCheck = (bool*)0x11C9F84;
	static bool* LOD_bDisplayLODLand = (bool*)0x11DEEAC;
	static bool* LOD_bUseFaceGenLOD = (bool*)0x11D5A60;
	static bool* MESSAGES_bAllowYesToAll = (bool*)0x11DEC8C;
	static bool* MESSAGES_bBlockMessageBoxes = (bool*)0x11DEB40;
	static bool* MESSAGES_bSkipInitializationFlows = (bool*)0x11DED78;
	static bool* MESSAGES_bSkipProgramFlows = (bool*)0x11DEE24;
	static bool* MESSAGES_bUseWindowsMessageBox = (bool*)0x11DEDF8;
	static bool* NavMeshGeneration_bGlobalNavMeshCheck = (bool*)0x11D6CAC;
	static bool* Online_bXenonLoadDownloadedContent = (bool*)0x11F3648;
	static bool* Pathfinding_bBackgroundNavmeshUpdate = (bool*)0x11D71A4;
	static bool* Pathfinding_bBackgroundPathing = (bool*)0x11D77D0;
	static bool* Pathfinding_bCreateDebugInfo = (bool*)0x11D7454;
	static bool* Pathfinding_bCutDoors = (bool*)0x11D718C;
	static bool* Pathfinding_bDrawPathBounds = (bool*)0x11D8470;
	static bool* Pathfinding_bRebuildPathIfSmootherFailed = (bool*)0x11D742C;
	static bool* Pathfinding_bSelectedPathDrawAvoidNodes = (bool*)0x11D6E44;
	static bool* Pathfinding_bUseActorAvoidance = (bool*)0x11F2BBC;
	static bool* Pathfinding_bUseAlternateSmoothingForPrime = (bool*)0x11D7448;
	static bool* Pathfinding_bUseFartherCheckForAvoidance = (bool*)0x11F2BE4;
	static bool* Pathfinding_bUseObstacleAvoidance = (bool*)0x11D73E8;
	static bool* Pathfinding_bUseOldPathSmoothing = (bool*)0x11D7438;
	static bool* Pathfinding_bUsePathSmoothing = (bool*)0x11D73F4;
	static bool* Pathfinding_bUseRayCasts = (bool*)0x11D7408;
	static bool* Pathfinding_bUseStraightLineCheckFirst = (bool*)0x11D73DC;
	static bool* Pipboy_bEnableFlickerPipboy = (bool*)0x11DB2A8;
	static bool* Pipboy_bUsePipboyMode = (bool*)0x11DB2D0;
	static bool* RagdollAnim_bFootIK = (bool*)0x1267C34;
	static bool* RagdollAnim_bGrabIK = (bool*)0x1267C40;
	static bool* RagdollAnim_bLookIK = (bool*)0x1267C4C;
	static bool* RagdollAnim_bPoseMatching = (bool*)0x1267C64;
	static bool* RagdollAnim_bRagdollAnim = (bool*)0x1267C28;
	static bool* RagdollAnim_bRagdollFeedback = (bool*)0x1267C58;
	static bool* RenderedTerminal_bUseRenderedTerminals = (bool*)0x11DB624;
	static bool* SaveGame_bAllowProfileTransfer = (bool*)0x11DE284;
	static bool* SaveGame_bAllowScriptedAutosave = (bool*)0x11DE2A0;
	static bool* SaveGame_bAllowScriptedForceSave = (bool*)0x11DE2BC;
	static bool* SaveGame_bCopySaveGameToHostOrMemStick = (bool*)0x11DE30C;
	static bool* SaveGame_bDisplayMissingContentDialogue = (bool*)0x11DE24C;
	static bool* SaveGame_bOutputSaveGameScreenshot = (bool*)0x11DE300;
	static bool* SaveGame_bUseSaveGameHistory = (bool*)0x11DE0A8;
	static bool* ScreenSplatter_bBloodSplatterEnabled = (bool*)0x11C7850;
	static bool* ScreenSplatter_bCustomSplatterEnabled = (bool*)0x11C77F8;
	static bool* SpeedTree_bEnableTrees = (bool*)0x11D5CEC;
	static bool* SpeedTree_bForceFullLOD = (bool*)0x11D5D04;
	static bool* TerrainManager_bKeepLowDetailTerrain = (bool*)0x11D8764;
	static bool* TerrainManager_bUseDistantObjectBlocks = (bool*)0x11D86A0;
	static bool* TerrainManager_bUseDistantTrees = (bool*)0x11D8684;
	static bool* TerrainManager_bUseNewTerrainSystem = (bool*)0x11D86B0;
	static bool* TestAllCells_bFileCheckModelCollision = (bool*)0x11C4084;
	static bool* TestAllCells_bFileControllerOnRoot = (bool*)0x11CA3B0;
	static bool* TestAllCells_bFileGoneMessage = (bool*)0x11C3FD8;
	static bool* TestAllCells_bFileNeededMessage = (bool*)0x11C4058;
	static bool* TestAllCells_bFileShowIcons = (bool*)0x11C3F84;
	static bool* TestAllCells_bFileShowTextures = (bool*)0x11C4064;
	static bool* TestAllCells_bFileSkipIconChecks = (bool*)0x11C3F9C;
	static bool* TestAllCells_bFileSkipModelChecks = (bool*)0x11C4090;
	static bool* TestAllCells_bFileTestLoad = (bool*)0x11C3FAC;
	static bool* TestAllCells_bFileUnusedObject = (bool*)0x11C4078;
	static bool* VATS_bVATSSmartCameraCheckDebug = (bool*)0x11DF86C;
	static bool* Water_bForceHighDetailLandReflections = (bool*)0x11C7CC4;
	static bool* Water_bForceLowDetailReflections = (bool*)0x11C7AAC;
	static bool* Water_bReflectExplosions = (bool*)0x11C7AEC;
	static bool* Water_bUseBulletWaterDisplacements = (bool*)0x11C7C84;
	static bool* Water_bUsePerWorldSpaceWaterNoise = (bool*)0x11C7B9C;
	static bool* Water_bUseWater = (bool*)0x11C7AE0;
	static bool* Water_bUseWaterHiRes = (bool*)0x11C7B4C;
	static bool* Water_bUseWaterLOD = (bool*)0x11C7C58;
	static bool* Water_bUseWaterShader = (bool*)0x11C7B24;
	static bool* Weather_bPrecipitation = (bool*)0x11CCB90;
	static char* Archive_sArchiveList = (char*)0x11DEB98;
	static char* Archive_sInvalidationFile = (char*)0x11DEC6C;
	static char* CameraPath_sDirectoryName = (char*)0x11DEB08;
	static char* CameraPath_sNif = (char*)0x11DEE34;
	static char* CopyProtectionStrings_sCopyProtectionMessage = (char*)0x11DEEB8;
	static char* CopyProtectionStrings_sCopyProtectionMessage2 = (char*)0x11DEBBC;
	static char* CopyProtectionStrings_sCopyProtectionTitle = (char*)0x11DEBD4;
	static char* CopyProtectionStrings_sCopyProtectionTitle2 = (char*)0x11DEC00;
	static char* Display_sDebugText = (char*)0x11DED0C;
	static char* Display_sScreenShotBaseName = (char*)0x11DF0FC;
	static char* Fonts_sFontFile_1 = (char*)0x11F3418;
	static char* Fonts_sFontFile_2 = (char*)0x11F3424;
	static char* Fonts_sFontFile_3 = (char*)0x11F3430;
	static char* Fonts_sFontFile_4 = (char*)0x11F343C;
	static char* Fonts_sFontFile_5 = (char*)0x11F3448;
	static char* Fonts_sFontFile_6 = (char*)0x11F3454;
	static char* Fonts_sFontFile_7 = (char*)0x11F3460;
	static char* Fonts_sFontFile_8 = (char*)0x11F346C;
	static char* GamePlay_sTrackProgressPath = (char*)0x11E09D8;
	static char* General_sCharGenQuest = (char*)0x11DAC04;
	static char* General_sEssentialFileCacheList = (char*)0x11DEE7C;
	static char* General_sIntroMovie = (char*)0x11DE720;
	static char* General_sIntroSequence = (char*)0x11DE730;
	static char* General_sLanguage = (char*)0x11C3CB8;
	static char* General_sLocalMasterPath = (char*)0x11C4034;
	static char* General_sLocalSavePath = (char*)0x11C3F78;
	static char* General_sMainMenuMovieIntro = (char*)0x11DE744;
	static char* General_sStartingCell = (char*)0x11DED60;
	static char* General_sStartingCellX = (char*)0x11DEE90;
	static char* General_sStartingCellY = (char*)0x11DEBC8;
	static char* General_sStartingWorld = (char*)0x11DEB4C;
	static char* General_sTestFile1 = (char*)0x11DEBF4;
	static char* General_sTestFile10 = (char*)0x11DED4C;
	static char* General_sTestFile2 = (char*)0x11DEB8C;
	static char* General_sTestFile3 = (char*)0x11DECFC;
	static char* General_sTestFile4 = (char*)0x11DEEA0;
	static char* General_sTestFile5 = (char*)0x11DEC38;
	static char* General_sTestFile6 = (char*)0x11DEE10;
	static char* General_sTestFile7 = (char*)0x11DED18;
	static char* General_sTestFile8 = (char*)0x11DEE4C;
	static char* General_sTestFile9 = (char*)0x11DEA74;
	static char* General_sUnessentialFileCacheList = (char*)0x11DED30;
	static char* GeneralWarnings_sGeneralMasterMismatchWarning = (char*)0x11C404C;
	static char* GeneralWarnings_sMasterMismatchWarning = (char*)0x11C4028;
	static char* InterfaceFX_sScanlineTexture = (char*)0x11DB3DC;
	static char* Landscape_sDefaultLandDiffuseTexture = (char*)0x11CA008;
	static char* Landscape_sDefaultLandNormalTexture = (char*)0x11C9F90;
	static char* LANGUAGE_sDPad = (char*)0x11C3DE8;
	static char* LANGUAGE_sFailureMessage = (char*)0x11C3C88;
	static char* LANGUAGE_sSysUtil_AutoSaveWarning = (char*)0x11C3EB8;
	static char* LANGUAGE_sSysUtil_DirtyDisc = (char*)0x11C3E74;
	static char* LANGUAGE_sSysUtil_DiscEject = (char*)0x11C3D38;
	static char* LANGUAGE_sSysUtil_GameDataCorrupt = (char*)0x11C3CDC;
	static char* LANGUAGE_sSysUtil_GameDataInsufficientSpace = (char*)0x11C3CA0;
	static char* LANGUAGE_sSysUtil_Retry = (char*)0x11C3E4C;
	static char* LANGUAGE_sSysUtil_SaveDataCreateNew = (char*)0x11C3E2C;
	static char* LANGUAGE_sSysUtil_SaveDataInsufficientSpace = (char*)0x11C3CAC;
	static char* LANGUAGE_sThumbstick = (char*)0x11C3E8C;
	static char* Loading_sInitialSound = (char*)0x11DA188;
	static char* Loading_sMainMenuBackground = (char*)0x11DA1E4;
	static char* Loading_sTitleMusic = (char*)0x11DA0F4;
	static char* Loading_sWelcomeScreen1 = (char*)0x11DA1B4;
	static char* Loading_sWelcomeScreen2 = (char*)0x11DA1C0;
	static char* Loading_sWelcomeScreen3 = (char*)0x11DA1CC;
	static char* Loading_sWelcomeScreen4 = (char*)0x11DA1D8;
	static char* SaveGame_sSaveGameSafeMarkerID = (char*)0x11DE260;
	static char* sDefaultTexAtlas = (char*)0x11F336C;
	static char* VATS_sScanlineTexture = (char*)0x11DB748;
	static char* Voice_sFileTypeGame = (char*)0x11CBE18;
	static char* Voice_sFileTypeLip = (char*)0x11CBDE8;
	static char* Voice_sFileTypeLTF = (char*)0x11CBDBC;
	static char* Voice_sFileTypeSource = (char*)0x11CBE38;
	static char* Water_sSurfaceTexture = (char*)0x11C7C90;
	static char* Weather_sBumpFadeColor = (char*)0x11C3E10;
	static char* Weather_sEnvReduceColor = (char*)0x11C3C24;
	static char* Weather_sLerpCloseColor = (char*)0x11C3C54;
	static float* Audio_fASFadeInTime = (float*)0x11DD098;
	static float* Audio_fASFadeOutTime = (float*)0x11DD054;
	static float* Audio_fASFadeStartTime = (float*)0x11DD048;
	static float* Audio_fAudioDebugDelay = (float*)0x11F6E6C;
	static float* Audio_fChainLargeMassMin = (float*)0x11DDD10;
	static float* Audio_fChainMediumMassMin = (float*)0x11DDCF0;
	static float* Audio_fCollisionSoundHeavyThreshold = (float*)0x11DD8EC;
	static float* Audio_fCreatureRadioMax = (float*)0x11DD630;
	static float* Audio_fCreatureRadioMin = (float*)0x11DD5B4;
	static float* Audio_fDawnTime = (float*)0x11F6DC4;
	static float* Audio_fDayTime = (float*)0x11F6DD0;
	static float* Audio_fDBVoiceAttenuationIn2D = (float*)0x11E0610;
	static float* Audio_fDialogHitSoundCooldownMax = (float*)0x11DF710;
	static float* Audio_fDialogHitSoundCooldownMin = (float*)0x11DF740;
	static float* Audio_fDialogMaxDistance = (float*)0x11F6DB8;
	static float* Audio_fDialogMinDistance = (float*)0x11F6DAC;
	static float* Audio_fDialogueFadeDecibels = (float*)0x11F6E84;
	static float* Audio_fDialogueFadeSecondsIn = (float*)0x11F6E90;
	static float* Audio_fDialogueFadeSecondsOut = (float*)0x11F6E9C;
	static float* Audio_fDialogueHeadPitchExaggeration = (float*)0x11C652C;
	static float* Audio_fDialogueHeadRollExaggeration = (float*)0x11C6538;
	static float* Audio_fDialogueHeadYawExaggeration = (float*)0x11C6520;
	static float* Audio_fDuskTime = (float*)0x11F6DDC;
	static float* Audio_fEarthLargeMassMin = (float*)0x11DD9C0;
	static float* Audio_fEarthMediumMassMin = (float*)0x11DD91C;
	static float* Audio_fFilterdBAttenuation = (float*)0x11F7170;
	static float* Audio_fFilterDistortionGain = (float*)0x11F7158;
	static float* Audio_fFilterPEQGain = (float*)0x11F7164;
	static float* Audio_fGlassLargeMassMin = (float*)0x11DD940;
	static float* Audio_fGlassMediumMassMin = (float*)0x11DDCC8;
	static float* Audio_fHardLandingDamageThreshold = (float*)0x11DF6F0;
	static float* Audio_fLargeWeaponSpeedMax = (float*)0x11DD980;
	static float* Audio_fLargeWeaponWeightMin = (float*)0x11DDCD8;
	static float* Audio_fMainMenuMusicVolume = (float*)0x11DD088;
	static float* Audio_fMasterVolumeMult = (float*)0x11F6E78;
	static float* Audio_fMaxFootstepDistance = (float*)0x11DD904;
	static float* Audio_fMediumWeaponSpeedMax = (float*)0x11DD8C0;
	static float* Audio_fMediumWeaponWeightMin = (float*)0x11DDCBC;
	static float* Audio_fMetalLargeMassMin = (float*)0x11DD8D0;
	static float* Audio_fMetalMediumMassMin = (float*)0x11DD8F8;
	static float* Audio_fMinSoundVel = (float*)0x11CC274;
	static float* Audio_fNightTime = (float*)0x11F6DE8;
	static float* Audio_fPlayerFootVolume = (float*)0x11DD98C;
	static float* Audio_fRadioDialogMute = (float*)0x11DD5A8;
	static float* Audio_fRadioStaticAtOuterRadiusPct = (float*)0x11DD584;
	static float* Audio_fRegionLoopFadeInTime = (float*)0x11DD070;
	static float* Audio_fRegionLoopFadeOutTime = (float*)0x11DCFE8;
	static float* Audio_fSkinLargeMassMin = (float*)0x11DD928;
	static float* Audio_fSkinMediumMassMin = (float*)0x11DD9A4;
	static float* Audio_fStoneLargeMassMin = (float*)0x11DD9B4;
	static float* Audio_fStoneMediumMassMin = (float*)0x11DD9CC;
	static float* Audio_fWoodLargeMassMin = (float*)0x11DD9DC;
	static float* Audio_fWoodMediumMassMin = (float*)0x11DD934;
	static float* bLightAttenuation_fConstantValue = (float*)0x11C9004;
	static float* bLightAttenuation_fFlickerMovement = (float*)0x11C8FD0;
	static float* bLightAttenuation_fLinearRadiusMult = (float*)0x11C8FB4;
	static float* bLightAttenuation_fLinearValue = (float*)0x11C9090;
	static float* bLightAttenuation_fQuadraticRadiusMult = (float*)0x11C9070;
	static float* bLightAttenuation_fQuadraticValue = (float*)0x11C9044;
	static float* BlurShader_fAlphaAddExterior = (float*)0x11C71F8;
	static float* BlurShader_fAlphaAddInterior = (float*)0x11C74FC;
	static float* BlurShader_fBlurRadius = (float*)0x11C7620;
	static float* BlurShader_fSIEmmisiveMult = (float*)0x11C7690;
	static float* BlurShader_fSISpecularMult = (float*)0x11C7318;
	static float* BlurShader_fSkyBrightness = (float*)0x11C7750;
	static float* BlurShader_fSunBrightness = (float*)0x11C72A4;
	static float* BlurShader_fSunlightDimmer = (float*)0x11C7174;
	static float* BlurShaderHDR_fBlurRadius = (float*)0x11C74C8;
	static float* BlurShaderHDR_fBrightClamp = (float*)0x11C7204;
	static float* BlurShaderHDR_fBrightScale = (float*)0x11C7234;
	static float* BlurShaderHDR_fEmissiveHDRMult = (float*)0x11C769C;
	static float* BlurShaderHDR_fEyeAdaptSpeed = (float*)0x11C7264;
	static float* BlurShaderHDR_fGrassDimmer = (float*)0x11C7514;
	static float* BlurShaderHDR_fSIEmmisiveMult = (float*)0x11C74A4;
	static float* BlurShaderHDR_fSISpecularMult = (float*)0x11C745C;
	static float* BlurShaderHDR_fSkyBrightness = (float*)0x11C75C0;
	static float* BlurShaderHDR_fSunBrightness = (float*)0x11C775C;
	static float* BlurShaderHDR_fSunlightDimmer = (float*)0x11C748C;
	static float* BlurShaderHDR_fTargetLUM = (float*)0x11C71EC;
	static float* BlurShaderHDR_fTreeDimmer = (float*)0x11C7578;
	static float* BlurShaderHDR_fUpperLUMClamp = (float*)0x11C76DC;
	static float* BlurShaderHDRInterior_fBlurRadius = (float*)0x11C76EC;
	static float* BlurShaderHDRInterior_fBrightClamp = (float*)0x11C76A8;
	static float* BlurShaderHDRInterior_fBrightScale = (float*)0x11C74B0;
	static float* BlurShaderHDRInterior_fEmissiveHDRMult = (float*)0x11C7560;
	static float* BlurShaderHDRInterior_fEyeAdaptSpeed = (float*)0x11C7210;
	static float* BlurShaderHDRInterior_fTargetLUM = (float*)0x11C73C8;
	static float* BlurShaderHDRInterior_fUpperLUMClamp = (float*)0x11C714C;
	static float* BudgetCaps_fMaxMsUsagePerFrame = (float*)0x11C5B78;
	static float* BudgetCaps_fMsActiveRefCount = (float*)0x11C5B18;
	static float* BudgetCaps_fMsActorRefCount = (float*)0x11C5A30;
	static float* BudgetCaps_fMsAnimatedObjectsCount = (float*)0x11C596C;
	static float* BudgetCaps_fMsDecalCount = (float*)0x11C5C14;
	static float* BudgetCaps_fMsEmittersCount = (float*)0x11C59B0;
	static float* BudgetCaps_fMsGeometryCount = (float*)0x11C5C38;
	static float* BudgetCaps_fMsHavokTriCount = (float*)0x11C5B6C;
	static float* BudgetCaps_fMsLightCount = (float*)0x11C59D0;
	static float* BudgetCaps_fMsLightExcessGeometry = (float*)0x11C59FC;
	static float* BudgetCaps_fMsParticlesCount = (float*)0x11C5A08;
	static float* BudgetCaps_fMsRefCount = (float*)0x11C5BB4;
	static float* BudgetCaps_fMsTriangleCount = (float*)0x11C5AAC;
	static float* BudgetCaps_fMsWaterCount = (float*)0x11C5C74;
	static float* Combat_fAimChaseLookingMult = (float*)0x11E0478;
	static float* Combat_fAimDownDegrees = (float*)0x11E049C;
	static float* Combat_fAimUpDegrees = (float*)0x11E0490;
	static float* Combat_fDebugCombatProjectileLOSTime = (float*)0x11F1C28;
	static float* Combat_fDebugCombatTextSize = (float*)0x11F1C74;
	static float* Combat_fHiPerfNPCTargetLOSTimer = (float*)0x11F1A3C;
	static float* Combat_fHiPerfPCTargetLOSTimer = (float*)0x11F1A50;
	static float* Combat_fHitVectorDelay = (float*)0x11DF758;
	static float* Combat_fIronSightsZoomDefault = (float*)0x11E0974;
	static float* Combat_fLowPerfNPCTargetLOSTimer = (float*)0x11F1AD8;
	static float* Combat_fLowPerfPCTargetLOSTimer = (float*)0x11F1AB4;
	static float* Combat_fMinBloodDamage = (float*)0x11DF74C;
	static float* Combat_fProjectileDebugDuration = (float*)0x11F2110;
	static float* Controls_fAnalogMaxRunZonePercent = (float*)0x11E0860;
	static float* Controls_fAnalogRunZonePercent = (float*)0x11E0A7C;
	static float* Controls_fForegroundMouseAccelBase = (float*)0x11F361C;
	static float* Controls_fForegroundMouseAccelTop = (float*)0x11F3610;
	static float* Controls_fForegroundMouseBase = (float*)0x11F3604;
	static float* Controls_fForegroundMouseMult = (float*)0x11F35F8;
	static float* Controls_fForwardBias = (float*)0x11E0B98;
	static float* Controls_fJoystickLookLRMult = (float*)0x11E0844;
	static float* Controls_fJoystickLookUDMult = (float*)0x11E0AF4;
	static float* Controls_fJoystickMoveFBMult = (float*)0x11E0B44;
	static float* Controls_fJoystickMoveLRMult = (float*)0x11E086C;
	static float* Controls_fMaxAnalogRunSpeed = (float*)0x11E0920;
	static float* Controls_fMaxAnalogWalkSpeed = (float*)0x11E0B7C;
	static float* Controls_fMinAnalogRunSpeed = (float*)0x11E09C0;
	static float* Controls_fMinAnalogWalkSpeed = (float*)0x11E08B0;
	static float* Controls_fPlayerCharacterTurnMult = (float*)0x11E0968;
	static float* Controls_fUFOCamSpeedMult = (float*)0x11E0910;
	static float* Controls_fXenonMenuDpadRepeatSpeed = (float*)0x11D8AA8;
	static float* Controls_fXenonMenuMouseXYMult = (float*)0x11D8C60;
	static float* Controls_fXenonMenuStickSpeed = (float*)0x11D8B18;
	static float* Controls_fXenonMenuStickSpeedMaxMod = (float*)0x11D8ACC;
	static float* Controls_fXenonMenuStickSpeedPlayerRotMod = (float*)0x11D97AC;
	static float* Controls_fXenonMinLookSpeed = (float*)0x11E081C;
	static float* Display_fDecalLifetime = (float*)0x11C5878;
	static float* Display_fDecalLOD0 = (float*)0x11C77AC;
	static float* Display_fDefault1stPersonFOV = (float*)0x120316C;
	static float* Display_fDefaultFOV = (float*)0x1203154;
	static float* Display_fDefaultWorldFOV = (float*)0x1203160;
	static float* Display_fEnvMapLOD1 = (float*)0x11C7378;
	static float* Display_fEnvMapLOD2 = (float*)0x11C73EC;
	static float* Display_fEyeEnvMapLOD1 = (float*)0x11C7164;
	static float* Display_fEyeEnvMapLOD2 = (float*)0x11C72F4;
	static float* Display_fGammaMax = (float*)0x11DAB64;
	static float* Display_fGammaMin = (float*)0x11DAB9C;
	static float* Display_fLandLOFadeSeconds = (float*)0x11C75E4;
	static float* Display_fLightLODDefaultStartFade = (float*)0x11C7450;
	static float* Display_fLightLODMaxStartFade = (float*)0x11C74F0;
	static float* Display_fLightLODMinStartFade = (float*)0x11C72B0;
	static float* Display_fLightLODRange = (float*)0x11C76B8;
	static float* Display_fLODNoiseMipBias = (float*)0x11C7468;
	static float* Display_fNearDistance = (float*)0x1203148;
	static float* Display_fNoLODFarDistanceMax = (float*)0x1203130;
	static float* Display_fNoLODFarDistanceMin = (float*)0x1203124;
	static float* Display_fNoLODFarDistancePct = (float*)0x120313C;
	static float* Display_fPipboy1stPersonFOV = (float*)0x1203178;
	static float* Display_fScopeScissorAmount = (float*)0x11DEA90;
	static float* Display_fShadowFadeTime = (float*)0x11C7360;
	static float* Display_fShadowLODDefaultStartFade = (float*)0x11C727C;
	static float* Display_fShadowLODMaxStartFade = (float*)0x11C71BC;
	static float* Display_fShadowLODMinStartFade = (float*)0x11C7298;
	static float* Display_fShadowLODRange = (float*)0x11C7404;
	static float* Display_fSkinnedDecalLOD0 = (float*)0x11C758C;
	static float* Display_fSkinnedDecalLOD1 = (float*)0x11C7300;
	static float* Display_fSkinnedDecalLOD2 = (float*)0x11C7348;
	static float* Display_fSpecularLODDefaultStartFade = (float*)0x11C7498;
	static float* Display_fSpecularLODMaxStartFade = (float*)0x11C71D4;
	static float* Display_fSpecularLODMinStartFade = (float*)0x11C7444;
	static float* Display_fSpecularLODRange = (float*)0x11C7638;
	static float* fAvoidanceAvoidNodeCost = (float*)0x11F2B60;
	static float* fLowPerfCombatantVoiceDistance = (float*)0x11F1C98;
	static float* FootIK_fAnkleOffset = (float*)0x1267D9C;
	static float* FootIK_fControllerTetherLen = (float*)0x1267DD8;
	static float* FootIK_fFootPlantedGain = (float*)0x1267D78;
	static float* FootIK_fFootRaisedGain = (float*)0x1267D6C;
	static float* FootIK_fGroundAscendingGain = (float*)0x1267D54;
	static float* FootIK_fGroundDescendingGain = (float*)0x1267D60;
	static float* FootIK_fMaxFootCastMilliSec = (float*)0x1267DF0;
	static float* FootIK_fMaxStepVertError = (float*)0x1267DE4;
	static float* FootIK_fOnOffGain = (float*)0x1267D48;
	static float* FootIK_fOriginalGroundHeightMS = (float*)0x1267D90;
	static float* FootIK_fPelvisOffsetDamping = (float*)0x1267DB4;
	static float* FootIK_fPelvisUpDownBias = (float*)0x1267DA8;
	static float* FootIK_fRagdollFeedback = (float*)0x1267E14;
	static float* FootIK_fVertErrorGain = (float*)0x1267DC0;
	static float* fPC360ControllerMouseXMult = (float*)0x11E0998;
	static float* fPC360ControllerMouseYMult = (float*)0x11E0828;
	static float* fWeaponInteriorFarAttenuationMod = (float*)0x11DCFF8;
	static float* fWeaponInteriorFarVolumeMod = (float*)0x11DD038;
	static float* fWeaponInteriorNearAttenuationMod = (float*)0x11DD0B0;
	static float* fWeaponInteriorNearVolumeMod = (float*)0x11DD00C;
	static float* GamePlay_fHealthBarEmittanceFadeTime = (float*)0x11E01F8;
	static float* GamePlay_fHealthBarEmittanceTime = (float*)0x11E02C8;
	static float* GamePlay_fHealthBarFadeOutSpeed = (float*)0x11E028C;
	static float* GamePlay_fHealthBarHeight = (float*)0x11E0204;
	static float* GamePlay_fHealthBarSpeed = (float*)0x11E0250;
	static float* GamePlay_fHealthBarWidth = (float*)0x11E021C;
	static float* General_fAnimationDefaultBlend = (float*)0x11C5700;
	static float* General_fAnimationMult = (float*)0x11C5728;
	static float* General_fDegradeTexturesDistance = (float*)0x11DEBA4;
	static float* General_fLODActorAvoidanceDistance = (float*)0x11F2BD4;
	static float* General_fUpgradeTexturesDistance = (float*)0x11DEC5C;
	static float* General_fZoom3rdPersonSnapDist = (float*)0x11E0A88;
	static float* GethitShader_fBlockedTexOffset = (float*)0x11C7354;
	static float* GethitShader_fBlurAmmount = (float*)0x11C733C;
	static float* GethitShader_fHitTexOffset = (float*)0x11C7714;
	static float* GrabIK_fDriveGain = (float*)0x1267DFC;
	static float* Grass_fGrassDefaultStartFadeDistance = (float*)0x11CA4D0;
	static float* Grass_fGrassFadeRange = (float*)0x11CA49C;
	static float* Grass_fGrassMaxStartFadeDistance = (float*)0x11CA4DC;
	static float* Grass_fGrassMinStartFadeDistance = (float*)0x11CA4B0;
	static float* Grass_fGrassWindMagnitudeMax = (float*)0x11CA514;
	static float* Grass_fGrassWindMagnitudeMin = (float*)0x11CA490;
	static float* Grass_fTexturePctThreshold = (float*)0x11C9F3C;
	static float* Grass_fWaveOffsetRange = (float*)0x11C8DD0;
	static float* Hacking_fHackingMinSkillAverage = (float*)0x11D9688;
	static float* Hacking_fHackingMinSkillEasy = (float*)0x11D9664;
	static float* Hacking_fHackingMinSkillHard = (float*)0x11D95D8;
	static float* Hacking_fHackingMinSkillVeryEasy = (float*)0x11D9620;
	static float* Hacking_fHackingMinSkillVeryHard = (float*)0x11D9644;
	static float* HAVOK_fCameraCasterFadeSittingRadius = (float*)0x11CC18C;
	static float* HAVOK_fCameraCasterPlayerSize = (float*)0x11E09CC;
	static float* HAVOK_fCameraCasterSize = (float*)0x11E0938;
	static float* HAVOK_fCharControllerWarpDistSqr = (float*)0x1267BD8;
	static float* HAVOK_fChaseDeltaMult = (float*)0x11C3D2C;
	static float* HAVOK_fJumpAnimDelay = (float*)0x11DF730;
	static float* HAVOK_fMaxPickTime = (float*)0x11C3E58;
	static float* HAVOK_fMaxPickTimeDebug = (float*)0x11C3DDC;
	static float* HAVOK_fMaxPickTimeDebugVATS = (float*)0x11C3DD0;
	static float* HAVOK_fMaxPickTimeVATS = (float*)0x11C3E98;
	static float* HAVOK_fMaxTime = (float*)0x1267B38;
	static float* HAVOK_fMoveLimitMass = (float*)0x11C3D50;
	static float* HAVOK_fOD = (float*)0x11C62AC;
	static float* HAVOK_fQuadrupedPitchMult = (float*)0x11E0578;
	static float* HAVOK_fRF = (float*)0x11C6300;
	static float* HAVOK_fSD = (float*)0x11C62A0;
	static float* HAVOK_fSE = (float*)0x11C62C4;
	static float* HAVOK_fTimePerSubStep = (float*)0x1267B14;
	static float* HeadTracking_fUpdateDelayNewTargetSecondsMax = (float*)0x11DF790;
	static float* HeadTracking_fUpdateDelayNewTargetSecondsMin = (float*)0x11DF704;
	static float* HeadTracking_fUpdateDelaySecondsMax = (float*)0x11DF82C;
	static float* HeadTracking_fUpdateDelaySecondsMin = (float*)0x11DF814;
	static float* Imagespace_fRenderDepthMaxDepth = (float*)0x12023E0;
	static float* Interface_fActivatePickSphereRadius = (float*)0x11D8B7C;
	static float* Interface_fDlgFocus = (float*)0x11E0B88;
	static float* Interface_fDlgHeadingDegStart = (float*)0x11E0B2C;
	static float* Interface_fDlgHeadingDegStop = (float*)0x11E08C8;
	static float* Interface_fDlgLookAdj = (float*)0x11E08D4;
	static float* Interface_fDlgLookDegStart = (float*)0x11E0950;
	static float* Interface_fDlgLookDegStop = (float*)0x11E0904;
	static float* Interface_fDlgLookMult = (float*)0x11E095C;
	static float* Interface_fHUDShakeMult = (float*)0x11D974C;
	static float* Interface_fInterfaceTintB = (float*)0x11C73D4;
	static float* Interface_fInterfaceTintG = (float*)0x11C77D0;
	static float* Interface_fInterfaceTintR = (float*)0x11C75FC;
	static float* Interface_fKeyRepeatInterval = (float*)0x11D8B8C;
	static float* Interface_fKeyRepeatTime = (float*)0x11D8B3C;
	static float* Interface_fMenuBackgroundOpacity = (float*)0x11D3178;
	static float* Interface_fMenuBGBlurRadius = (float*)0x11DEDEC;
	static float* Interface_fMenuModeAnimBlend = (float*)0x11C5744;
	static float* Interface_fMenuPlayerLightAmbientBlue = (float*)0x11D8B0C;
	static float* Interface_fMenuPlayerLightAmbientGreen = (float*)0x11D8B70;
	static float* Interface_fMenuPlayerLightAmbientRed = (float*)0x11D8BE8;
	static float* Interface_fMenuPlayerLightDiffuseBlue = (float*)0x11D8AC0;
	static float* Interface_fMenuPlayerLightDiffuseGreen = (float*)0x11D8BB4;
	static float* Interface_fMenuPlayerLightDiffuseRed = (float*)0x11D8C44;
	static float* Interface_fPopUpBackgroundOpacity = (float*)0x11D3BCC;
	static float* Interface_fRSMFaceSliderDefaultMax = (float*)0x11DA6E0;
	static float* Interface_fRSMFaceSliderDefaultMin = (float*)0x11DA6A8;
	static float* Interface_fRSMStartingZoom = (float*)0x11DA6D0;
	static float* InterfaceFX_fBlurIntensityHUD = (float*)0x11DB23C;
	static float* InterfaceFX_fBlurIntensityMenus = (float*)0x11DB21C;
	static float* InterfaceFX_fBlurRadiusHUD = (float*)0x11DB204;
	static float* InterfaceFX_fBlurRadiusMenus = (float*)0x11DB1F4;
	static float* InterfaceFX_fDefaultBlurIntensity = (float*)0x11DB474;
	static float* InterfaceFX_fDefaultBlurRadius = (float*)0x11DB450;
	static float* InterfaceFX_fDefaultBurstDuration = (float*)0x11DB484;
	static float* InterfaceFX_fDefaultBurstIntensity = (float*)0x11DB440;
	static float* InterfaceFX_fDefaultScanlineFrequency = (float*)0x11DB494;
	static float* InterfaceFX_fDefaultShudderDuration = (float*)0x11DB418;
	static float* InterfaceFX_fDefaultShudderFrequency = (float*)0x11DB3B4;
	static float* InterfaceFX_fDefaultShudderIntensity = (float*)0x11DB3C0;
	static float* InterfaceFX_fDefaultVertHoldDuration = (float*)0x11DB4F0;
	static float* InterfaceFX_fDefaultVertHoldSpeed = (float*)0x11DB400;
	static float* InterfaceFX_fDistortDuration = (float*)0x11DB4D4;
	static float* InterfaceFX_fDistortHorizontalScale = (float*)0x11DB468;
	static float* InterfaceFX_fDistortVerticalScale = (float*)0x11DB524;
	static float* InterfaceFX_fHUDShudderDefaultDuration = (float*)0x11DB248;
	static float* InterfaceFX_fHUDShudderDefaultFrequencyX = (float*)0x11DB228;
	static float* InterfaceFX_fHUDShudderDefaultFrequencyY = (float*)0x11DB1D8;
	static float* InterfaceFX_fHUDShudderDefaultIntensity = (float*)0x11DB254;
	static float* InterfaceFX_fMenuPackerBufferOverflowZone = (float*)0x11D87E0;
	static float* InterfaceFX_fMenuPackerBufferSize = (float*)0x11D87F4;
	static float* InterfaceFX_fMiniBurstDuration = (float*)0x11DB45C;
	static float* InterfaceFX_fMiniBurstIntensity = (float*)0x11DB380;
	static float* InterfaceFX_fPulseBrightenIntensity = (float*)0x11DB3A8;
	static float* InterfaceFX_fPulseRadiusIntensity = (float*)0x11DB428;
	static float* InterfaceFX_fPulseRate = (float*)0x11DB40C;
	static float* InterfaceFX_fScanlineFrequencyHUD = (float*)0x11DB260;
	static float* InterfaceFX_fScanlineFrequencyMenus = (float*)0x11DB210;
	static float* InterfaceFX_fScreenLightBaseIntensity = (float*)0x11DB398;
	static float* InterfaceFX_fScreenLightBurstModifier = (float*)0x11DB434;
	static float* InterfaceFX_fScreenLightPulseModifier = (float*)0x11DB4A8;
	static float* InterfaceFX_fScreenLightRadius = (float*)0x11DB518;
	static float* InterfaceFX_fScreenLightVertHoldRate = (float*)0x11DB3EC;
	static float* InterfaceFX_fShudderChance = (float*)0x11DB4E4;
	static float* InterfaceFX_fVertHoldChance = (float*)0x11DB4B8;
	static float* Landscape_fLandFriction = (float*)0x11CC1DC;
	static float* Landscape_fLandTextureTilingMult = (float*)0x11C9F30;
	static float* Loading_fLoadingBkgdUpdateInterval = (float*)0x11DA1A4;
	static float* Loading_fLoadingInitUpdateInterval = (float*)0x11DA15C;
	static float* Loading_fLoadingTextUpdateInterval = (float*)0x11DA11C;
	static float* Loading_fMainMenuBkgdUpdateInterval = (float*)0x11DA194;
	static float* LOD_fActorLODDefault = (float*)0x11DAC3C;
	static float* LOD_fActorLODMax = (float*)0x11DAAF8;
	static float* LOD_fActorLODMin = (float*)0x11DAB20;
	static float* LOD_fDistanceMultiplier = (float*)0x11C3D64;
	static float* LOD_fFadeInThreshold = (float*)0x11C3D04;
	static float* LOD_fFadeInTime = (float*)0x11C3DF8;
	static float* LOD_fFadeOutThreshold = (float*)0x11C3E1C;
	static float* LOD_fFadeOutTime = (float*)0x11C3C60;
	static float* LOD_fItemLODDefault = (float*)0x11DABC4;
	static float* LOD_fItemLODMax = (float*)0x11DAC28;
	static float* LOD_fItemLODMin = (float*)0x11DABF4;
	static float* LOD_fLODBoundRadiusMult = (float*)0x11C3BE8;
	static float* LOD_fLodDistance = (float*)0x11D5B2C;
	static float* LOD_fLODFadeOutActorMultCity = (float*)0x11DED9C;
	static float* LOD_fLODFadeOutActorMultComplex = (float*)0x11DED90;
	static float* LOD_fLODFadeOutActorMultInterior = (float*)0x11DECCC;
	static float* LOD_fLODFadeOutItemMultCity = (float*)0x11DEE58;
	static float* LOD_fLODFadeOutItemMultComplex = (float*)0x11DEB14;
	static float* LOD_fLODFadeOutItemMultInterior = (float*)0x11DEDE0;
	static float* LOD_fLODFadeOutObjectMultCity = (float*)0x11DEC80;
	static float* LOD_fLODFadeOutObjectMultComplex = (float*)0x11DEC28;
	static float* LOD_fLODFadeOutObjectMultInterior = (float*)0x11DEA84;
	static float* LOD_fLODFadeOutPercent = (float*)0x11C3BBC;
	static float* LOD_fLODLandDropAmount = (float*)0x11DEDCC;
	static float* LOD_fLODLandVerticalBias = (float*)0x11DEEEC;
	static float* LOD_fLODMultTrees = (float*)0x11F915C;
	static float* LOD_fObjectLODDefault = (float*)0x11DAB70;
	static float* LOD_fObjectLODMax = (float*)0x11DAB7C;
	static float* LOD_fObjectLODMin = (float*)0x11DAB34;
	static float* LOD_fTalkingDistance = (float*)0x11D5B38;
	static float* LookIK_fAngleMax = (float*)0x1267D24;
	static float* LookIK_fAngleMaxEase = (float*)0x1267D30;
	static float* LookIK_fEaseAngleShutOff = (float*)0x1267D3C;
	static float* LookIK_fMaxTrackingDist = (float*)0x1267D0C;
	static float* LookIK_fMinTrackingDist = (float*)0x1267D18;
	static float* MAIN_fQuestScriptDelayTime = (float*)0x11CAC6C;
	static float* Menu_fCreditsScrollSpeed = (float*)0x11D94E8;
	static float* Pathfinding_fAICombatTurnSpeedScale = (float*)0x11F2AC8;
	static float* Pathfinding_fAITurnSpeedScale = (float*)0x11F2ADC;
	static float* Pathfinding_fAvoidanceAvoidAllRadius = (float*)0x11F2B90;
	static float* Pathfinding_fAvoidanceConeAngle = (float*)0x11F2BAC;
	static float* Pathfinding_fAvoidanceDefaultWaitTime = (float*)0x11F2B78;
	static float* Pathfinding_fAvoidanceDetectionTime = (float*)0x11F2B20;
	static float* Pathfinding_fAvoidanceIgnoreMinTime = (float*)0x11F2BC8;
	static float* Pathfinding_fAvoidanceIgnoreTime = (float*)0x11F2B40;
	static float* Pathfinding_fAvoidanceMinWaitTime = (float*)0x11F2B30;
	static float* Pathfinding_fAvoidanceTimeCheck = (float*)0x11F2B9C;
	static float* Pathfinding_fAvoidanceWiderConeAngle = (float*)0x11F2AFC;
	static float* Pathfinding_fCreatureCombatTurnSpeedScale = (float*)0x11F2B14;
	static float* Pathfinding_fCreatureTurnSpeedScale = (float*)0x11F2C14;
	static float* Pathfinding_fObstacleUpdateDeltaWhenMoving = (float*)0x11D71B4;
	static float* Pathfinding_fObstacleUpdateDeltaWhenUnknown = (float*)0x11D7198;
	static float* Pathfinding_fPOVSmootherAvoidNodeCost = (float*)0x11D7088;
	static float* Pathfinding_fRepathingWaitDistance = (float*)0x11F2B6C;
	static float* Pathfinding_fRotationSpeedIncrease = (float*)0x11F2AB8;
	static float* Pathfinding_fRunningWiderConeAngle = (float*)0x11F2B08;
	static float* Pathing_fFindClosestEdgesRadius = (float*)0x11D74E0;
	static float* Pathing_fINIDetectDoorsForPathingTime = (float*)0x11E02A0;
	static float* Pipboy_fBlurIntensityPipboy = (float*)0x11DB2E0;
	static float* Pipboy_fBlurRadiusPipboy = (float*)0x11DB32C;
	static float* Pipboy_fLightEffectFadeDuration = (float*)0x11DB2C0;
	static float* Pipboy_fLightEffectLightFadeDuration = (float*)0x11DB30C;
	static float* Pipboy_fScanlineFrequencyPipboy = (float*)0x11DB278;
	static float* Pipboy_fScrollKnobIncrement = (float*)0x11DB2F4;
	static float* Pipboy_fScrollKnobRate = (float*)0x11DB35C;
	static float* Pipboy_fTabKnobMaxPosition = (float*)0x11DB350;
	static float* Pipboy_fTabKnobMinPosition = (float*)0x11DB340;
	static float* Pipboy_fTabKnobMoveRate = (float*)0x11DB28C;
	static float* RagdollAnim_fAccelerationGain = (float*)0x1267C94;
	static float* RagdollAnim_fCameraDist = (float*)0x1267C70;
	static float* RagdollAnim_fDesiredVel = (float*)0x126829C;
	static float* RagdollAnim_fDetectionUpdateTimeSec = (float*)0x12682B4;
	static float* RagdollAnim_fHierarchyGain = (float*)0x1267C7C;
	static float* RagdollAnim_fImpulseLimit = (float*)0x12682A8;
	static float* RagdollAnim_fPositionGain = (float*)0x1267CAC;
	static float* RagdollAnim_fPositionMaxAngularVelocity = (float*)0x1267CC4;
	static float* RagdollAnim_fPositionMaxLinearVelocity = (float*)0x1267CB8;
	static float* RagdollAnim_fSnapGain = (float*)0x1267CD0;
	static float* RagdollAnim_fSnapMaxAngularDistance = (float*)0x1267D00;
	static float* RagdollAnim_fSnapMaxAngularVelocity = (float*)0x1267CE8;
	static float* RagdollAnim_fSnapMaxLinearDistance = (float*)0x1267CF4;
	static float* RagdollAnim_fSnapMaxLinearVelocity = (float*)0x1267CDC;
	static float* RagdollAnim_fVelocityDamping = (float*)0x1267C88;
	static float* RagdollAnim_fVelocityGain = (float*)0x1267CA0;
	static float* RenderedMenus_fRaceSexMenuDistortDuration = (float*)0x11DB5B8;
	static float* RenderedTerminal_fRaceSexMenuHPos = (float*)0x11DB5D0;
	static float* RenderedTerminal_fRaceSexMenuScale = (float*)0x11DB548;
	static float* RenderedTerminal_fRaceSexMenuVPos = (float*)0x11DB598;
	static float* RenderedTerminal_fRaceSexMenuZoom = (float*)0x11DB574;
	static float* RenderedTerminal_fRenderedTerminalFOV = (float*)0x11DB5F0;
	static float* RenderedTerminal_fRenderedTerminalHPos = (float*)0x11DB630;
	static float* RenderedTerminal_fRenderedTerminalScanlineScale = (float*)0x11DB678;
	static float* RenderedTerminal_fRenderedTerminalVPos = (float*)0x11DB618;
	static float* RenderedTerminal_fRenderedTerminalZoom = (float*)0x11DB660;
	static float* RenderedTerminal_fScreenLightBaseIntensity = (float*)0x11DB654;
	static float* RenderedTerminal_fScreenLightColorB = (float*)0x11DB5FC;
	static float* RenderedTerminal_fScreenLightColorG = (float*)0x11DB66C;
	static float* RenderedTerminal_fScreenLightColorR = (float*)0x11DB60C;
	static float* RenderedTerminal_fScreenLightRadius = (float*)0x11DB648;
	static float* SpeedTree_fCanopyShadowGrassMult = (float*)0x11D5D50;
	static float* SpeedTree_fLocalTreeMipMapLODBias = (float*)0x11DEC1C;
	static float* SpeedTree_fLODTreeMipMapLODBias = (float*)0x11DEB74;
	static float* SpeedTree_fTreeForceBranchDimming = (float*)0x11D5DBC;
	static float* SpeedTree_fTreeForceCS = (float*)0x11D5D18;
	static float* SpeedTree_fTreeForceLeafDimming = (float*)0x11D5D28;
	static float* SpeedTree_fTreeForceLLA = (float*)0x11D5D90;
	static float* SpeedTree_fTreeForceMaxBudAngle = (float*)0x11D5C84;
	static float* SpeedTree_fTreeForceMinBudAngle = (float*)0x11D5CA0;
	static float* SpeedTree_fTreeLODExponent = (float*)0x11D5CAC;
	static float* Surgery_fSurgeryPlayerDefaultHPos3D = (float*)0x11DAE2C;
	static float* Surgery_fSurgeryPlayerDefaultScale3D = (float*)0x11DAE00;
	static float* Surgery_fSurgeryPlayerDefaultVPos3D = (float*)0x11DADF4;
	static float* Surgery_fSurgeryPlayerZoom3D = (float*)0x11DADC0;
	static float* Surgery_fSurgerySkinHPos3D = (float*)0x11DAE0C;
	static float* Surgery_fSurgerySkinScale3D = (float*)0x11DAE84;
	static float* Surgery_fSurgerySkinVPos3D = (float*)0x11DAE38;
	static float* Surgery_fSurgerySkinZoom3D = (float*)0x11DAE70;
	static float* TerrainManager_fDefaultBlockLoadDistanceLow = (float*)0x11D8710;
	static float* TerrainManager_fDefaultTreeLoadDistance = (float*)0x11D8774;
	static float* TerrainManager_fDetailTextureScale = (float*)0x11D86FC;
	static float* TerrainManager_fHighBlockLoadDistanceLow = (float*)0x11D86F0;
	static float* TerrainManager_fHighTreeLoadDistance = (float*)0x11D871C;
	static float* TerrainManager_fLowBlockLoadDistanceLow = (float*)0x11D86C8;
	static float* TerrainManager_fLowTreeLoadDistance = (float*)0x11D8738;
	static float* TerrainManager_fMorphEndDistanceMult = (float*)0x11D86D8;
	static float* TerrainManager_fMorphStartDistanceMult = (float*)0x11D8758;
	static float* VATS_fBlurIntensity = (float*)0x11DB718;
	static float* VATS_fBlurRadius = (float*)0x11DB724;
	static float* VATS_fBurstDuration = (float*)0x11DB6DC;
	static float* VATS_fBurstIntensity = (float*)0x11DB754;
	static float* VATS_fDistortDuration = (float*)0x11DB6C0;
	static float* VATS_fDistortHorizontalScale = (float*)0x11DB7A0;
	static float* VATS_fDistortVerticalScale = (float*)0x11DB6E8;
	static float* VATS_fPulseIntensity = (float*)0x11DB7C8;
	static float* VATS_fPulseRadius = (float*)0x11DB6CC;
	static float* VATS_fPulseRate = (float*)0x11DB7DC;
	static float* VATS_fScanlineFrequency = (float*)0x11DB77C;
	static float* VATS_fScanModeDuration = (float*)0x11DB734;
	static float* VATS_fScanModeScanlineFrequency = (float*)0x11DB698;
	static float* VATS_fScanModeVerticalScale = (float*)0x11DB7B8;
	static float* VATS_fVATSColorB = (float*)0x11DB704;
	static float* VATS_fVATSColorG = (float*)0x11DB76C;
	static float* VATS_fVATSColorR = (float*)0x11DB6F8;
	static float* VATS_fVATSLightAngle = (float*)0x11F2308;
	static float* VATS_fVatsLightColorB = (float*)0x11F22D0;
	static float* VATS_fVatsLightColorG = (float*)0x11F22AC;
	static float* VATS_fVatsLightColorR = (float*)0x11F21F8;
	static float* VATS_fVATSLightDistance = (float*)0x11F2230;
	static float* VATS_fVATSLightElevation = (float*)0x11F2210;
	static float* VATS_fVATSLightLevelMax = (float*)0x11F2204;
	static float* VATS_fVATSLightLevelMin = (float*)0x11F229C;
	static float* VATS_fVATSTargetPulseRate = (float*)0x11DB790;
	static float* Water_fExteriorWaterReflectionThreshold = (float*)0x11C7ABC;
	static float* Water_fInteriorWaterReflectionThreshold = (float*)0x11C7C40;
	static float* Water_fNearWaterIndoorTolerance = (float*)0x11C7BDC;
	static float* Water_fNearWaterOutdoorTolerance = (float*)0x11C7BA8;
	static float* Water_fNearWaterUnderwaterFreq = (float*)0x11C7C70;
	static float* Water_fNearWaterUnderwaterVolume = (float*)0x11C7CDC;
	static float* Water_fRefractionWaterPlaneBias = (float*)0x11C7C14;
	static float* Water_fSurfaceTileSize = (float*)0x11C7B18;
	static float* Water_fTileTextureDivisor = (float*)0x11C7CD0;
	static float* Water_fWadingWaterQuadSize = (float*)0x11C7B58;
	static float* Water_fWadingWaterTextureRes = (float*)0x11C7CA8;
	static float* Water_fWaterGroupHeightRange = (float*)0x11C7A80;
	static float* Weather_fAlphaReduce = (float*)0x11C3CF8;
	static float* Weather_fSunBaseSize = (float*)0x11CCE80;
	static float* Weather_fSunGlareSize = (float*)0x11CCE54;
	static SInt32* Archive_iRetainDirectoryStringTable = (SInt32*)0x11DEB28;
	static SInt32* Archive_iRetainFilenameOffsetTable = (SInt32*)0x11DEC44;
	static SInt32* Archive_iRetainFilenameStringTable = (SInt32*)0x11DEAA4;
	static SInt32* Audio_iAttenuationDialogMenuMute = (SInt32*)0x11F6EB4;
	static SInt32* Audio_iAttenuationEffectiveSilence = (SInt32*)0x11F6EA8;
	static SInt32* Audio_iAudioCacheSize = (SInt32*)0x11F6ECC;
	static SInt32* Audio_iAudioHWThread = (SInt32*)0x11F6EE4;
	static SInt32* Audio_iCollisionSoundTimeDelta = (SInt32*)0x11DD96C;
	static SInt32* Audio_iMaxFX = (SInt32*)0x11F7140;
	static SInt32* Audio_iMaxImpactSoundCount = (SInt32*)0x11DDCE4;
	static SInt32* Audio_iMaxSizeForCachedSound = (SInt32*)0x11F6ED8;
	static SInt32* Audio_iMusicSynchOverride = (SInt32*)0x11DCFD8;
	static SInt32* Audio_iMusicTransitionInMS = (SInt32*)0x11DD064;
	static SInt32* Audio_iRadioStationTimeout = (SInt32*)0x11DD618;
	static SInt32* Audio_iRadioUpdateInterval = (SInt32*)0x11DD5D0;
	static SInt32* Audio_iVoiceDecodeBufferSize = (SInt32*)0x11F714C;
	static SInt32* BackgroundLoad_iAnimationClonePerLoop = (SInt32*)0x11C577C;
	static SInt32* BackgroundLoad_iPostProcessMilliseconds = (SInt32*)0x1202DAC;
	static SInt32* BackgroundLoad_iPostProcessMillisecondsEditor = (SInt32*)0x1202DC4;
	static SInt32* BackgroundLoad_iPostProcessMillisecondsLoadingQueuedPriority = (SInt32*)0x1202DB8;
	static SInt32* BackgroundLoad_iPostProcessTaskWarningMilliseconds = (SInt32*)0x1202DD0;
	static SInt32* BlurShader_iBlendType = (SInt32*)0x11C7240;
	static SInt32* BlurShader_iBlurTexSize = (SInt32*)0x11C7410;
	static SInt32* BlurShader_iNumBlurpasses = (SInt32*)0x11C73BC;
	static SInt32* BlurShaderHDR_iBlendType = (SInt32*)0x11C71A4;
	static SInt32* BlurShaderHDR_iNumBlurpasses = (SInt32*)0x11C739C;
	static SInt32* BlurShaderHDRInterior_iNumBlurpasses = (SInt32*)0x11C7438;
	static SInt32* CameraPath_iFPS = (SInt32*)0x11DEE04;
	static SInt32* CameraPath_iTake = (SInt32*)0x11DEED0;
	static SInt32* Combat_iMaxHiPerfCombatCount = (SInt32*)0x11DF784;
	static SInt32* Combat_iMaxHiPerfNPCTargetCount = (SInt32*)0x11F1A20;
	static SInt32* Combat_iMaxHiPerfPCTargetCount = (SInt32*)0x11F1A7C;
	static SInt32* Combat_iShowHitVector = (SInt32*)0x11DF83C;
	static SInt32* Controls_iJoystickLookLeftRight = (SInt32*)0x11E0834;
	static SInt32* Controls_iJoystickLookUpDown = (SInt32*)0x11E0AE0;
	static SInt32* Controls_iJoystickMoveFrontBack = (SInt32*)0x11E0A24;
	static SInt32* Controls_iJoystickMoveLeftRight = (SInt32*)0x11E09A8;
	static SInt32* Controls_iLanguage = (SInt32*)0x11F3628;
	static SInt32* Controls_iXenonHorizLookAccel = (SInt32*)0x11E0A94;
	static SInt32* Controls_iXenonMenuStickDeadZone = (SInt32*)0x11D8B60;
	static SInt32* Controls_iXenonVertLookAccel = (SInt32*)0x11E08A4;
	static SInt32* Display_iAutoViewHiFrameRate = (SInt32*)0x12031A4;
	static SInt32* Display_iAutoViewLowFrameRate = (SInt32*)0x1203198;
	static SInt32* Display_iAutoViewMinDistance = (SInt32*)0x12031B0;
	static SInt32* Display_iDebugTextLeftRightOffset = (SInt32*)0x11DEEC4;
	static SInt32* Display_iDebugTextTopBottomOffset = (SInt32*)0x11DEBB0;
	static SInt32* Display_iLocationX = (SInt32*)0x11C75D8;
	static SInt32* Display_iLocationY = (SInt32*)0x11C7658;
	static SInt32* Display_iNPatches = (SInt32*)0x11C7104;
	static SInt32* Display_iNPatchNOrder = (SInt32*)0x11C75F0;
	static SInt32* Display_iNPatchPOrder = (SInt32*)0x11C7474;
	static SInt32* Display_iPresentInterval = (SInt32*)0x11C762C;
	static SInt32* DistantLOD_iDistantLODGroupWidth = (SInt32*)0x11F9654;
	static SInt32* FootIK_iNumFramesFootEaseOut = (SInt32*)0x1267DCC;
	static SInt32* GamePlay_iActorsDismemberedPerFrame = (SInt32*)0x11E0A14;
	static SInt32* GamePlay_iDetectionPicks = (SInt32*)0x11DF808;
	static SInt32* General_iAIThread1HWThread = (SInt32*)0x11DFB38;
	static SInt32* General_iAIThread2HWThread = (SInt32*)0x11DFB1C;
	static SInt32* General_iFPSClamp = (SInt32*)0x11DEE64;
	static SInt32* General_iHoursToSleep = (SInt32*)0x11E0AA0;
	static SInt32* General_iHWThread1 = (SInt32*)0x12677E0;
	static SInt32* General_iHWThread2 = (SInt32*)0x12677EC;
	static SInt32* General_iHWThread3 = (SInt32*)0x12677F8;
	static SInt32* General_iHWThread4 = (SInt32*)0x1267804;
	static SInt32* General_iHWThread5 = (SInt32*)0x1267810;
	static SInt32* General_iHWThread6 = (SInt32*)0x126781C;
	static SInt32* General_iIntroSequencePriority = (SInt32*)0x126FAE4;
	static SInt32* General_iNumBitsForFullySeen = (SInt32*)0x11DF19C;
	static SInt32* General_iNumHWThreads = (SInt32*)0x11C3EA8;
	static SInt32* General_iPreloadSizeLimit = (SInt32*)0x126FAD8;
	static SInt32* General_iRenderingThread1HWThread = (SInt32*)0x1200074;
	static SInt32* General_iRenderingThread2HWThread = (SInt32*)0x1200080;
	static SInt32* Grass_iGrassDensityEvalSize = (SInt32*)0x11C9FBC;
	static SInt32* Grass_iMaxGrassTypesPerTexure = (SInt32*)0x11C9F78;
	static SInt32* Grass_iMinGrassSize = (SInt32*)0x11CA528;
	static SInt32* HAVOK_iEntityBatchRemoveRate = (SInt32*)0x11C3C40;
	static SInt32* Havok_iHavokSkipFrameCountTEST = (SInt32*)0x11E05B8;
	static SInt32* HAVOK_iMinNumSubSteps = (SInt32*)0x1267B20;
	static SInt32* HAVOK_iSimType = (SInt32*)0x11CC2EC;
	static SInt32* HAVOK_iUpdateType = (SInt32*)0x11C3C34;
	static SInt32* HeadTracking_iUpdateActorsPerFrame = (SInt32*)0x11DF84C;
	static SInt32* iConcentricLengthMaxAverage = (SInt32*)0x11D4BA4;
	static SInt32* iConcentricLengthMaxEasy = (SInt32*)0x11D425C;
	static SInt32* iConcentricLengthMaxHard = (SInt32*)0x11D2FBC;
	static SInt32* iConcentricLengthMaxVeryEasy = (SInt32*)0x11D2740;
	static SInt32* iConcentricLengthMaxVeryHard = (SInt32*)0x11D4748;
	static SInt32* iConcentricLengthMinAverage = (SInt32*)0x11D2BCC;
	static SInt32* iConcentricLengthMinEasy = (SInt32*)0x11D4244;
	static SInt32* iConcentricLengthMinHard = (SInt32*)0x11D2338;
	static SInt32* iConcentricLengthMinVeryEasy = (SInt32*)0x11D367C;
	static SInt32* iConcentricLengthMinVeryHard = (SInt32*)0x11D50D8;
	static SInt32* iDetectionHighNumPicks = (SInt32*)0x11DF6E4;
	static SInt32* iLastHDRSetting = (SInt32*)0x11C77C4;
	static SInt32* iLowProcessingMilliseconds = (SInt32*)0x11E0E68;
	static SInt32* Interface_iMaxViewCasterPicksFuzzy = (SInt32*)0x11CC66C;
	static SInt32* Interface_iMaxViewCasterPicksGamebryo = (SInt32*)0x11CC648;
	static SInt32* Interface_iMaxViewCasterPicksHavok = (SInt32*)0x11CC620;
	static SInt32* Interface_iSafeZoneX = (SInt32*)0x11D8BDC;
	static SInt32* Interface_iSafeZoneXWide = (SInt32*)0x11D8C00;
	static SInt32* Interface_iSafeZoneY = (SInt32*)0x11D8BF4;
	static SInt32* Interface_iSafeZoneYWide = (SInt32*)0x11D8BC4;
	static SInt32* InterfaceFX_iDistortMaxInterval = (SInt32*)0x11DB4FC;
	static SInt32* iSweetSpotLengthMaxAverage = (SInt32*)0x11D4C1C;
	static SInt32* iSweetSpotLengthMaxEasy = (SInt32*)0x11D337C;
	static SInt32* iSweetSpotLengthMaxHard = (SInt32*)0x11D4DD8;
	static SInt32* iSweetSpotLengthMaxVeryEasy = (SInt32*)0x11D4BE0;
	static SInt32* iSweetSpotLengthMaxVeryHard = (SInt32*)0x11D3220;
	static SInt32* iSweetSpotLengthMinAverage = (SInt32*)0x11D39AC;
	static SInt32* iSweetSpotLengthMinEasy = (SInt32*)0x11D43AC;
	static SInt32* iSweetSpotLengthMinHard = (SInt32*)0x11D48C8;
	static SInt32* iSweetSpotLengthMinVeryEasy = (SInt32*)0x11D4AA8;
	static SInt32* iSweetSpotLengthMinVeryHard = (SInt32*)0x11D38C8;
	static SInt32* Landscape_iLandBorder1B = (SInt32*)0x11C9FCC;
	static SInt32* Landscape_iLandBorder1G = (SInt32*)0x11C9FA0;
	static SInt32* Landscape_iLandBorder1R = (SInt32*)0x11C9F24;
	static SInt32* Landscape_iLandBorder2B = (SInt32*)0x11C9FB0;
	static SInt32* Landscape_iLandBorder2G = (SInt32*)0x11CA028;
	static SInt32* Landscape_iLandBorder2R = (SInt32*)0x11C9FF8;
	static SInt32* Loading_iMaxScreens = (SInt32*)0x11DA13C;
	static SInt32* Loading_iMaxScreens_MainMenu = (SInt32*)0x11DA128;
	static SInt32* Loading_iNumLocationSpecificScreens = (SInt32*)0x11DA10C;
	static SInt32* LOD_iFadeNodeMinNearDistance = (SInt32*)0x11F914C;
	static SInt32* Menu_iConsoleFont = (SInt32*)0x11D8D3C;
	static SInt32* Menu_iConsoleHistorySize = (SInt32*)0x11D8CF4;
	static SInt32* Menu_iConsoleLineSpacing = (SInt32*)0x11D8D20;
	static SInt32* Menu_iConsoleTextXPos = (SInt32*)0x11D8D48;
	static SInt32* Menu_iConsoleTextYPos = (SInt32*)0x11D8D0C;
	static SInt32* Menu_iConsoleVisibleLines = (SInt32*)0x11D8D00;
	static SInt32* Menu_iDebugTextFont = (SInt32*)0x11F33CC;
	static SInt32* MESSAGES_iFileLogging = (SInt32*)0x11DEE70;
	static SInt32* SaveGame_iSaveGameBackupCount = (SInt32*)0x11DE2CC;
	static SInt32* SpeedTree_iCanopyShadowScale = (SInt32*)0x11D5D9C;
	static SInt32* VATS_iDistortMaxInterval = (SInt32*)0x11DB760;
	static SInt32* Water_iWaterNoiseResolution = (SInt32*)0x11CA574;
	static UInt32* bLightAttenuation_uLinearMethod = (UInt32*)0x11C9058;
	static UInt32* bLightAttenuation_uQuadraticMethod = (UInt32*)0x11C9080;
	static UInt32* BudgetCaps_uActiveRefCount = (UInt32*)0x11C5AF4;
	static UInt32* BudgetCaps_uActiveRefCountInterior = (UInt32*)0x11C5A88;
	static UInt32* BudgetCaps_uActorMemoryBudgetCap = (UInt32*)0x11C59E4;
	static UInt32* BudgetCaps_uActorRefCount = (UInt32*)0x11C5A44;
	static UInt32* BudgetCaps_uActorRefCountInterior = (UInt32*)0x11C5BFC;
	static UInt32* BudgetCaps_uAnimatedObjectsCount = (UInt32*)0x11C5C28;
	static UInt32* BudgetCaps_uAnimatedObjectsCountInterior = (UInt32*)0x11C5988;
	static UInt32* BudgetCaps_uCityLODBudgetAdjustment = (UInt32*)0x11C5C08;
	static UInt32* BudgetCaps_uDecalCount = (UInt32*)0x11C5BE0;
	static UInt32* BudgetCaps_uDecalCountInterior = (UInt32*)0x11C59BC;
	static UInt32* BudgetCaps_uEmittersCount = (UInt32*)0x11C5A68;
	static UInt32* BudgetCaps_uEmittersCountInterior = (UInt32*)0x11C5B0C;
	static UInt32* BudgetCaps_uGeometryCount = (UInt32*)0x11C5A5C;
	static UInt32* BudgetCaps_uGeometryCountInterior = (UInt32*)0x11C5958;
	static UInt32* BudgetCaps_uGeometryMemory = (UInt32*)0x11C5BC0;
	static UInt32* BudgetCaps_uGeometryMemoryInterior = (UInt32*)0x11C5C84;
	static UInt32* BudgetCaps_uHavokTriCount = (UInt32*)0x11C59A4;
	static UInt32* BudgetCaps_uHavokTriCountInterior = (UInt32*)0x11C5998;
	static UInt32* BudgetCaps_uLightCount = (UInt32*)0x11C5B84;
	static UInt32* BudgetCaps_uLightCountInterior = (UInt32*)0x11C5BD0;
	static UInt32* BudgetCaps_uLightExcessGeometry = (UInt32*)0x11C5A94;
	static UInt32* BudgetCaps_uLightExcessGeometryInterior = (UInt32*)0x11C5BA4;
	static UInt32* BudgetCaps_uLoadedAreaNonActorMemoryBudgetCap = (UInt32*)0x11C5B24;
	static UInt32* BudgetCaps_uParticlesCount = (UInt32*)0x11C5B40;
	static UInt32* BudgetCaps_uParticlesCountInterior = (UInt32*)0x11C5B90;
	static UInt32* BudgetCaps_uRefCount = (UInt32*)0x11C5A20;
	static UInt32* BudgetCaps_uRefCountInterior = (UInt32*)0x11C5B00;
	static UInt32* BudgetCaps_uTextureMemory = (UInt32*)0x11C5B60;
	static UInt32* BudgetCaps_uTextureMemoryInterior = (UInt32*)0x11C5C64;
	static UInt32* BudgetCaps_uTriangleCount = (UInt32*)0x11C59F0;
	static UInt32* BudgetCaps_uTriangleCountInterior = (UInt32*)0x11C5AA0;
	static UInt32* BudgetCaps_uWastelandLODBudgetAdjustment = (UInt32*)0x11C5AE4;
	static UInt32* BudgetCaps_uWaterCount = (UInt32*)0x11C5A14;
	static UInt32* BudgetCaps_uWaterCountInterior = (UInt32*)0x11C5AC8;
	static UInt32* BudgetCaps_uWaterMemory = (UInt32*)0x11C5C54;
	static UInt32* BudgetCaps_uWaterMemoryInterior = (UInt32*)0x11C5A50;
	static UInt32* Decals_uMaxSkinDecalPerActor = (UInt32*)0x11C58A0;
	static UInt32* Decals_uMaxSkinDecals = (UInt32*)0x11C58E8;
	static UInt32* Display_uVideoDeviceIdentifierPart1 = (UInt32*)0x11C7608;
	static UInt32* Display_uVideoDeviceIdentifierPart2 = (UInt32*)0x11C7644;
	static UInt32* Display_uVideoDeviceIdentifierPart3 = (UInt32*)0x11C7324;
	static UInt32* Display_uVideoDeviceIdentifierPart4 = (UInt32*)0x11C75CC;
	static UInt32* General_uExteriorCellBuffer = (UInt32*)0x11C3C94;
	static UInt32* General_uGridsToLoad = (UInt32*)0x11C63D0;
	static UInt32* General_uiEGTClampSize = (UInt32*)0x11D5A54;
	static UInt32* General_uiFaceGenMaxEGMDataSize = (UInt32*)0x11D59F8;
	static UInt32* General_uiFaceGenMaxEGTDataSize = (UInt32*)0x11D5B00;
	static UInt32* General_uInteriorCellBuffer = (UInt32*)0x11C3E3C;
	static UInt32* Online_uXenonPresenceUpdateInterval = (UInt32*)0x11F363C;
	static UInt32* RagdollFeedback_uiFeedbackTimeout = (UInt32*)0x1267E08;
	static UInt32* TerrainManager_uDistantTreeBlockCacheSizePerCell = (UInt32*)0x11D85AC;
	static UInt32* TerrainManager_uTerrainTextureFadeTime = (UInt32*)0x11D8744;
	static UInt32* Water_uMaxExteriorWaterReflections = (UInt32*)0x11C7BF0;
	static UInt32* Water_uMaxInteriorWaterReflections = (UInt32*)0x11C7B00;
	static UInt32* Water_uNearWaterPoints = (UInt32*)0x11C7BB4;
	static UInt32* Water_uNearWaterRadius = (UInt32*)0x11C7B30;
	static UInt32* Water_uSurfaceFPS = (UInt32*)0x11C7AA0;
	static void* Menu_rDebugTextColor = (void*)0x11F33C0;
};
#endif

#if 1
namespace eINIPrefSettingCollection
{
	static bool* Controls_bGamePadRumble = (bool*)0x11E0854;
	static bool* Controls_bInvertYValues = (bool*)0x11E0A60;
	static bool* GamePlay_bCrossHair = (bool*)0x11D8A3C;
	static bool* GamePlay_bDialogueSubtitles = (bool*)0x11D8938;
	static bool* GamePlay_bDisableDynamicCrosshair = (bool*)0x11D8A10;
	static bool* GamePlay_bGeneralSubtitles = (bool*)0x11D892C;
	static bool* GamePlay_bSaveOnInteriorExteriorSwitch = (bool*)0x11D8A24;
	static bool* GamePlay_bSaveOnRest = (bool*)0x11D89F4;
	static bool* GamePlay_bSaveOnTravel = (bool*)0x11D8984;
	static bool* GamePlay_bSaveOnWait = (bool*)0x11D8978;
	static bool* GamePlay_bShowQuestMarkers = (bool*)0x11E07F4;
	static bool* GamePlay_bTrueIronSights = (bool*)0x11D8990;
	static bool* Interface_bDisable360Controller = (bool*)0x11D8C50;
	static bool* Interface_bHelpEnabled = (bool*)0x11DB098;
	static float* Audio_fDefaultEffectsVolume = (float*)0x11F6E3C;
	static float* Audio_fDefaultFootVolume = (float*)0x11F6E24;
	static float* Audio_fDefaultMasterVolume = (float*)0x11F6E18;
	static float* Audio_fDefaultMusicVolume = (float*)0x11F6E48;
	static float* Audio_fDefaultRadioVolume = (float*)0x11F6E54;
	static float* Audio_fDefaultVoiceVolume = (float*)0x11F6E30;
	static float* Controls_fMouseSensitivity = (float*)0x11E0A70;
	static float* Controls_fXenonHorizLookSpeed = (float*)0x11E092C;
	static float* Controls_fXenonVertLookSpeed = (float*)0x11E08BC;
	static float* Display_fGamma = (float*)0x11C71B0;
	static float* Interface_fHudOpacity = (float*)0x11D9778;
	static SInt32* Display_iScreenShotIndex = (SInt32*)0x11DF128;
	static SInt32* GamePlay_iDifficulty = (SInt32*)0x11E0944;
	static SInt32* GamePlay_iKillCamera = (SInt32*)0x11E0880;
	static UInt32* GamePlay_uiRedeemedContent = (UInt32*)0x11E0B04;
	static UInt32* Interface_uHUDColor = (UInt32*)0x11D8AD8;
	static UInt32* Interface_uPipboyColor = (UInt32*)0x11D8AE8;
}
#endif

#if 1
namespace eBlendSettingCollection
{
	static char* DEFAULT_sBody = (char*)0x11CC7B4;
	static char* DEFAULT_sHead = (char*)0x11CC7A4;
	static char* DEFAULT_sLCalf = (char*)0x11CC858;
	static char* DEFAULT_sLFoot = (char*)0x11CC90C;
	static char* DEFAULT_sLForeArm = (char*)0x11CC8B8;
	static char* DEFAULT_sLHand = (char*)0x11CC888;
	static char* DEFAULT_sLThigh = (char*)0x11CC6AC;
	static char* DEFAULT_sLUpperArm = (char*)0x11CC804;
	static char* DEFAULT_sPonyTail = (char*)0x11CC6DC;
	static char* DEFAULT_sQuiver = (char*)0x11CC750;
	static char* DEFAULT_sRCalf = (char*)0x11CC810;
	static char* DEFAULT_sRFoot = (char*)0x11CC714;
	static char* DEFAULT_sRForeArm = (char*)0x11CC930;
	static char* DEFAULT_sRHand = (char*)0x11CC708;
	static char* DEFAULT_sRThigh = (char*)0x11CC828;
	static char* DEFAULT_sRUpperArm = (char*)0x11CC738;
	static char* DEFAULT_sShield = (char*)0x11CC69C;
	static char* DEFAULT_sSpine1 = (char*)0x11CC81C;
	static char* DEFAULT_sSpine2 = (char*)0x11CC768;
	static char* DEFAULT_sTail = (char*)0x11CC7CC;
	static char* HIT_sBody = (char*)0x11CC75C;
	static char* HIT_sHead = (char*)0x11CC918;
	static char* HIT_sHitSpot = (char*)0x11CC8D0;
	static char* HIT_sHitStart = (char*)0x11CC840;
	static char* HIT_sLForeArm = (char*)0x11CC798;
	static char* HIT_sLHand = (char*)0x11CC774;
	static char* HIT_sLUpperArm = (char*)0x11CC8E8;
	static char* HIT_sRForeArm = (char*)0x11CC8AC;
	static char* HIT_sRHand = (char*)0x11CC834;
	static char* HIT_sRUpperArm = (char*)0x11CC8DC;
	static char* HIT_sSpine1 = (char*)0x11CC6B8;
	static char* HIT_sSpine2 = (char*)0x11CC6C4;
	static char* QUADHIT_sBody = (char*)0x11CC924;
	static char* QUADHIT_sHead = (char*)0x11CC7F8;
	static char* QUADHIT_sHitSpot = (char*)0x11CC960;
	static char* QUADHIT_sHitStart = (char*)0x11CC8A0;
	static char* QUADHIT_sLCalf = (char*)0x11CC96C;
	static char* QUADHIT_sLForeArm = (char*)0x11CC84C;
	static char* QUADHIT_sLThigh = (char*)0x11CC93C;
	static char* QUADHIT_sLUpperArm = (char*)0x11CC72C;
	static char* QUADHIT_sRCalf = (char*)0x11CC87C;
	static char* QUADHIT_sRForeArm = (char*)0x11CC7C0;
	static char* QUADHIT_sRThigh = (char*)0x11CC6FC;
	static char* QUADHIT_sRUpperArm = (char*)0x11CC6E8;
	static char* QUADHIT_sSpine1 = (char*)0x11CC744;
	static char* QUADHIT_sSpine2 = (char*)0x11CC8C4;
	static float* DEFAULT_fHighRot = (float*)0x11CC894;
	static float* DEFAULT_fHighTrans = (float*)0x11CC900;
	static float* DEFAULT_fLowRot = (float*)0x11CC720;
	static float* DEFAULT_fLowTrans = (float*)0x11CC954;
	static float* DEFAULT_fPassOutForce = (float*)0x11CC978;
	static float* DEFAULT_fPassOutTime = (float*)0x11CC8F4;
	static float* HIT_fBFMax = (float*)0x11CC864;
	static float* HIT_fBFMin = (float*)0x11CC7E0;
	static float* HIT_fGetUpTime = (float*)0x11CC7EC;
	static float* HIT_fHFMax = (float*)0x11CC780;
	static float* HIT_fHFMin = (float*)0x11CC870;
	static float* HIT_fKnockDownTime = (float*)0x11CC78C;
	static float* HIT_fMinHeirGain = (float*)0x11CC948;
	static float* HIT_fMinVelGain = (float*)0x11CC6D0;
};
#endif
namespace eRendererSettingCollection
{
	static bool* BlurShader_bUseBlurShader = (bool*)0x11C776C;
	static bool* BlurShaderHDR_bDoHighDynamicRange = (bool*)0x11C76C4;
	static bool* Display_bDrawShadows = (bool*)0x11C74D8;
	static bool* Display_bEnableEyefinity = (bool*)0x11C7720;
	static bool* Display_bFullScreen = (bool*)0x11C77B8;
	static bool* Display_bTransparencyMultisampling = (bool*)0x11C7794;
	static bool* Grass_b30GrassVS = (bool*)0x11C730C;
	static bool* Imagespace_bDoDepthOfField = (bool*)0x12023D4;
	static bool* Water_bAutoWaterSilhouetteReflections = (bool*)0x11C7A94;
	static bool* Water_bForceHighDetailReflections = (bool*)0x11C7C04;
	static bool* Water_bUseWaterDepth = (bool*)0x11C7BC0;
	static bool* Water_bUseWaterDisplacements = (bool*)0x11C7AC8;
	static bool* Water_bUseWaterReflectionBlur = (bool*)0x11C7C4C;
	static bool* Water_bUseWaterReflections = (bool*)0x11C7B70;
	static bool* Water_bUseWaterRefractions = (bool*)0x11C7C64;
	static char* Display_sD3DDevice = (char*)0x11C72C4;
	static float* Display_fDecalLOD1 = (float*)0x11C72D0;
	static float* Display_fDecalLOD2 = (float*)0x11C742C;
	static float* Display_fLightLODStartFade = (float*)0x11C7744;
	static float* Display_fShadowLODStartFade = (float*)0x11C756C;
	static float* Display_fSpecularLODStartFade = (float*)0x11C759C;
	static float* Grass_fGrassStartFadeDistance = (float*)0x11CA454;
	static float* LOD_fLODFadeOutMultActors = (float*)0x11C3EC4;
	static float* LOD_fLODFadeOutMultItems = (float*)0x11C3D10;
	static float* LOD_fLODFadeOutMultObjects = (float*)0x11C3D7C;
	static float* TerrainManager_fBlockLoadDistance = (float*)0x11D8780;
	static float* TerrainManager_fBlockLoadDistanceLow = (float*)0x11D8728;
	static float* TerrainManager_fSplitDistanceMult = (float*)0x11D86E4;
	static float* TerrainManager_fTreeLoadDistance = (float*)0x11D878C;
	static SInt32* Display_iActorShadowCountExt = (SInt32*)0x11C72E8;
	static SInt32* Display_iActorShadowCountInt = (SInt32*)0x11C72DC;
	static SInt32* Display_iAdapter = (SInt32*)0x11C7390;
	static SInt32* Display_iMaxAnisotropy = (SInt32*)0x11F94F0;
	static SInt32* Display_iMaxDecalsPerFrame = (SInt32*)0x11C5894;
	static SInt32* Display_iMaxSkinDecalsPerFrame = (SInt32*)0x11C585C;
	static SInt32* Display_iMultiSample = (SInt32*)0x11C73F8;
	static SInt32* Display_iShadowFilter = (SInt32*)0x11C76D0;
	static SInt32* Display_iShadowMapResolution = (SInt32*)0x11C7524;
	static SInt32* Display_iShadowMode = (SInt32*)0x11C7530;
	static SInt32* Display_iSizeH = (SInt32*)0x11C7190;
	static SInt32* Display_iSizeW = (SInt32*)0x11C73E0;
	static SInt32* Display_iTexMipMapMinimum = (SInt32*)0x11C7258;
	static SInt32* Display_iTexMipMapSkip = (SInt32*)0x11C77A0;
	static SInt32* Display_iWaterMultiSamples = (SInt32*)0x11C7288;
	static SInt32* Imagespace_iRadialBlurLevel = (SInt32*)0x11F9698;
	static SInt32* Water_iWaterBlurAmount = (SInt32*)0x11C7C20;
	static SInt32* Water_iWaterReflectHeight = (SInt32*)0x11C7684;
	static SInt32* Water_iWaterReflectWidth = (SInt32*)0x11C7788;
	static UInt32* Decals_uMaxDecals = (UInt32*)0x11C5800;
};